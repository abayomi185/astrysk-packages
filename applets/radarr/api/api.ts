/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Radarr
 * Radarr API docs
 * OpenAPI spec version: 3.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AlternativeTitleResource,
  ApiInfoResource,
  BackupResource,
  BlocklistBulkResource,
  BlocklistResource,
  BlocklistResourcePagingResource,
  CollectionResource,
  CollectionUpdateResource,
  CommandResource,
  CreditResource,
  CustomFilterResource,
  CustomFormatResource,
  DelayProfileResource,
  DeleteApiV3MovieIdParams,
  DeleteApiV3QueueBulkParams,
  DeleteApiV3QueueIdParams,
  DiskSpaceResource,
  DownloadClientBulkResource,
  DownloadClientConfigResource,
  DownloadClientResource,
  ExtraFileResource,
  GetApiV3AlttitleParams,
  GetApiV3BlocklistMovieParams,
  GetApiV3CalendarParams,
  GetApiV3CollectionParams,
  GetApiV3ConfigNamingExamplesParams,
  GetApiV3CreditParams,
  GetApiV3ExtrafileParams,
  GetApiV3FilesystemMediafilesParams,
  GetApiV3FilesystemParams,
  GetApiV3FilesystemTypeParams,
  GetApiV3HistoryMovieParams,
  GetApiV3HistoryParams,
  GetApiV3HistorySinceParams,
  GetApiV3ImportlistMovieParams,
  GetApiV3ManualimportParams,
  GetApiV3MovieLookupImdbParams,
  GetApiV3MovieLookupParams,
  GetApiV3MovieLookupTmdbParams,
  GetApiV3MovieParams,
  GetApiV3MoviefileParams,
  GetApiV3ParseParams,
  GetApiV3QueueDetailsParams,
  GetApiV3QueueParams,
  GetApiV3ReleaseParams,
  GetApiV3RenameParams,
  GetFeedV3CalendarRadarrIcsParams,
  HealthResource,
  HistoryResource,
  HistoryResourcePagingResource,
  HostConfigResource,
  ImportExclusionsResource,
  ImportListBulkResource,
  ImportListConfigResource,
  ImportListResource,
  IndexerBulkResource,
  IndexerConfigResource,
  IndexerFlagResource,
  IndexerResource,
  LanguageResource,
  LogFileResource,
  LogResourcePagingResource,
  ManualImportReprocessResource,
  ManualImportResource,
  MediaManagementConfigResource,
  MetadataConfigResource,
  MetadataResource,
  MovieEditorResource,
  MovieFileListResource,
  MovieFileResource,
  MovieResource,
  NamingConfigResource,
  NotificationResource,
  ParseResource,
  PingResource,
  PostApiV3DownloadclientParams,
  PostApiV3ImportlistParams,
  PostApiV3IndexerParams,
  PostApiV3MetadataParams,
  PostApiV3NotificationParams,
  PostLoginBody,
  PostLoginParams,
  PutApiV3DownloadclientIdParams,
  PutApiV3ImportlistIdParams,
  PutApiV3IndexerIdParams,
  PutApiV3MetadataIdParams,
  PutApiV3MovieIdParams,
  PutApiV3NotificationIdParams,
  QualityDefinitionResource,
  QualityProfileResource,
  QueueBulkResource,
  QueueResource,
  QueueResourcePagingResource,
  QueueStatusResource,
  ReleaseResource,
  RemotePathMappingResource,
  RenameMovieResource,
  RestrictionResource,
  RootFolderResource,
  SystemResource,
  TagDetailsResource,
  TagResource,
  TaskResource,
  UiConfigResource,
  UpdateResource,
} from "./model";
import { apiInstance } from "../../../api/apiInstance";
import type { ErrorType } from "../../../api/apiInstance";

export const getApiV3Alttitle = (
  params?: GetApiV3AlttitleParams,
  signal?: AbortSignal
) => {
  return apiInstance<AlternativeTitleResource[]>({
    url: `/api/v3/alttitle`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3AlttitleQueryKey = (
  params?: GetApiV3AlttitleParams
) => {
  return [`/api/v3/alttitle`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3AlttitleQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Alttitle>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3AlttitleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Alttitle>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3AlttitleQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Alttitle>>
  > = ({ signal }) => getApiV3Alttitle(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Alttitle>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3AlttitleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Alttitle>>
>;
export type GetApiV3AlttitleQueryError = ErrorType<unknown>;

export function useGetApiV3Alttitle<
  TData = Awaited<ReturnType<typeof getApiV3Alttitle>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3AlttitleParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Alttitle>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Alttitle>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Alttitle<
  TData = Awaited<ReturnType<typeof getApiV3Alttitle>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3AlttitleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Alttitle>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Alttitle>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Alttitle<
  TData = Awaited<ReturnType<typeof getApiV3Alttitle>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3AlttitleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Alttitle>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Alttitle<
  TData = Awaited<ReturnType<typeof getApiV3Alttitle>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3AlttitleParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Alttitle>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3AlttitleQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3AlttitleId = (id: number, signal?: AbortSignal) => {
  return apiInstance<AlternativeTitleResource>({
    url: `/api/v3/alttitle/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3AlttitleIdQueryKey = (id: number) => {
  return [`/api/v3/alttitle/${id}`] as const;
};

export const getGetApiV3AlttitleIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3AlttitleId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3AlttitleId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3AlttitleIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3AlttitleId>>
  > = ({ signal }) => getApiV3AlttitleId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3AlttitleId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3AlttitleIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3AlttitleId>>
>;
export type GetApiV3AlttitleIdQueryError = ErrorType<unknown>;

export function useGetApiV3AlttitleId<
  TData = Awaited<ReturnType<typeof getApiV3AlttitleId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3AlttitleId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3AlttitleId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3AlttitleId<
  TData = Awaited<ReturnType<typeof getApiV3AlttitleId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3AlttitleId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3AlttitleId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3AlttitleId<
  TData = Awaited<ReturnType<typeof getApiV3AlttitleId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3AlttitleId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3AlttitleId<
  TData = Awaited<ReturnType<typeof getApiV3AlttitleId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3AlttitleId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3AlttitleIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApi = (signal?: AbortSignal) => {
  return apiInstance<ApiInfoResource>({ url: `/api`, method: "GET", signal });
};

export const getGetApiQueryKey = () => {
  return [`/api`] as const;
};

export const getGetApiQueryOptions = <
  TData = Awaited<ReturnType<typeof getApi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApi>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApi>>> = ({
    signal,
  }) => getApi(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApi>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiQueryResult = NonNullable<Awaited<ReturnType<typeof getApi>>>;
export type GetApiQueryError = ErrorType<unknown>;

export function useGetApi<
  TData = Awaited<ReturnType<typeof getApi>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApi>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApi>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApi<
  TData = Awaited<ReturnType<typeof getApi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApi>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApi>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApi<
  TData = Awaited<ReturnType<typeof getApi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApi>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApi<
  TData = Awaited<ReturnType<typeof getApi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApi>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postLogin = (
  postLoginBody: PostLoginBody,
  params?: PostLoginParams
) => {
  const formData = new FormData();
  if (postLoginBody.Username !== undefined) {
    formData.append("Username", postLoginBody.Username);
  }
  if (postLoginBody.Password !== undefined) {
    formData.append("Password", postLoginBody.Password);
  }
  if (postLoginBody.RememberMe !== undefined) {
    formData.append("RememberMe", postLoginBody.RememberMe);
  }

  return apiInstance<void>({
    url: `/login`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
  });
};

export const getPostLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    { data: PostLoginBody; params?: PostLoginParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: PostLoginBody; params?: PostLoginParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLogin>>,
    { data: PostLoginBody; params?: PostLoginParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postLogin(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLogin>>
>;
export type PostLoginMutationBody = PostLoginBody;
export type PostLoginMutationError = ErrorType<unknown>;

export const usePostLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    { data: PostLoginBody; params?: PostLoginParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: PostLoginBody; params?: PostLoginParams },
  TContext
> => {
  const mutationOptions = getPostLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getLogin = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/login`, method: "GET", signal });
};

export const getGetLoginQueryKey = () => {
  return [`/login`] as const;
};

export const getGetLoginQueryOptions = <
  TData = Awaited<ReturnType<typeof getLogin>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogin>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLoginQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLogin>>> = ({
    signal,
  }) => getLogin(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLogin>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetLoginQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLogin>>
>;
export type GetLoginQueryError = ErrorType<unknown>;

export function useGetLogin<
  TData = Awaited<ReturnType<typeof getLogin>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogin>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLogin>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetLogin<
  TData = Awaited<ReturnType<typeof getLogin>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogin>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLogin>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetLogin<
  TData = Awaited<ReturnType<typeof getLogin>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogin>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetLogin<
  TData = Awaited<ReturnType<typeof getLogin>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogin>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetLoginQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getLogout = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/logout`, method: "GET", signal });
};

export const getGetLogoutQueryKey = () => {
  return [`/logout`] as const;
};

export const getGetLogoutQueryOptions = <
  TData = Awaited<ReturnType<typeof getLogout>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLogoutQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLogout>>> = ({
    signal,
  }) => getLogout(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLogout>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetLogoutQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLogout>>
>;
export type GetLogoutQueryError = ErrorType<unknown>;

export function useGetLogout<
  TData = Awaited<ReturnType<typeof getLogout>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLogout>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetLogout<
  TData = Awaited<ReturnType<typeof getLogout>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLogout>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetLogout<
  TData = Awaited<ReturnType<typeof getLogout>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetLogout<
  TData = Awaited<ReturnType<typeof getLogout>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetLogoutQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3SystemBackup = (signal?: AbortSignal) => {
  return apiInstance<BackupResource[]>({
    url: `/api/v3/system/backup`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3SystemBackupQueryKey = () => {
  return [`/api/v3/system/backup`] as const;
};

export const getGetApiV3SystemBackupQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3SystemBackup>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemBackup>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3SystemBackupQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SystemBackup>>
  > = ({ signal }) => getApiV3SystemBackup(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3SystemBackup>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3SystemBackupQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SystemBackup>>
>;
export type GetApiV3SystemBackupQueryError = ErrorType<unknown>;

export function useGetApiV3SystemBackup<
  TData = Awaited<ReturnType<typeof getApiV3SystemBackup>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemBackup>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3SystemBackup>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3SystemBackup<
  TData = Awaited<ReturnType<typeof getApiV3SystemBackup>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemBackup>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3SystemBackup>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3SystemBackup<
  TData = Awaited<ReturnType<typeof getApiV3SystemBackup>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemBackup>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3SystemBackup<
  TData = Awaited<ReturnType<typeof getApiV3SystemBackup>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemBackup>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3SystemBackupQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV3SystemBackupId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/system/backup/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3SystemBackupIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3SystemBackupId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3SystemBackupId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3SystemBackupId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3SystemBackupId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3SystemBackupIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3SystemBackupId>>
>;

export type DeleteApiV3SystemBackupIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3SystemBackupId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3SystemBackupId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3SystemBackupId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3SystemBackupIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3SystemBackupRestoreId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/system/backup/restore/${id}`,
    method: "POST",
  });
};

export const getPostApiV3SystemBackupRestoreIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3SystemBackupRestoreId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3SystemBackupRestoreId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3SystemBackupRestoreId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postApiV3SystemBackupRestoreId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3SystemBackupRestoreIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3SystemBackupRestoreId>>
>;

export type PostApiV3SystemBackupRestoreIdMutationError = ErrorType<unknown>;

export const usePostApiV3SystemBackupRestoreId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3SystemBackupRestoreId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3SystemBackupRestoreId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getPostApiV3SystemBackupRestoreIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3SystemBackupRestoreUpload = () => {
  return apiInstance<void>({
    url: `/api/v3/system/backup/restore/upload`,
    method: "POST",
  });
};

export const getPostApiV3SystemBackupRestoreUploadMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3SystemBackupRestoreUpload>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3SystemBackupRestoreUpload>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3SystemBackupRestoreUpload>>,
    void
  > = () => {
    return postApiV3SystemBackupRestoreUpload();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3SystemBackupRestoreUploadMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3SystemBackupRestoreUpload>>
>;

export type PostApiV3SystemBackupRestoreUploadMutationError =
  ErrorType<unknown>;

export const usePostApiV3SystemBackupRestoreUpload = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3SystemBackupRestoreUpload>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3SystemBackupRestoreUpload>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPostApiV3SystemBackupRestoreUploadMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Blocklist = (signal?: AbortSignal) => {
  return apiInstance<BlocklistResourcePagingResource>({
    url: `/api/v3/blocklist`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3BlocklistQueryKey = () => {
  return [`/api/v3/blocklist`] as const;
};

export const getGetApiV3BlocklistQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Blocklist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Blocklist>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3BlocklistQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Blocklist>>
  > = ({ signal }) => getApiV3Blocklist(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Blocklist>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3BlocklistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Blocklist>>
>;
export type GetApiV3BlocklistQueryError = ErrorType<unknown>;

export function useGetApiV3Blocklist<
  TData = Awaited<ReturnType<typeof getApiV3Blocklist>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Blocklist>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Blocklist>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Blocklist<
  TData = Awaited<ReturnType<typeof getApiV3Blocklist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Blocklist>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Blocklist>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Blocklist<
  TData = Awaited<ReturnType<typeof getApiV3Blocklist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Blocklist>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Blocklist<
  TData = Awaited<ReturnType<typeof getApiV3Blocklist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Blocklist>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3BlocklistQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3BlocklistMovie = (
  params?: GetApiV3BlocklistMovieParams,
  signal?: AbortSignal
) => {
  return apiInstance<BlocklistResource[]>({
    url: `/api/v3/blocklist/movie`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3BlocklistMovieQueryKey = (
  params?: GetApiV3BlocklistMovieParams
) => {
  return [`/api/v3/blocklist/movie`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3BlocklistMovieQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3BlocklistMovie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3BlocklistMovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3BlocklistMovie>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3BlocklistMovieQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3BlocklistMovie>>
  > = ({ signal }) => getApiV3BlocklistMovie(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3BlocklistMovie>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3BlocklistMovieQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3BlocklistMovie>>
>;
export type GetApiV3BlocklistMovieQueryError = ErrorType<unknown>;

export function useGetApiV3BlocklistMovie<
  TData = Awaited<ReturnType<typeof getApiV3BlocklistMovie>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3BlocklistMovieParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3BlocklistMovie>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3BlocklistMovie>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3BlocklistMovie<
  TData = Awaited<ReturnType<typeof getApiV3BlocklistMovie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3BlocklistMovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3BlocklistMovie>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3BlocklistMovie>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3BlocklistMovie<
  TData = Awaited<ReturnType<typeof getApiV3BlocklistMovie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3BlocklistMovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3BlocklistMovie>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3BlocklistMovie<
  TData = Awaited<ReturnType<typeof getApiV3BlocklistMovie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3BlocklistMovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3BlocklistMovie>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3BlocklistMovieQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV3BlocklistId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/blocklist/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3BlocklistIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3BlocklistId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3BlocklistId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3BlocklistId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3BlocklistId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3BlocklistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3BlocklistId>>
>;

export type DeleteApiV3BlocklistIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3BlocklistId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3BlocklistId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3BlocklistId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3BlocklistIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3BlocklistBulk = (
  blocklistBulkResource: BlocklistBulkResource
) => {
  return apiInstance<void>({
    url: `/api/v3/blocklist/bulk`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: blocklistBulkResource,
  });
};

export const getDeleteApiV3BlocklistBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3BlocklistBulk>>,
    TError,
    { data: BlocklistBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3BlocklistBulk>>,
  TError,
  { data: BlocklistBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3BlocklistBulk>>,
    { data: BlocklistBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3BlocklistBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3BlocklistBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3BlocklistBulk>>
>;
export type DeleteApiV3BlocklistBulkMutationBody = BlocklistBulkResource;
export type DeleteApiV3BlocklistBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3BlocklistBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3BlocklistBulk>>,
    TError,
    { data: BlocklistBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3BlocklistBulk>>,
  TError,
  { data: BlocklistBulkResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV3BlocklistBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Calendar = (
  params?: GetApiV3CalendarParams,
  signal?: AbortSignal
) => {
  return apiInstance<MovieResource[]>({
    url: `/api/v3/calendar`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3CalendarQueryKey = (
  params?: GetApiV3CalendarParams
) => {
  return [`/api/v3/calendar`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3CalendarQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Calendar>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3CalendarParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Calendar>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3CalendarQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Calendar>>
  > = ({ signal }) => getApiV3Calendar(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Calendar>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3CalendarQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Calendar>>
>;
export type GetApiV3CalendarQueryError = ErrorType<unknown>;

export function useGetApiV3Calendar<
  TData = Awaited<ReturnType<typeof getApiV3Calendar>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3CalendarParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Calendar>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Calendar>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Calendar<
  TData = Awaited<ReturnType<typeof getApiV3Calendar>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3CalendarParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Calendar>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Calendar>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Calendar<
  TData = Awaited<ReturnType<typeof getApiV3Calendar>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3CalendarParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Calendar>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Calendar<
  TData = Awaited<ReturnType<typeof getApiV3Calendar>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3CalendarParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Calendar>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3CalendarQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3CalendarId = (id: number, signal?: AbortSignal) => {
  return apiInstance<MovieResource>({
    url: `/api/v3/calendar/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3CalendarIdQueryKey = (id: number) => {
  return [`/api/v3/calendar/${id}`] as const;
};

export const getGetApiV3CalendarIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3CalendarId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CalendarId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3CalendarIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3CalendarId>>
  > = ({ signal }) => getApiV3CalendarId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3CalendarId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3CalendarIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3CalendarId>>
>;
export type GetApiV3CalendarIdQueryError = ErrorType<unknown>;

export function useGetApiV3CalendarId<
  TData = Awaited<ReturnType<typeof getApiV3CalendarId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CalendarId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3CalendarId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CalendarId<
  TData = Awaited<ReturnType<typeof getApiV3CalendarId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CalendarId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3CalendarId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CalendarId<
  TData = Awaited<ReturnType<typeof getApiV3CalendarId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CalendarId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3CalendarId<
  TData = Awaited<ReturnType<typeof getApiV3CalendarId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CalendarId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3CalendarIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFeedV3CalendarRadarrIcs = (
  params?: GetFeedV3CalendarRadarrIcsParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/feed/v3/calendar/radarr.ics`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetFeedV3CalendarRadarrIcsQueryKey = (
  params?: GetFeedV3CalendarRadarrIcsParams
) => {
  return [`/feed/v3/calendar/radarr.ics`, ...(params ? [params] : [])] as const;
};

export const getGetFeedV3CalendarRadarrIcsQueryOptions = <
  TData = Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>,
  TError = ErrorType<unknown>
>(
  params?: GetFeedV3CalendarRadarrIcsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetFeedV3CalendarRadarrIcsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>
  > = ({ signal }) => getFeedV3CalendarRadarrIcs(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetFeedV3CalendarRadarrIcsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>
>;
export type GetFeedV3CalendarRadarrIcsQueryError = ErrorType<unknown>;

export function useGetFeedV3CalendarRadarrIcs<
  TData = Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetFeedV3CalendarRadarrIcsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetFeedV3CalendarRadarrIcs<
  TData = Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>,
  TError = ErrorType<unknown>
>(
  params?: GetFeedV3CalendarRadarrIcsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetFeedV3CalendarRadarrIcs<
  TData = Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>,
  TError = ErrorType<unknown>
>(
  params?: GetFeedV3CalendarRadarrIcsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetFeedV3CalendarRadarrIcs<
  TData = Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>,
  TError = ErrorType<unknown>
>(
  params?: GetFeedV3CalendarRadarrIcsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFeedV3CalendarRadarrIcs>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetFeedV3CalendarRadarrIcsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Collection = (
  params?: GetApiV3CollectionParams,
  signal?: AbortSignal
) => {
  return apiInstance<CollectionResource[]>({
    url: `/api/v3/collection`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3CollectionQueryKey = (
  params?: GetApiV3CollectionParams
) => {
  return [`/api/v3/collection`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3CollectionQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Collection>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3CollectionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Collection>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3CollectionQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Collection>>
  > = ({ signal }) => getApiV3Collection(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Collection>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3CollectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Collection>>
>;
export type GetApiV3CollectionQueryError = ErrorType<unknown>;

export function useGetApiV3Collection<
  TData = Awaited<ReturnType<typeof getApiV3Collection>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3CollectionParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Collection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Collection>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Collection<
  TData = Awaited<ReturnType<typeof getApiV3Collection>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3CollectionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Collection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Collection>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Collection<
  TData = Awaited<ReturnType<typeof getApiV3Collection>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3CollectionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Collection>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Collection<
  TData = Awaited<ReturnType<typeof getApiV3Collection>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3CollectionParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Collection>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3CollectionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3Collection = (
  collectionUpdateResource: CollectionUpdateResource
) => {
  return apiInstance<void>({
    url: `/api/v3/collection`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: collectionUpdateResource,
  });
};

export const getPutApiV3CollectionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3Collection>>,
    TError,
    { data: CollectionUpdateResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3Collection>>,
  TError,
  { data: CollectionUpdateResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3Collection>>,
    { data: CollectionUpdateResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3Collection(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3CollectionMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3Collection>>
>;
export type PutApiV3CollectionMutationBody = CollectionUpdateResource;
export type PutApiV3CollectionMutationError = ErrorType<unknown>;

export const usePutApiV3Collection = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3Collection>>,
    TError,
    { data: CollectionUpdateResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3Collection>>,
  TError,
  { data: CollectionUpdateResource },
  TContext
> => {
  const mutationOptions = getPutApiV3CollectionMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3CollectionId = (
  id: string,
  collectionResource: CollectionResource
) => {
  return apiInstance<CollectionResource>({
    url: `/api/v3/collection/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: collectionResource,
  });
};

export const getPutApiV3CollectionIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3CollectionId>>,
    TError,
    { id: string; data: CollectionResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3CollectionId>>,
  TError,
  { id: string; data: CollectionResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3CollectionId>>,
    { id: string; data: CollectionResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3CollectionId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3CollectionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3CollectionId>>
>;
export type PutApiV3CollectionIdMutationBody = CollectionResource;
export type PutApiV3CollectionIdMutationError = ErrorType<unknown>;

export const usePutApiV3CollectionId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3CollectionId>>,
    TError,
    { id: string; data: CollectionResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3CollectionId>>,
  TError,
  { id: string; data: CollectionResource },
  TContext
> => {
  const mutationOptions = getPutApiV3CollectionIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3CollectionId = (id: number, signal?: AbortSignal) => {
  return apiInstance<CollectionResource>({
    url: `/api/v3/collection/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3CollectionIdQueryKey = (id: number) => {
  return [`/api/v3/collection/${id}`] as const;
};

export const getGetApiV3CollectionIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3CollectionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CollectionId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3CollectionIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3CollectionId>>
  > = ({ signal }) => getApiV3CollectionId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3CollectionId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3CollectionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3CollectionId>>
>;
export type GetApiV3CollectionIdQueryError = ErrorType<unknown>;

export function useGetApiV3CollectionId<
  TData = Awaited<ReturnType<typeof getApiV3CollectionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CollectionId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3CollectionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CollectionId<
  TData = Awaited<ReturnType<typeof getApiV3CollectionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CollectionId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3CollectionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CollectionId<
  TData = Awaited<ReturnType<typeof getApiV3CollectionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CollectionId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3CollectionId<
  TData = Awaited<ReturnType<typeof getApiV3CollectionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CollectionId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3CollectionIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Command = (commandResource: CommandResource) => {
  return apiInstance<CommandResource>({
    url: `/api/v3/command`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: commandResource,
  });
};

export const getPostApiV3CommandMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Command>>,
    TError,
    { data: CommandResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Command>>,
  TError,
  { data: CommandResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Command>>,
    { data: CommandResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Command(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3CommandMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Command>>
>;
export type PostApiV3CommandMutationBody = CommandResource;
export type PostApiV3CommandMutationError = ErrorType<unknown>;

export const usePostApiV3Command = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Command>>,
    TError,
    { data: CommandResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Command>>,
  TError,
  { data: CommandResource },
  TContext
> => {
  const mutationOptions = getPostApiV3CommandMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Command = (signal?: AbortSignal) => {
  return apiInstance<CommandResource[]>({
    url: `/api/v3/command`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3CommandQueryKey = () => {
  return [`/api/v3/command`] as const;
};

export const getGetApiV3CommandQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Command>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Command>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3CommandQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Command>>> = ({
    signal,
  }) => getApiV3Command(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Command>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3CommandQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Command>>
>;
export type GetApiV3CommandQueryError = ErrorType<unknown>;

export function useGetApiV3Command<
  TData = Awaited<ReturnType<typeof getApiV3Command>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Command>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Command>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Command<
  TData = Awaited<ReturnType<typeof getApiV3Command>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Command>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Command>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Command<
  TData = Awaited<ReturnType<typeof getApiV3Command>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Command>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Command<
  TData = Awaited<ReturnType<typeof getApiV3Command>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Command>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3CommandQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV3CommandId = (id: number) => {
  return apiInstance<void>({ url: `/api/v3/command/${id}`, method: "DELETE" });
};

export const getDeleteApiV3CommandIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3CommandId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3CommandId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3CommandId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3CommandId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3CommandIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3CommandId>>
>;

export type DeleteApiV3CommandIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3CommandId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3CommandId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3CommandId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3CommandIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3CommandId = (id: number, signal?: AbortSignal) => {
  return apiInstance<CommandResource>({
    url: `/api/v3/command/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3CommandIdQueryKey = (id: number) => {
  return [`/api/v3/command/${id}`] as const;
};

export const getGetApiV3CommandIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3CommandId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CommandId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3CommandIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3CommandId>>
  > = ({ signal }) => getApiV3CommandId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3CommandId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3CommandIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3CommandId>>
>;
export type GetApiV3CommandIdQueryError = ErrorType<unknown>;

export function useGetApiV3CommandId<
  TData = Awaited<ReturnType<typeof getApiV3CommandId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CommandId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3CommandId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CommandId<
  TData = Awaited<ReturnType<typeof getApiV3CommandId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CommandId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3CommandId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CommandId<
  TData = Awaited<ReturnType<typeof getApiV3CommandId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CommandId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3CommandId<
  TData = Awaited<ReturnType<typeof getApiV3CommandId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CommandId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3CommandIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Credit = (
  params?: GetApiV3CreditParams,
  signal?: AbortSignal
) => {
  return apiInstance<CreditResource[]>({
    url: `/api/v3/credit`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3CreditQueryKey = (params?: GetApiV3CreditParams) => {
  return [`/api/v3/credit`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3CreditQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Credit>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3CreditParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Credit>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3CreditQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Credit>>> = ({
    signal,
  }) => getApiV3Credit(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Credit>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3CreditQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Credit>>
>;
export type GetApiV3CreditQueryError = ErrorType<unknown>;

export function useGetApiV3Credit<
  TData = Awaited<ReturnType<typeof getApiV3Credit>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3CreditParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Credit>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Credit>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Credit<
  TData = Awaited<ReturnType<typeof getApiV3Credit>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3CreditParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Credit>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Credit>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Credit<
  TData = Awaited<ReturnType<typeof getApiV3Credit>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3CreditParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Credit>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Credit<
  TData = Awaited<ReturnType<typeof getApiV3Credit>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3CreditParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Credit>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3CreditQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3CreditId = (id: number, signal?: AbortSignal) => {
  return apiInstance<CreditResource>({
    url: `/api/v3/credit/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3CreditIdQueryKey = (id: number) => {
  return [`/api/v3/credit/${id}`] as const;
};

export const getGetApiV3CreditIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3CreditId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CreditId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3CreditIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3CreditId>>
  > = ({ signal }) => getApiV3CreditId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3CreditId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3CreditIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3CreditId>>
>;
export type GetApiV3CreditIdQueryError = ErrorType<unknown>;

export function useGetApiV3CreditId<
  TData = Awaited<ReturnType<typeof getApiV3CreditId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CreditId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3CreditId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CreditId<
  TData = Awaited<ReturnType<typeof getApiV3CreditId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CreditId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3CreditId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CreditId<
  TData = Awaited<ReturnType<typeof getApiV3CreditId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CreditId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3CreditId<
  TData = Awaited<ReturnType<typeof getApiV3CreditId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CreditId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3CreditIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Customfilter = (signal?: AbortSignal) => {
  return apiInstance<CustomFilterResource[]>({
    url: `/api/v3/customfilter`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3CustomfilterQueryKey = () => {
  return [`/api/v3/customfilter`] as const;
};

export const getGetApiV3CustomfilterQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Customfilter>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Customfilter>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3CustomfilterQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Customfilter>>
  > = ({ signal }) => getApiV3Customfilter(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Customfilter>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3CustomfilterQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Customfilter>>
>;
export type GetApiV3CustomfilterQueryError = ErrorType<unknown>;

export function useGetApiV3Customfilter<
  TData = Awaited<ReturnType<typeof getApiV3Customfilter>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Customfilter>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Customfilter>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Customfilter<
  TData = Awaited<ReturnType<typeof getApiV3Customfilter>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Customfilter>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Customfilter>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Customfilter<
  TData = Awaited<ReturnType<typeof getApiV3Customfilter>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Customfilter>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Customfilter<
  TData = Awaited<ReturnType<typeof getApiV3Customfilter>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Customfilter>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3CustomfilterQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Customfilter = (
  customFilterResource: CustomFilterResource
) => {
  return apiInstance<CustomFilterResource>({
    url: `/api/v3/customfilter`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: customFilterResource,
  });
};

export const getPostApiV3CustomfilterMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Customfilter>>,
    TError,
    { data: CustomFilterResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Customfilter>>,
  TError,
  { data: CustomFilterResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Customfilter>>,
    { data: CustomFilterResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Customfilter(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3CustomfilterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Customfilter>>
>;
export type PostApiV3CustomfilterMutationBody = CustomFilterResource;
export type PostApiV3CustomfilterMutationError = ErrorType<unknown>;

export const usePostApiV3Customfilter = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Customfilter>>,
    TError,
    { data: CustomFilterResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Customfilter>>,
  TError,
  { data: CustomFilterResource },
  TContext
> => {
  const mutationOptions = getPostApiV3CustomfilterMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3CustomfilterId = (
  id: string,
  customFilterResource: CustomFilterResource
) => {
  return apiInstance<CustomFilterResource>({
    url: `/api/v3/customfilter/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: customFilterResource,
  });
};

export const getPutApiV3CustomfilterIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3CustomfilterId>>,
    TError,
    { id: string; data: CustomFilterResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3CustomfilterId>>,
  TError,
  { id: string; data: CustomFilterResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3CustomfilterId>>,
    { id: string; data: CustomFilterResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3CustomfilterId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3CustomfilterIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3CustomfilterId>>
>;
export type PutApiV3CustomfilterIdMutationBody = CustomFilterResource;
export type PutApiV3CustomfilterIdMutationError = ErrorType<unknown>;

export const usePutApiV3CustomfilterId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3CustomfilterId>>,
    TError,
    { id: string; data: CustomFilterResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3CustomfilterId>>,
  TError,
  { id: string; data: CustomFilterResource },
  TContext
> => {
  const mutationOptions = getPutApiV3CustomfilterIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3CustomfilterId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/customfilter/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3CustomfilterIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3CustomfilterId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3CustomfilterId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3CustomfilterId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3CustomfilterId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3CustomfilterIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3CustomfilterId>>
>;

export type DeleteApiV3CustomfilterIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3CustomfilterId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3CustomfilterId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3CustomfilterId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3CustomfilterIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3CustomfilterId = (id: number, signal?: AbortSignal) => {
  return apiInstance<CustomFilterResource>({
    url: `/api/v3/customfilter/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3CustomfilterIdQueryKey = (id: number) => {
  return [`/api/v3/customfilter/${id}`] as const;
};

export const getGetApiV3CustomfilterIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3CustomfilterIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3CustomfilterId>>
  > = ({ signal }) => getApiV3CustomfilterId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3CustomfilterIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3CustomfilterId>>
>;
export type GetApiV3CustomfilterIdQueryError = ErrorType<unknown>;

export function useGetApiV3CustomfilterId<
  TData = Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CustomfilterId<
  TData = Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CustomfilterId<
  TData = Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3CustomfilterId<
  TData = Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3CustomfilterIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Customformat = (
  customFormatResource: CustomFormatResource
) => {
  return apiInstance<CustomFormatResource>({
    url: `/api/v3/customformat`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: customFormatResource,
  });
};

export const getPostApiV3CustomformatMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Customformat>>,
    TError,
    { data: CustomFormatResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Customformat>>,
  TError,
  { data: CustomFormatResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Customformat>>,
    { data: CustomFormatResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Customformat(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3CustomformatMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Customformat>>
>;
export type PostApiV3CustomformatMutationBody = CustomFormatResource;
export type PostApiV3CustomformatMutationError = ErrorType<unknown>;

export const usePostApiV3Customformat = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Customformat>>,
    TError,
    { data: CustomFormatResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Customformat>>,
  TError,
  { data: CustomFormatResource },
  TContext
> => {
  const mutationOptions = getPostApiV3CustomformatMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Customformat = (signal?: AbortSignal) => {
  return apiInstance<CustomFormatResource[]>({
    url: `/api/v3/customformat`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3CustomformatQueryKey = () => {
  return [`/api/v3/customformat`] as const;
};

export const getGetApiV3CustomformatQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Customformat>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Customformat>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3CustomformatQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Customformat>>
  > = ({ signal }) => getApiV3Customformat(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Customformat>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3CustomformatQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Customformat>>
>;
export type GetApiV3CustomformatQueryError = ErrorType<unknown>;

export function useGetApiV3Customformat<
  TData = Awaited<ReturnType<typeof getApiV3Customformat>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Customformat>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Customformat>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Customformat<
  TData = Awaited<ReturnType<typeof getApiV3Customformat>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Customformat>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Customformat>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Customformat<
  TData = Awaited<ReturnType<typeof getApiV3Customformat>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Customformat>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Customformat<
  TData = Awaited<ReturnType<typeof getApiV3Customformat>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Customformat>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3CustomformatQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3CustomformatId = (
  id: string,
  customFormatResource: CustomFormatResource
) => {
  return apiInstance<CustomFormatResource>({
    url: `/api/v3/customformat/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: customFormatResource,
  });
};

export const getPutApiV3CustomformatIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3CustomformatId>>,
    TError,
    { id: string; data: CustomFormatResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3CustomformatId>>,
  TError,
  { id: string; data: CustomFormatResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3CustomformatId>>,
    { id: string; data: CustomFormatResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3CustomformatId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3CustomformatIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3CustomformatId>>
>;
export type PutApiV3CustomformatIdMutationBody = CustomFormatResource;
export type PutApiV3CustomformatIdMutationError = ErrorType<unknown>;

export const usePutApiV3CustomformatId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3CustomformatId>>,
    TError,
    { id: string; data: CustomFormatResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3CustomformatId>>,
  TError,
  { id: string; data: CustomFormatResource },
  TContext
> => {
  const mutationOptions = getPutApiV3CustomformatIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3CustomformatId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/customformat/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3CustomformatIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3CustomformatId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3CustomformatId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3CustomformatId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3CustomformatId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3CustomformatIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3CustomformatId>>
>;

export type DeleteApiV3CustomformatIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3CustomformatId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3CustomformatId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3CustomformatId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3CustomformatIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3CustomformatId = (id: number, signal?: AbortSignal) => {
  return apiInstance<CustomFormatResource>({
    url: `/api/v3/customformat/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3CustomformatIdQueryKey = (id: number) => {
  return [`/api/v3/customformat/${id}`] as const;
};

export const getGetApiV3CustomformatIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3CustomformatId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CustomformatId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3CustomformatIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3CustomformatId>>
  > = ({ signal }) => getApiV3CustomformatId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3CustomformatId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3CustomformatIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3CustomformatId>>
>;
export type GetApiV3CustomformatIdQueryError = ErrorType<unknown>;

export function useGetApiV3CustomformatId<
  TData = Awaited<ReturnType<typeof getApiV3CustomformatId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CustomformatId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3CustomformatId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CustomformatId<
  TData = Awaited<ReturnType<typeof getApiV3CustomformatId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CustomformatId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3CustomformatId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CustomformatId<
  TData = Awaited<ReturnType<typeof getApiV3CustomformatId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CustomformatId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3CustomformatId<
  TData = Awaited<ReturnType<typeof getApiV3CustomformatId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3CustomformatId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3CustomformatIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3CustomformatSchema = (signal?: AbortSignal) => {
  return apiInstance<void>({
    url: `/api/v3/customformat/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3CustomformatSchemaQueryKey = () => {
  return [`/api/v3/customformat/schema`] as const;
};

export const getGetApiV3CustomformatSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3CustomformatSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3CustomformatSchema>>
  > = ({ signal }) => getApiV3CustomformatSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3CustomformatSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3CustomformatSchema>>
>;
export type GetApiV3CustomformatSchemaQueryError = ErrorType<unknown>;

export function useGetApiV3CustomformatSchema<
  TData = Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CustomformatSchema<
  TData = Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3CustomformatSchema<
  TData = Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3CustomformatSchema<
  TData = Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3CustomformatSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Delayprofile = (
  delayProfileResource: DelayProfileResource
) => {
  return apiInstance<DelayProfileResource>({
    url: `/api/v3/delayprofile`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: delayProfileResource,
  });
};

export const getPostApiV3DelayprofileMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Delayprofile>>,
    TError,
    { data: DelayProfileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Delayprofile>>,
  TError,
  { data: DelayProfileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Delayprofile>>,
    { data: DelayProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Delayprofile(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3DelayprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Delayprofile>>
>;
export type PostApiV3DelayprofileMutationBody = DelayProfileResource;
export type PostApiV3DelayprofileMutationError = ErrorType<unknown>;

export const usePostApiV3Delayprofile = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Delayprofile>>,
    TError,
    { data: DelayProfileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Delayprofile>>,
  TError,
  { data: DelayProfileResource },
  TContext
> => {
  const mutationOptions = getPostApiV3DelayprofileMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Delayprofile = (signal?: AbortSignal) => {
  return apiInstance<DelayProfileResource[]>({
    url: `/api/v3/delayprofile`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3DelayprofileQueryKey = () => {
  return [`/api/v3/delayprofile`] as const;
};

export const getGetApiV3DelayprofileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Delayprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Delayprofile>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3DelayprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Delayprofile>>
  > = ({ signal }) => getApiV3Delayprofile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Delayprofile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3DelayprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Delayprofile>>
>;
export type GetApiV3DelayprofileQueryError = ErrorType<unknown>;

export function useGetApiV3Delayprofile<
  TData = Awaited<ReturnType<typeof getApiV3Delayprofile>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Delayprofile>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Delayprofile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Delayprofile<
  TData = Awaited<ReturnType<typeof getApiV3Delayprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Delayprofile>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Delayprofile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Delayprofile<
  TData = Awaited<ReturnType<typeof getApiV3Delayprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Delayprofile>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Delayprofile<
  TData = Awaited<ReturnType<typeof getApiV3Delayprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Delayprofile>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3DelayprofileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV3DelayprofileId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/delayprofile/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3DelayprofileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3DelayprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3DelayprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3DelayprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3DelayprofileId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3DelayprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3DelayprofileId>>
>;

export type DeleteApiV3DelayprofileIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3DelayprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3DelayprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3DelayprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3DelayprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3DelayprofileId = (
  id: string,
  delayProfileResource: DelayProfileResource
) => {
  return apiInstance<DelayProfileResource>({
    url: `/api/v3/delayprofile/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: delayProfileResource,
  });
};

export const getPutApiV3DelayprofileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3DelayprofileId>>,
    TError,
    { id: string; data: DelayProfileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3DelayprofileId>>,
  TError,
  { id: string; data: DelayProfileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3DelayprofileId>>,
    { id: string; data: DelayProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3DelayprofileId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3DelayprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3DelayprofileId>>
>;
export type PutApiV3DelayprofileIdMutationBody = DelayProfileResource;
export type PutApiV3DelayprofileIdMutationError = ErrorType<unknown>;

export const usePutApiV3DelayprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3DelayprofileId>>,
    TError,
    { id: string; data: DelayProfileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3DelayprofileId>>,
  TError,
  { id: string; data: DelayProfileResource },
  TContext
> => {
  const mutationOptions = getPutApiV3DelayprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3DelayprofileId = (id: number, signal?: AbortSignal) => {
  return apiInstance<DelayProfileResource>({
    url: `/api/v3/delayprofile/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3DelayprofileIdQueryKey = (id: number) => {
  return [`/api/v3/delayprofile/${id}`] as const;
};

export const getGetApiV3DelayprofileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3DelayprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3DelayprofileId>>
  > = ({ signal }) => getApiV3DelayprofileId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3DelayprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3DelayprofileId>>
>;
export type GetApiV3DelayprofileIdQueryError = ErrorType<unknown>;

export function useGetApiV3DelayprofileId<
  TData = Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3DelayprofileId<
  TData = Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3DelayprofileId<
  TData = Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3DelayprofileId<
  TData = Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3DelayprofileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Diskspace = (signal?: AbortSignal) => {
  return apiInstance<DiskSpaceResource[]>({
    url: `/api/v3/diskspace`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3DiskspaceQueryKey = () => {
  return [`/api/v3/diskspace`] as const;
};

export const getGetApiV3DiskspaceQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Diskspace>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Diskspace>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3DiskspaceQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Diskspace>>
  > = ({ signal }) => getApiV3Diskspace(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Diskspace>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3DiskspaceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Diskspace>>
>;
export type GetApiV3DiskspaceQueryError = ErrorType<unknown>;

export function useGetApiV3Diskspace<
  TData = Awaited<ReturnType<typeof getApiV3Diskspace>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Diskspace>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Diskspace>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Diskspace<
  TData = Awaited<ReturnType<typeof getApiV3Diskspace>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Diskspace>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Diskspace>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Diskspace<
  TData = Awaited<ReturnType<typeof getApiV3Diskspace>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Diskspace>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Diskspace<
  TData = Awaited<ReturnType<typeof getApiV3Diskspace>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Diskspace>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3DiskspaceQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Downloadclient = (signal?: AbortSignal) => {
  return apiInstance<DownloadClientResource[]>({
    url: `/api/v3/downloadclient`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3DownloadclientQueryKey = () => {
  return [`/api/v3/downloadclient`] as const;
};

export const getGetApiV3DownloadclientQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Downloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Downloadclient>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3DownloadclientQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Downloadclient>>
  > = ({ signal }) => getApiV3Downloadclient(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Downloadclient>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3DownloadclientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Downloadclient>>
>;
export type GetApiV3DownloadclientQueryError = ErrorType<unknown>;

export function useGetApiV3Downloadclient<
  TData = Awaited<ReturnType<typeof getApiV3Downloadclient>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Downloadclient>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Downloadclient>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Downloadclient<
  TData = Awaited<ReturnType<typeof getApiV3Downloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Downloadclient>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Downloadclient>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Downloadclient<
  TData = Awaited<ReturnType<typeof getApiV3Downloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Downloadclient>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Downloadclient<
  TData = Awaited<ReturnType<typeof getApiV3Downloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Downloadclient>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3DownloadclientQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Downloadclient = (
  downloadClientResource: DownloadClientResource,
  params?: PostApiV3DownloadclientParams
) => {
  return apiInstance<DownloadClientResource>({
    url: `/api/v3/downloadclient`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: downloadClientResource,
    params,
  });
};

export const getPostApiV3DownloadclientMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Downloadclient>>,
    TError,
    { data: DownloadClientResource; params?: PostApiV3DownloadclientParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Downloadclient>>,
  TError,
  { data: DownloadClientResource; params?: PostApiV3DownloadclientParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Downloadclient>>,
    { data: DownloadClientResource; params?: PostApiV3DownloadclientParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV3Downloadclient(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3DownloadclientMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Downloadclient>>
>;
export type PostApiV3DownloadclientMutationBody = DownloadClientResource;
export type PostApiV3DownloadclientMutationError = ErrorType<unknown>;

export const usePostApiV3Downloadclient = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Downloadclient>>,
    TError,
    { data: DownloadClientResource; params?: PostApiV3DownloadclientParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Downloadclient>>,
  TError,
  { data: DownloadClientResource; params?: PostApiV3DownloadclientParams },
  TContext
> => {
  const mutationOptions = getPostApiV3DownloadclientMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3DownloadclientId = (
  id: string,
  downloadClientResource: DownloadClientResource,
  params?: PutApiV3DownloadclientIdParams
) => {
  return apiInstance<DownloadClientResource>({
    url: `/api/v3/downloadclient/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: downloadClientResource,
    params,
  });
};

export const getPutApiV3DownloadclientIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3DownloadclientId>>,
    TError,
    {
      id: string;
      data: DownloadClientResource;
      params?: PutApiV3DownloadclientIdParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3DownloadclientId>>,
  TError,
  {
    id: string;
    data: DownloadClientResource;
    params?: PutApiV3DownloadclientIdParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3DownloadclientId>>,
    {
      id: string;
      data: DownloadClientResource;
      params?: PutApiV3DownloadclientIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV3DownloadclientId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3DownloadclientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3DownloadclientId>>
>;
export type PutApiV3DownloadclientIdMutationBody = DownloadClientResource;
export type PutApiV3DownloadclientIdMutationError = ErrorType<unknown>;

export const usePutApiV3DownloadclientId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3DownloadclientId>>,
    TError,
    {
      id: string;
      data: DownloadClientResource;
      params?: PutApiV3DownloadclientIdParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3DownloadclientId>>,
  TError,
  {
    id: string;
    data: DownloadClientResource;
    params?: PutApiV3DownloadclientIdParams;
  },
  TContext
> => {
  const mutationOptions = getPutApiV3DownloadclientIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3DownloadclientId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/downloadclient/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3DownloadclientIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3DownloadclientId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3DownloadclientId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3DownloadclientId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3DownloadclientId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3DownloadclientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3DownloadclientId>>
>;

export type DeleteApiV3DownloadclientIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3DownloadclientId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3DownloadclientId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3DownloadclientId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV3DownloadclientIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3DownloadclientId = (id: number, signal?: AbortSignal) => {
  return apiInstance<DownloadClientResource>({
    url: `/api/v3/downloadclient/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3DownloadclientIdQueryKey = (id: number) => {
  return [`/api/v3/downloadclient/${id}`] as const;
};

export const getGetApiV3DownloadclientIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3DownloadclientIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3DownloadclientId>>
  > = ({ signal }) => getApiV3DownloadclientId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3DownloadclientIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3DownloadclientId>>
>;
export type GetApiV3DownloadclientIdQueryError = ErrorType<unknown>;

export function useGetApiV3DownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3DownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3DownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3DownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3DownloadclientIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3DownloadclientBulk = (
  downloadClientBulkResource: DownloadClientBulkResource
) => {
  return apiInstance<DownloadClientResource>({
    url: `/api/v3/downloadclient/bulk`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: downloadClientBulkResource,
  });
};

export const getPutApiV3DownloadclientBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3DownloadclientBulk>>,
  TError,
  { data: DownloadClientBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3DownloadclientBulk>>,
    { data: DownloadClientBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3DownloadclientBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3DownloadclientBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3DownloadclientBulk>>
>;
export type PutApiV3DownloadclientBulkMutationBody = DownloadClientBulkResource;
export type PutApiV3DownloadclientBulkMutationError = ErrorType<unknown>;

export const usePutApiV3DownloadclientBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3DownloadclientBulk>>,
  TError,
  { data: DownloadClientBulkResource },
  TContext
> => {
  const mutationOptions = getPutApiV3DownloadclientBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3DownloadclientBulk = (
  downloadClientBulkResource: DownloadClientBulkResource
) => {
  return apiInstance<void>({
    url: `/api/v3/downloadclient/bulk`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: downloadClientBulkResource,
  });
};

export const getDeleteApiV3DownloadclientBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3DownloadclientBulk>>,
  TError,
  { data: DownloadClientBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3DownloadclientBulk>>,
    { data: DownloadClientBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3DownloadclientBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3DownloadclientBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3DownloadclientBulk>>
>;
export type DeleteApiV3DownloadclientBulkMutationBody =
  DownloadClientBulkResource;
export type DeleteApiV3DownloadclientBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3DownloadclientBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3DownloadclientBulk>>,
  TError,
  { data: DownloadClientBulkResource },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV3DownloadclientBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3DownloadclientSchema = (signal?: AbortSignal) => {
  return apiInstance<DownloadClientResource[]>({
    url: `/api/v3/downloadclient/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3DownloadclientSchemaQueryKey = () => {
  return [`/api/v3/downloadclient/schema`] as const;
};

export const getGetApiV3DownloadclientSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3DownloadclientSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>
  > = ({ signal }) => getApiV3DownloadclientSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3DownloadclientSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>
>;
export type GetApiV3DownloadclientSchemaQueryError = ErrorType<unknown>;

export function useGetApiV3DownloadclientSchema<
  TData = Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3DownloadclientSchema<
  TData = Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3DownloadclientSchema<
  TData = Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3DownloadclientSchema<
  TData = Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3DownloadclientSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3DownloadclientTest = (
  downloadClientResource: DownloadClientResource
) => {
  return apiInstance<void>({
    url: `/api/v3/downloadclient/test`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: downloadClientResource,
  });
};

export const getPostApiV3DownloadclientTestMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3DownloadclientTest>>,
    TError,
    { data: DownloadClientResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3DownloadclientTest>>,
  TError,
  { data: DownloadClientResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3DownloadclientTest>>,
    { data: DownloadClientResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3DownloadclientTest(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3DownloadclientTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3DownloadclientTest>>
>;
export type PostApiV3DownloadclientTestMutationBody = DownloadClientResource;
export type PostApiV3DownloadclientTestMutationError = ErrorType<unknown>;

export const usePostApiV3DownloadclientTest = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3DownloadclientTest>>,
    TError,
    { data: DownloadClientResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3DownloadclientTest>>,
  TError,
  { data: DownloadClientResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV3DownloadclientTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3DownloadclientTestall = () => {
  return apiInstance<void>({
    url: `/api/v3/downloadclient/testall`,
    method: "POST",
  });
};

export const getPostApiV3DownloadclientTestallMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3DownloadclientTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3DownloadclientTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3DownloadclientTestall>>,
    void
  > = () => {
    return postApiV3DownloadclientTestall();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3DownloadclientTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3DownloadclientTestall>>
>;

export type PostApiV3DownloadclientTestallMutationError = ErrorType<unknown>;

export const usePostApiV3DownloadclientTestall = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3DownloadclientTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3DownloadclientTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPostApiV3DownloadclientTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3DownloadclientActionName = (
  name: string,
  downloadClientResource: DownloadClientResource
) => {
  return apiInstance<void>({
    url: `/api/v3/downloadclient/action/${name}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: downloadClientResource,
  });
};

export const getPostApiV3DownloadclientActionNameMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3DownloadclientActionName>>,
    TError,
    { name: string; data: DownloadClientResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3DownloadclientActionName>>,
  TError,
  { name: string; data: DownloadClientResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3DownloadclientActionName>>,
    { name: string; data: DownloadClientResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV3DownloadclientActionName(name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3DownloadclientActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3DownloadclientActionName>>
>;
export type PostApiV3DownloadclientActionNameMutationBody =
  DownloadClientResource;
export type PostApiV3DownloadclientActionNameMutationError = ErrorType<unknown>;

export const usePostApiV3DownloadclientActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3DownloadclientActionName>>,
    TError,
    { name: string; data: DownloadClientResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3DownloadclientActionName>>,
  TError,
  { name: string; data: DownloadClientResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV3DownloadclientActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ConfigDownloadclient = (signal?: AbortSignal) => {
  return apiInstance<DownloadClientConfigResource>({
    url: `/api/v3/config/downloadclient`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigDownloadclientQueryKey = () => {
  return [`/api/v3/config/downloadclient`] as const;
};

export const getGetApiV3ConfigDownloadclientQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigDownloadclientQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>
  > = ({ signal }) => getApiV3ConfigDownloadclient(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigDownloadclientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>
>;
export type GetApiV3ConfigDownloadclientQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigDownloadclient<
  TData = Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigDownloadclient<
  TData = Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigDownloadclient<
  TData = Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigDownloadclient<
  TData = Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigDownloadclientQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3ConfigDownloadclientId = (
  id: string,
  downloadClientConfigResource: DownloadClientConfigResource
) => {
  return apiInstance<DownloadClientConfigResource>({
    url: `/api/v3/config/downloadclient/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: downloadClientConfigResource,
  });
};

export const getPutApiV3ConfigDownloadclientIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigDownloadclientId>>,
    TError,
    { id: string; data: DownloadClientConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3ConfigDownloadclientId>>,
  TError,
  { id: string; data: DownloadClientConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigDownloadclientId>>,
    { id: string; data: DownloadClientConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigDownloadclientId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3ConfigDownloadclientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigDownloadclientId>>
>;
export type PutApiV3ConfigDownloadclientIdMutationBody =
  DownloadClientConfigResource;
export type PutApiV3ConfigDownloadclientIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigDownloadclientId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigDownloadclientId>>,
    TError,
    { id: string; data: DownloadClientConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3ConfigDownloadclientId>>,
  TError,
  { id: string; data: DownloadClientConfigResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV3ConfigDownloadclientIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ConfigDownloadclientId = (
  id: number,
  signal?: AbortSignal
) => {
  return apiInstance<DownloadClientConfigResource>({
    url: `/api/v3/config/downloadclient/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigDownloadclientIdQueryKey = (id: number) => {
  return [`/api/v3/config/downloadclient/${id}`] as const;
};

export const getGetApiV3ConfigDownloadclientIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigDownloadclientIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>
  > = ({ signal }) => getApiV3ConfigDownloadclientId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigDownloadclientIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>
>;
export type GetApiV3ConfigDownloadclientIdQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigDownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigDownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigDownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigDownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigDownloadclientIdQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Extrafile = (
  params?: GetApiV3ExtrafileParams,
  signal?: AbortSignal
) => {
  return apiInstance<ExtraFileResource[]>({
    url: `/api/v3/extrafile`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3ExtrafileQueryKey = (
  params?: GetApiV3ExtrafileParams
) => {
  return [`/api/v3/extrafile`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3ExtrafileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Extrafile>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ExtrafileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Extrafile>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ExtrafileQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Extrafile>>
  > = ({ signal }) => getApiV3Extrafile(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Extrafile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ExtrafileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Extrafile>>
>;
export type GetApiV3ExtrafileQueryError = ErrorType<unknown>;

export function useGetApiV3Extrafile<
  TData = Awaited<ReturnType<typeof getApiV3Extrafile>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3ExtrafileParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Extrafile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Extrafile>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Extrafile<
  TData = Awaited<ReturnType<typeof getApiV3Extrafile>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ExtrafileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Extrafile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Extrafile>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Extrafile<
  TData = Awaited<ReturnType<typeof getApiV3Extrafile>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ExtrafileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Extrafile>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Extrafile<
  TData = Awaited<ReturnType<typeof getApiV3Extrafile>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ExtrafileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Extrafile>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ExtrafileQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Filesystem = (
  params?: GetApiV3FilesystemParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v3/filesystem`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3FilesystemQueryKey = (
  params?: GetApiV3FilesystemParams
) => {
  return [`/api/v3/filesystem`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3FilesystemQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Filesystem>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3FilesystemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Filesystem>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3FilesystemQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Filesystem>>
  > = ({ signal }) => getApiV3Filesystem(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Filesystem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3FilesystemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Filesystem>>
>;
export type GetApiV3FilesystemQueryError = ErrorType<unknown>;

export function useGetApiV3Filesystem<
  TData = Awaited<ReturnType<typeof getApiV3Filesystem>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3FilesystemParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Filesystem>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Filesystem>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Filesystem<
  TData = Awaited<ReturnType<typeof getApiV3Filesystem>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3FilesystemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Filesystem>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Filesystem>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Filesystem<
  TData = Awaited<ReturnType<typeof getApiV3Filesystem>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3FilesystemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Filesystem>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Filesystem<
  TData = Awaited<ReturnType<typeof getApiV3Filesystem>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3FilesystemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Filesystem>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3FilesystemQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3FilesystemType = (
  params?: GetApiV3FilesystemTypeParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v3/filesystem/type`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3FilesystemTypeQueryKey = (
  params?: GetApiV3FilesystemTypeParams
) => {
  return [`/api/v3/filesystem/type`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3FilesystemTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3FilesystemType>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3FilesystemTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3FilesystemType>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3FilesystemTypeQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3FilesystemType>>
  > = ({ signal }) => getApiV3FilesystemType(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3FilesystemType>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3FilesystemTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3FilesystemType>>
>;
export type GetApiV3FilesystemTypeQueryError = ErrorType<unknown>;

export function useGetApiV3FilesystemType<
  TData = Awaited<ReturnType<typeof getApiV3FilesystemType>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3FilesystemTypeParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3FilesystemType>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3FilesystemType>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3FilesystemType<
  TData = Awaited<ReturnType<typeof getApiV3FilesystemType>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3FilesystemTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3FilesystemType>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3FilesystemType>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3FilesystemType<
  TData = Awaited<ReturnType<typeof getApiV3FilesystemType>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3FilesystemTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3FilesystemType>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3FilesystemType<
  TData = Awaited<ReturnType<typeof getApiV3FilesystemType>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3FilesystemTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3FilesystemType>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3FilesystemTypeQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3FilesystemMediafiles = (
  params?: GetApiV3FilesystemMediafilesParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v3/filesystem/mediafiles`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3FilesystemMediafilesQueryKey = (
  params?: GetApiV3FilesystemMediafilesParams
) => {
  return [
    `/api/v3/filesystem/mediafiles`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV3FilesystemMediafilesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3FilesystemMediafilesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3FilesystemMediafilesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>
  > = ({ signal }) => getApiV3FilesystemMediafiles(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3FilesystemMediafilesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>
>;
export type GetApiV3FilesystemMediafilesQueryError = ErrorType<unknown>;

export function useGetApiV3FilesystemMediafiles<
  TData = Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3FilesystemMediafilesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3FilesystemMediafiles<
  TData = Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3FilesystemMediafilesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3FilesystemMediafiles<
  TData = Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3FilesystemMediafilesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3FilesystemMediafiles<
  TData = Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3FilesystemMediafilesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3FilesystemMediafilesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Health = (signal?: AbortSignal) => {
  return apiInstance<HealthResource[]>({
    url: `/api/v3/health`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3HealthQueryKey = () => {
  return [`/api/v3/health`] as const;
};

export const getGetApiV3HealthQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Health>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Health>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3HealthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Health>>> = ({
    signal,
  }) => getApiV3Health(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Health>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3HealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Health>>
>;
export type GetApiV3HealthQueryError = ErrorType<unknown>;

export function useGetApiV3Health<
  TData = Awaited<ReturnType<typeof getApiV3Health>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Health>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Health>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Health<
  TData = Awaited<ReturnType<typeof getApiV3Health>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Health>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Health>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Health<
  TData = Awaited<ReturnType<typeof getApiV3Health>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Health>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Health<
  TData = Awaited<ReturnType<typeof getApiV3Health>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Health>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3HealthQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3HealthId = (id: number, signal?: AbortSignal) => {
  return apiInstance<HealthResource>({
    url: `/api/v3/health/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3HealthIdQueryKey = (id: number) => {
  return [`/api/v3/health/${id}`] as const;
};

export const getGetApiV3HealthIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3HealthId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HealthId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3HealthIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3HealthId>>
  > = ({ signal }) => getApiV3HealthId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3HealthId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3HealthIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3HealthId>>
>;
export type GetApiV3HealthIdQueryError = ErrorType<unknown>;

export function useGetApiV3HealthId<
  TData = Awaited<ReturnType<typeof getApiV3HealthId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HealthId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3HealthId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3HealthId<
  TData = Awaited<ReturnType<typeof getApiV3HealthId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HealthId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3HealthId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3HealthId<
  TData = Awaited<ReturnType<typeof getApiV3HealthId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HealthId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3HealthId<
  TData = Awaited<ReturnType<typeof getApiV3HealthId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HealthId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3HealthIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3History = (
  params?: GetApiV3HistoryParams,
  signal?: AbortSignal
) => {
  return apiInstance<HistoryResourcePagingResource>({
    url: `/api/v3/history`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3HistoryQueryKey = (params?: GetApiV3HistoryParams) => {
  return [`/api/v3/history`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3HistoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3History>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3HistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3History>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3HistoryQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3History>>> = ({
    signal,
  }) => getApiV3History(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3History>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3HistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3History>>
>;
export type GetApiV3HistoryQueryError = ErrorType<unknown>;

export function useGetApiV3History<
  TData = Awaited<ReturnType<typeof getApiV3History>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3HistoryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3History>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3History>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3History<
  TData = Awaited<ReturnType<typeof getApiV3History>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3HistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3History>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3History>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3History<
  TData = Awaited<ReturnType<typeof getApiV3History>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3HistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3History>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3History<
  TData = Awaited<ReturnType<typeof getApiV3History>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3HistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3History>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3HistoryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3HistorySince = (
  params?: GetApiV3HistorySinceParams,
  signal?: AbortSignal
) => {
  return apiInstance<HistoryResource[]>({
    url: `/api/v3/history/since`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3HistorySinceQueryKey = (
  params?: GetApiV3HistorySinceParams
) => {
  return [`/api/v3/history/since`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3HistorySinceQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3HistorySince>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3HistorySinceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HistorySince>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3HistorySinceQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3HistorySince>>
  > = ({ signal }) => getApiV3HistorySince(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3HistorySince>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3HistorySinceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3HistorySince>>
>;
export type GetApiV3HistorySinceQueryError = ErrorType<unknown>;

export function useGetApiV3HistorySince<
  TData = Awaited<ReturnType<typeof getApiV3HistorySince>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3HistorySinceParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HistorySince>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3HistorySince>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3HistorySince<
  TData = Awaited<ReturnType<typeof getApiV3HistorySince>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3HistorySinceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HistorySince>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3HistorySince>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3HistorySince<
  TData = Awaited<ReturnType<typeof getApiV3HistorySince>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3HistorySinceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HistorySince>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3HistorySince<
  TData = Awaited<ReturnType<typeof getApiV3HistorySince>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3HistorySinceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HistorySince>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3HistorySinceQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3HistoryMovie = (
  params?: GetApiV3HistoryMovieParams,
  signal?: AbortSignal
) => {
  return apiInstance<HistoryResource[]>({
    url: `/api/v3/history/movie`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3HistoryMovieQueryKey = (
  params?: GetApiV3HistoryMovieParams
) => {
  return [`/api/v3/history/movie`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3HistoryMovieQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3HistoryMovie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3HistoryMovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HistoryMovie>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3HistoryMovieQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3HistoryMovie>>
  > = ({ signal }) => getApiV3HistoryMovie(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3HistoryMovie>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3HistoryMovieQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3HistoryMovie>>
>;
export type GetApiV3HistoryMovieQueryError = ErrorType<unknown>;

export function useGetApiV3HistoryMovie<
  TData = Awaited<ReturnType<typeof getApiV3HistoryMovie>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3HistoryMovieParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HistoryMovie>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3HistoryMovie>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3HistoryMovie<
  TData = Awaited<ReturnType<typeof getApiV3HistoryMovie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3HistoryMovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HistoryMovie>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3HistoryMovie>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3HistoryMovie<
  TData = Awaited<ReturnType<typeof getApiV3HistoryMovie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3HistoryMovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HistoryMovie>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3HistoryMovie<
  TData = Awaited<ReturnType<typeof getApiV3HistoryMovie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3HistoryMovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3HistoryMovie>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3HistoryMovieQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3HistoryFailedId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/history/failed/${id}`,
    method: "POST",
  });
};

export const getPostApiV3HistoryFailedIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3HistoryFailedId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3HistoryFailedId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3HistoryFailedId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postApiV3HistoryFailedId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3HistoryFailedIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3HistoryFailedId>>
>;

export type PostApiV3HistoryFailedIdMutationError = ErrorType<unknown>;

export const usePostApiV3HistoryFailedId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3HistoryFailedId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3HistoryFailedId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPostApiV3HistoryFailedIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ConfigHost = (signal?: AbortSignal) => {
  return apiInstance<HostConfigResource>({
    url: `/api/v3/config/host`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigHostQueryKey = () => {
  return [`/api/v3/config/host`] as const;
};

export const getGetApiV3ConfigHostQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigHost>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigHost>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ConfigHostQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigHost>>
  > = ({ signal }) => getApiV3ConfigHost(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigHost>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigHostQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigHost>>
>;
export type GetApiV3ConfigHostQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigHost<
  TData = Awaited<ReturnType<typeof getApiV3ConfigHost>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigHost>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigHost>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigHost<
  TData = Awaited<ReturnType<typeof getApiV3ConfigHost>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigHost>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigHost>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigHost<
  TData = Awaited<ReturnType<typeof getApiV3ConfigHost>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigHost>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigHost<
  TData = Awaited<ReturnType<typeof getApiV3ConfigHost>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigHost>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigHostQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3ConfigHostId = (
  id: string,
  hostConfigResource: HostConfigResource
) => {
  return apiInstance<HostConfigResource>({
    url: `/api/v3/config/host/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: hostConfigResource,
  });
};

export const getPutApiV3ConfigHostIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigHostId>>,
    TError,
    { id: string; data: HostConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3ConfigHostId>>,
  TError,
  { id: string; data: HostConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigHostId>>,
    { id: string; data: HostConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigHostId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3ConfigHostIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigHostId>>
>;
export type PutApiV3ConfigHostIdMutationBody = HostConfigResource;
export type PutApiV3ConfigHostIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigHostId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigHostId>>,
    TError,
    { id: string; data: HostConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3ConfigHostId>>,
  TError,
  { id: string; data: HostConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV3ConfigHostIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ConfigHostId = (id: number, signal?: AbortSignal) => {
  return apiInstance<HostConfigResource>({
    url: `/api/v3/config/host/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigHostIdQueryKey = (id: number) => {
  return [`/api/v3/config/host/${id}`] as const;
};

export const getGetApiV3ConfigHostIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigHostIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigHostId>>
  > = ({ signal }) => getApiV3ConfigHostId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigHostIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigHostId>>
>;
export type GetApiV3ConfigHostIdQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigHostId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigHostId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigHostId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigHostId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigHostIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Exclusions = (signal?: AbortSignal) => {
  return apiInstance<ImportExclusionsResource[]>({
    url: `/api/v3/exclusions`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ExclusionsQueryKey = () => {
  return [`/api/v3/exclusions`] as const;
};

export const getGetApiV3ExclusionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Exclusions>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Exclusions>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ExclusionsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Exclusions>>
  > = ({ signal }) => getApiV3Exclusions(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Exclusions>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ExclusionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Exclusions>>
>;
export type GetApiV3ExclusionsQueryError = ErrorType<unknown>;

export function useGetApiV3Exclusions<
  TData = Awaited<ReturnType<typeof getApiV3Exclusions>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Exclusions>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Exclusions>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Exclusions<
  TData = Awaited<ReturnType<typeof getApiV3Exclusions>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Exclusions>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Exclusions>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Exclusions<
  TData = Awaited<ReturnType<typeof getApiV3Exclusions>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Exclusions>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Exclusions<
  TData = Awaited<ReturnType<typeof getApiV3Exclusions>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Exclusions>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ExclusionsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Exclusions = (
  importExclusionsResource: ImportExclusionsResource
) => {
  return apiInstance<ImportExclusionsResource>({
    url: `/api/v3/exclusions`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: importExclusionsResource,
  });
};

export const getPostApiV3ExclusionsMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Exclusions>>,
    TError,
    { data: ImportExclusionsResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Exclusions>>,
  TError,
  { data: ImportExclusionsResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Exclusions>>,
    { data: ImportExclusionsResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Exclusions(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3ExclusionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Exclusions>>
>;
export type PostApiV3ExclusionsMutationBody = ImportExclusionsResource;
export type PostApiV3ExclusionsMutationError = ErrorType<unknown>;

export const usePostApiV3Exclusions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Exclusions>>,
    TError,
    { data: ImportExclusionsResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Exclusions>>,
  TError,
  { data: ImportExclusionsResource },
  TContext
> => {
  const mutationOptions = getPostApiV3ExclusionsMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3ExclusionsId = (
  id: string,
  importExclusionsResource: ImportExclusionsResource
) => {
  return apiInstance<ImportExclusionsResource>({
    url: `/api/v3/exclusions/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: importExclusionsResource,
  });
};

export const getPutApiV3ExclusionsIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ExclusionsId>>,
    TError,
    { id: string; data: ImportExclusionsResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3ExclusionsId>>,
  TError,
  { id: string; data: ImportExclusionsResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ExclusionsId>>,
    { id: string; data: ImportExclusionsResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ExclusionsId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3ExclusionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ExclusionsId>>
>;
export type PutApiV3ExclusionsIdMutationBody = ImportExclusionsResource;
export type PutApiV3ExclusionsIdMutationError = ErrorType<unknown>;

export const usePutApiV3ExclusionsId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ExclusionsId>>,
    TError,
    { id: string; data: ImportExclusionsResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3ExclusionsId>>,
  TError,
  { id: string; data: ImportExclusionsResource },
  TContext
> => {
  const mutationOptions = getPutApiV3ExclusionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3ExclusionsId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/exclusions/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3ExclusionsIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3ExclusionsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3ExclusionsId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3ExclusionsId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3ExclusionsId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3ExclusionsIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3ExclusionsId>>
>;

export type DeleteApiV3ExclusionsIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3ExclusionsId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3ExclusionsId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3ExclusionsId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3ExclusionsIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ExclusionsId = (id: number, signal?: AbortSignal) => {
  return apiInstance<ImportExclusionsResource>({
    url: `/api/v3/exclusions/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ExclusionsIdQueryKey = (id: number) => {
  return [`/api/v3/exclusions/${id}`] as const;
};

export const getGetApiV3ExclusionsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ExclusionsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ExclusionsId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ExclusionsIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ExclusionsId>>
  > = ({ signal }) => getApiV3ExclusionsId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ExclusionsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ExclusionsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ExclusionsId>>
>;
export type GetApiV3ExclusionsIdQueryError = ErrorType<unknown>;

export function useGetApiV3ExclusionsId<
  TData = Awaited<ReturnType<typeof getApiV3ExclusionsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ExclusionsId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ExclusionsId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ExclusionsId<
  TData = Awaited<ReturnType<typeof getApiV3ExclusionsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ExclusionsId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ExclusionsId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ExclusionsId<
  TData = Awaited<ReturnType<typeof getApiV3ExclusionsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ExclusionsId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ExclusionsId<
  TData = Awaited<ReturnType<typeof getApiV3ExclusionsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ExclusionsId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ExclusionsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3ExclusionsBulk = (
  importExclusionsResource: ImportExclusionsResource[]
) => {
  return apiInstance<void>({
    url: `/api/v3/exclusions/bulk`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: importExclusionsResource,
  });
};

export const getPostApiV3ExclusionsBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ExclusionsBulk>>,
    TError,
    { data: ImportExclusionsResource[] },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3ExclusionsBulk>>,
  TError,
  { data: ImportExclusionsResource[] },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3ExclusionsBulk>>,
    { data: ImportExclusionsResource[] }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3ExclusionsBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3ExclusionsBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3ExclusionsBulk>>
>;
export type PostApiV3ExclusionsBulkMutationBody = ImportExclusionsResource[];
export type PostApiV3ExclusionsBulkMutationError = ErrorType<unknown>;

export const usePostApiV3ExclusionsBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ExclusionsBulk>>,
    TError,
    { data: ImportExclusionsResource[] },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3ExclusionsBulk>>,
  TError,
  { data: ImportExclusionsResource[] },
  TContext
> => {
  const mutationOptions = getPostApiV3ExclusionsBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Importlist = (signal?: AbortSignal) => {
  return apiInstance<ImportListResource[]>({
    url: `/api/v3/importlist`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ImportlistQueryKey = () => {
  return [`/api/v3/importlist`] as const;
};

export const getGetApiV3ImportlistQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Importlist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Importlist>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ImportlistQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Importlist>>
  > = ({ signal }) => getApiV3Importlist(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Importlist>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ImportlistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Importlist>>
>;
export type GetApiV3ImportlistQueryError = ErrorType<unknown>;

export function useGetApiV3Importlist<
  TData = Awaited<ReturnType<typeof getApiV3Importlist>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Importlist>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Importlist>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Importlist<
  TData = Awaited<ReturnType<typeof getApiV3Importlist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Importlist>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Importlist>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Importlist<
  TData = Awaited<ReturnType<typeof getApiV3Importlist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Importlist>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Importlist<
  TData = Awaited<ReturnType<typeof getApiV3Importlist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Importlist>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ImportlistQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Importlist = (
  importListResource: ImportListResource,
  params?: PostApiV3ImportlistParams
) => {
  return apiInstance<ImportListResource>({
    url: `/api/v3/importlist`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: importListResource,
    params,
  });
};

export const getPostApiV3ImportlistMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Importlist>>,
    TError,
    { data: ImportListResource; params?: PostApiV3ImportlistParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Importlist>>,
  TError,
  { data: ImportListResource; params?: PostApiV3ImportlistParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Importlist>>,
    { data: ImportListResource; params?: PostApiV3ImportlistParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV3Importlist(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3ImportlistMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Importlist>>
>;
export type PostApiV3ImportlistMutationBody = ImportListResource;
export type PostApiV3ImportlistMutationError = ErrorType<unknown>;

export const usePostApiV3Importlist = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Importlist>>,
    TError,
    { data: ImportListResource; params?: PostApiV3ImportlistParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Importlist>>,
  TError,
  { data: ImportListResource; params?: PostApiV3ImportlistParams },
  TContext
> => {
  const mutationOptions = getPostApiV3ImportlistMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3ImportlistId = (
  id: string,
  importListResource: ImportListResource,
  params?: PutApiV3ImportlistIdParams
) => {
  return apiInstance<ImportListResource>({
    url: `/api/v3/importlist/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: importListResource,
    params,
  });
};

export const getPutApiV3ImportlistIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ImportlistId>>,
    TError,
    {
      id: string;
      data: ImportListResource;
      params?: PutApiV3ImportlistIdParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3ImportlistId>>,
  TError,
  { id: string; data: ImportListResource; params?: PutApiV3ImportlistIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ImportlistId>>,
    {
      id: string;
      data: ImportListResource;
      params?: PutApiV3ImportlistIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV3ImportlistId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3ImportlistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ImportlistId>>
>;
export type PutApiV3ImportlistIdMutationBody = ImportListResource;
export type PutApiV3ImportlistIdMutationError = ErrorType<unknown>;

export const usePutApiV3ImportlistId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ImportlistId>>,
    TError,
    {
      id: string;
      data: ImportListResource;
      params?: PutApiV3ImportlistIdParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3ImportlistId>>,
  TError,
  { id: string; data: ImportListResource; params?: PutApiV3ImportlistIdParams },
  TContext
> => {
  const mutationOptions = getPutApiV3ImportlistIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3ImportlistId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/importlist/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3ImportlistIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3ImportlistId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3ImportlistId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3ImportlistId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3ImportlistId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3ImportlistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3ImportlistId>>
>;

export type DeleteApiV3ImportlistIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3ImportlistId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3ImportlistId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3ImportlistId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3ImportlistIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ImportlistId = (id: number, signal?: AbortSignal) => {
  return apiInstance<ImportListResource>({
    url: `/api/v3/importlist/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ImportlistIdQueryKey = (id: number) => {
  return [`/api/v3/importlist/${id}`] as const;
};

export const getGetApiV3ImportlistIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ImportlistId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ImportlistIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ImportlistId>>
  > = ({ signal }) => getApiV3ImportlistId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ImportlistId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ImportlistIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ImportlistId>>
>;
export type GetApiV3ImportlistIdQueryError = ErrorType<unknown>;

export function useGetApiV3ImportlistId<
  TData = Awaited<ReturnType<typeof getApiV3ImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ImportlistId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ImportlistId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ImportlistId<
  TData = Awaited<ReturnType<typeof getApiV3ImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ImportlistId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ImportlistId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ImportlistId<
  TData = Awaited<ReturnType<typeof getApiV3ImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ImportlistId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ImportlistId<
  TData = Awaited<ReturnType<typeof getApiV3ImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ImportlistId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ImportlistIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3ImportlistBulk = (
  importListBulkResource: ImportListBulkResource
) => {
  return apiInstance<ImportListResource>({
    url: `/api/v3/importlist/bulk`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: importListBulkResource,
  });
};

export const getPutApiV3ImportlistBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3ImportlistBulk>>,
  TError,
  { data: ImportListBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ImportlistBulk>>,
    { data: ImportListBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3ImportlistBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3ImportlistBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ImportlistBulk>>
>;
export type PutApiV3ImportlistBulkMutationBody = ImportListBulkResource;
export type PutApiV3ImportlistBulkMutationError = ErrorType<unknown>;

export const usePutApiV3ImportlistBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3ImportlistBulk>>,
  TError,
  { data: ImportListBulkResource },
  TContext
> => {
  const mutationOptions = getPutApiV3ImportlistBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3ImportlistBulk = (
  importListBulkResource: ImportListBulkResource
) => {
  return apiInstance<void>({
    url: `/api/v3/importlist/bulk`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: importListBulkResource,
  });
};

export const getDeleteApiV3ImportlistBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3ImportlistBulk>>,
  TError,
  { data: ImportListBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3ImportlistBulk>>,
    { data: ImportListBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3ImportlistBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3ImportlistBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3ImportlistBulk>>
>;
export type DeleteApiV3ImportlistBulkMutationBody = ImportListBulkResource;
export type DeleteApiV3ImportlistBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3ImportlistBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3ImportlistBulk>>,
  TError,
  { data: ImportListBulkResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV3ImportlistBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ImportlistSchema = (signal?: AbortSignal) => {
  return apiInstance<ImportListResource[]>({
    url: `/api/v3/importlist/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ImportlistSchemaQueryKey = () => {
  return [`/api/v3/importlist/schema`] as const;
};

export const getGetApiV3ImportlistSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ImportlistSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ImportlistSchema>>
  > = ({ signal }) => getApiV3ImportlistSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ImportlistSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ImportlistSchema>>
>;
export type GetApiV3ImportlistSchemaQueryError = ErrorType<unknown>;

export function useGetApiV3ImportlistSchema<
  TData = Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ImportlistSchema<
  TData = Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ImportlistSchema<
  TData = Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ImportlistSchema<
  TData = Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ImportlistSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3ImportlistTest = (
  importListResource: ImportListResource
) => {
  return apiInstance<void>({
    url: `/api/v3/importlist/test`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: importListResource,
  });
};

export const getPostApiV3ImportlistTestMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ImportlistTest>>,
    TError,
    { data: ImportListResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3ImportlistTest>>,
  TError,
  { data: ImportListResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3ImportlistTest>>,
    { data: ImportListResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3ImportlistTest(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3ImportlistTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3ImportlistTest>>
>;
export type PostApiV3ImportlistTestMutationBody = ImportListResource;
export type PostApiV3ImportlistTestMutationError = ErrorType<unknown>;

export const usePostApiV3ImportlistTest = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ImportlistTest>>,
    TError,
    { data: ImportListResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3ImportlistTest>>,
  TError,
  { data: ImportListResource },
  TContext
> => {
  const mutationOptions = getPostApiV3ImportlistTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3ImportlistTestall = () => {
  return apiInstance<void>({
    url: `/api/v3/importlist/testall`,
    method: "POST",
  });
};

export const getPostApiV3ImportlistTestallMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ImportlistTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3ImportlistTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3ImportlistTestall>>,
    void
  > = () => {
    return postApiV3ImportlistTestall();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3ImportlistTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3ImportlistTestall>>
>;

export type PostApiV3ImportlistTestallMutationError = ErrorType<unknown>;

export const usePostApiV3ImportlistTestall = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ImportlistTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3ImportlistTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV3ImportlistTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3ImportlistActionName = (
  name: string,
  importListResource: ImportListResource
) => {
  return apiInstance<void>({
    url: `/api/v3/importlist/action/${name}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: importListResource,
  });
};

export const getPostApiV3ImportlistActionNameMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ImportlistActionName>>,
    TError,
    { name: string; data: ImportListResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3ImportlistActionName>>,
  TError,
  { name: string; data: ImportListResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3ImportlistActionName>>,
    { name: string; data: ImportListResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV3ImportlistActionName(name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3ImportlistActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3ImportlistActionName>>
>;
export type PostApiV3ImportlistActionNameMutationBody = ImportListResource;
export type PostApiV3ImportlistActionNameMutationError = ErrorType<unknown>;

export const usePostApiV3ImportlistActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ImportlistActionName>>,
    TError,
    { name: string; data: ImportListResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3ImportlistActionName>>,
  TError,
  { name: string; data: ImportListResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV3ImportlistActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ConfigImportlist = (signal?: AbortSignal) => {
  return apiInstance<ImportListConfigResource>({
    url: `/api/v3/config/importlist`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigImportlistQueryKey = () => {
  return [`/api/v3/config/importlist`] as const;
};

export const getGetApiV3ConfigImportlistQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigImportlist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigImportlist>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigImportlistQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigImportlist>>
  > = ({ signal }) => getApiV3ConfigImportlist(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigImportlist>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigImportlistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigImportlist>>
>;
export type GetApiV3ConfigImportlistQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigImportlist<
  TData = Awaited<ReturnType<typeof getApiV3ConfigImportlist>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigImportlist>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigImportlist>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigImportlist<
  TData = Awaited<ReturnType<typeof getApiV3ConfigImportlist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigImportlist>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigImportlist>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigImportlist<
  TData = Awaited<ReturnType<typeof getApiV3ConfigImportlist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigImportlist>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigImportlist<
  TData = Awaited<ReturnType<typeof getApiV3ConfigImportlist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigImportlist>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigImportlistQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3ConfigImportlistId = (
  id: string,
  importListConfigResource: ImportListConfigResource
) => {
  return apiInstance<ImportListConfigResource>({
    url: `/api/v3/config/importlist/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: importListConfigResource,
  });
};

export const getPutApiV3ConfigImportlistIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigImportlistId>>,
    TError,
    { id: string; data: ImportListConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3ConfigImportlistId>>,
  TError,
  { id: string; data: ImportListConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigImportlistId>>,
    { id: string; data: ImportListConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigImportlistId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3ConfigImportlistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigImportlistId>>
>;
export type PutApiV3ConfigImportlistIdMutationBody = ImportListConfigResource;
export type PutApiV3ConfigImportlistIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigImportlistId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigImportlistId>>,
    TError,
    { id: string; data: ImportListConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3ConfigImportlistId>>,
  TError,
  { id: string; data: ImportListConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV3ConfigImportlistIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ConfigImportlistId = (
  id: number,
  signal?: AbortSignal
) => {
  return apiInstance<ImportListConfigResource>({
    url: `/api/v3/config/importlist/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigImportlistIdQueryKey = (id: number) => {
  return [`/api/v3/config/importlist/${id}`] as const;
};

export const getGetApiV3ConfigImportlistIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigImportlistIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>
  > = ({ signal }) => getApiV3ConfigImportlistId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigImportlistIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>
>;
export type GetApiV3ConfigImportlistIdQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigImportlistId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigImportlistId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigImportlistId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigImportlistId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigImportlistId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigImportlistIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3ImportlistMovie = (
  params?: GetApiV3ImportlistMovieParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v3/importlist/movie`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3ImportlistMovieQueryKey = (
  params?: GetApiV3ImportlistMovieParams
) => {
  return [`/api/v3/importlist/movie`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3ImportlistMovieQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ImportlistMovie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ImportlistMovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ImportlistMovie>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ImportlistMovieQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ImportlistMovie>>
  > = ({ signal }) => getApiV3ImportlistMovie(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ImportlistMovie>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ImportlistMovieQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ImportlistMovie>>
>;
export type GetApiV3ImportlistMovieQueryError = ErrorType<unknown>;

export function useGetApiV3ImportlistMovie<
  TData = Awaited<ReturnType<typeof getApiV3ImportlistMovie>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3ImportlistMovieParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ImportlistMovie>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ImportlistMovie>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ImportlistMovie<
  TData = Awaited<ReturnType<typeof getApiV3ImportlistMovie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ImportlistMovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ImportlistMovie>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ImportlistMovie>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ImportlistMovie<
  TData = Awaited<ReturnType<typeof getApiV3ImportlistMovie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ImportlistMovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ImportlistMovie>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ImportlistMovie<
  TData = Awaited<ReturnType<typeof getApiV3ImportlistMovie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ImportlistMovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ImportlistMovie>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ImportlistMovieQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3ImportlistMovie = (movieResource: MovieResource[]) => {
  return apiInstance<void>({
    url: `/api/v3/importlist/movie`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: movieResource,
  });
};

export const getPostApiV3ImportlistMovieMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ImportlistMovie>>,
    TError,
    { data: MovieResource[] },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3ImportlistMovie>>,
  TError,
  { data: MovieResource[] },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3ImportlistMovie>>,
    { data: MovieResource[] }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3ImportlistMovie(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3ImportlistMovieMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3ImportlistMovie>>
>;
export type PostApiV3ImportlistMovieMutationBody = MovieResource[];
export type PostApiV3ImportlistMovieMutationError = ErrorType<unknown>;

export const usePostApiV3ImportlistMovie = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ImportlistMovie>>,
    TError,
    { data: MovieResource[] },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3ImportlistMovie>>,
  TError,
  { data: MovieResource[] },
  TContext
> => {
  const mutationOptions = getPostApiV3ImportlistMovieMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Indexer = (signal?: AbortSignal) => {
  return apiInstance<IndexerResource[]>({
    url: `/api/v3/indexer`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3IndexerQueryKey = () => {
  return [`/api/v3/indexer`] as const;
};

export const getGetApiV3IndexerQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Indexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Indexer>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3IndexerQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Indexer>>> = ({
    signal,
  }) => getApiV3Indexer(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Indexer>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3IndexerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Indexer>>
>;
export type GetApiV3IndexerQueryError = ErrorType<unknown>;

export function useGetApiV3Indexer<
  TData = Awaited<ReturnType<typeof getApiV3Indexer>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Indexer>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Indexer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Indexer<
  TData = Awaited<ReturnType<typeof getApiV3Indexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Indexer>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Indexer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Indexer<
  TData = Awaited<ReturnType<typeof getApiV3Indexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Indexer>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Indexer<
  TData = Awaited<ReturnType<typeof getApiV3Indexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Indexer>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3IndexerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Indexer = (
  indexerResource: IndexerResource,
  params?: PostApiV3IndexerParams
) => {
  return apiInstance<IndexerResource>({
    url: `/api/v3/indexer`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: indexerResource,
    params,
  });
};

export const getPostApiV3IndexerMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Indexer>>,
    TError,
    { data: IndexerResource; params?: PostApiV3IndexerParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Indexer>>,
  TError,
  { data: IndexerResource; params?: PostApiV3IndexerParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Indexer>>,
    { data: IndexerResource; params?: PostApiV3IndexerParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV3Indexer(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3IndexerMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Indexer>>
>;
export type PostApiV3IndexerMutationBody = IndexerResource;
export type PostApiV3IndexerMutationError = ErrorType<unknown>;

export const usePostApiV3Indexer = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Indexer>>,
    TError,
    { data: IndexerResource; params?: PostApiV3IndexerParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Indexer>>,
  TError,
  { data: IndexerResource; params?: PostApiV3IndexerParams },
  TContext
> => {
  const mutationOptions = getPostApiV3IndexerMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3IndexerId = (
  id: string,
  indexerResource: IndexerResource,
  params?: PutApiV3IndexerIdParams
) => {
  return apiInstance<IndexerResource>({
    url: `/api/v3/indexer/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: indexerResource,
    params,
  });
};

export const getPutApiV3IndexerIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3IndexerId>>,
    TError,
    { id: string; data: IndexerResource; params?: PutApiV3IndexerIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3IndexerId>>,
  TError,
  { id: string; data: IndexerResource; params?: PutApiV3IndexerIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3IndexerId>>,
    { id: string; data: IndexerResource; params?: PutApiV3IndexerIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV3IndexerId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3IndexerIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3IndexerId>>
>;
export type PutApiV3IndexerIdMutationBody = IndexerResource;
export type PutApiV3IndexerIdMutationError = ErrorType<unknown>;

export const usePutApiV3IndexerId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3IndexerId>>,
    TError,
    { id: string; data: IndexerResource; params?: PutApiV3IndexerIdParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3IndexerId>>,
  TError,
  { id: string; data: IndexerResource; params?: PutApiV3IndexerIdParams },
  TContext
> => {
  const mutationOptions = getPutApiV3IndexerIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3IndexerId = (id: number) => {
  return apiInstance<void>({ url: `/api/v3/indexer/${id}`, method: "DELETE" });
};

export const getDeleteApiV3IndexerIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3IndexerId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3IndexerId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3IndexerId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3IndexerId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3IndexerIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3IndexerId>>
>;

export type DeleteApiV3IndexerIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3IndexerId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3IndexerId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3IndexerId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3IndexerIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3IndexerId = (id: number, signal?: AbortSignal) => {
  return apiInstance<IndexerResource>({
    url: `/api/v3/indexer/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3IndexerIdQueryKey = (id: number) => {
  return [`/api/v3/indexer/${id}`] as const;
};

export const getGetApiV3IndexerIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3IndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3IndexerId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3IndexerIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3IndexerId>>
  > = ({ signal }) => getApiV3IndexerId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3IndexerId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3IndexerIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3IndexerId>>
>;
export type GetApiV3IndexerIdQueryError = ErrorType<unknown>;

export function useGetApiV3IndexerId<
  TData = Awaited<ReturnType<typeof getApiV3IndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3IndexerId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3IndexerId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3IndexerId<
  TData = Awaited<ReturnType<typeof getApiV3IndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3IndexerId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3IndexerId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3IndexerId<
  TData = Awaited<ReturnType<typeof getApiV3IndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3IndexerId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3IndexerId<
  TData = Awaited<ReturnType<typeof getApiV3IndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3IndexerId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3IndexerIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3IndexerBulk = (
  indexerBulkResource: IndexerBulkResource
) => {
  return apiInstance<IndexerResource>({
    url: `/api/v3/indexer/bulk`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: indexerBulkResource,
  });
};

export const getPutApiV3IndexerBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3IndexerBulk>>,
  TError,
  { data: IndexerBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3IndexerBulk>>,
    { data: IndexerBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3IndexerBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3IndexerBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3IndexerBulk>>
>;
export type PutApiV3IndexerBulkMutationBody = IndexerBulkResource;
export type PutApiV3IndexerBulkMutationError = ErrorType<unknown>;

export const usePutApiV3IndexerBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3IndexerBulk>>,
  TError,
  { data: IndexerBulkResource },
  TContext
> => {
  const mutationOptions = getPutApiV3IndexerBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3IndexerBulk = (
  indexerBulkResource: IndexerBulkResource
) => {
  return apiInstance<void>({
    url: `/api/v3/indexer/bulk`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: indexerBulkResource,
  });
};

export const getDeleteApiV3IndexerBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3IndexerBulk>>,
  TError,
  { data: IndexerBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3IndexerBulk>>,
    { data: IndexerBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3IndexerBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3IndexerBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3IndexerBulk>>
>;
export type DeleteApiV3IndexerBulkMutationBody = IndexerBulkResource;
export type DeleteApiV3IndexerBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3IndexerBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3IndexerBulk>>,
  TError,
  { data: IndexerBulkResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV3IndexerBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3IndexerSchema = (signal?: AbortSignal) => {
  return apiInstance<IndexerResource[]>({
    url: `/api/v3/indexer/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3IndexerSchemaQueryKey = () => {
  return [`/api/v3/indexer/schema`] as const;
};

export const getGetApiV3IndexerSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3IndexerSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3IndexerSchema>>
  > = ({ signal }) => getApiV3IndexerSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3IndexerSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3IndexerSchema>>
>;
export type GetApiV3IndexerSchemaQueryError = ErrorType<unknown>;

export function useGetApiV3IndexerSchema<
  TData = Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3IndexerSchema<
  TData = Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3IndexerSchema<
  TData = Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3IndexerSchema<
  TData = Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3IndexerSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3IndexerTest = (indexerResource: IndexerResource) => {
  return apiInstance<void>({
    url: `/api/v3/indexer/test`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: indexerResource,
  });
};

export const getPostApiV3IndexerTestMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3IndexerTest>>,
    TError,
    { data: IndexerResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3IndexerTest>>,
  TError,
  { data: IndexerResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3IndexerTest>>,
    { data: IndexerResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3IndexerTest(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3IndexerTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3IndexerTest>>
>;
export type PostApiV3IndexerTestMutationBody = IndexerResource;
export type PostApiV3IndexerTestMutationError = ErrorType<unknown>;

export const usePostApiV3IndexerTest = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3IndexerTest>>,
    TError,
    { data: IndexerResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3IndexerTest>>,
  TError,
  { data: IndexerResource },
  TContext
> => {
  const mutationOptions = getPostApiV3IndexerTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3IndexerTestall = () => {
  return apiInstance<void>({ url: `/api/v3/indexer/testall`, method: "POST" });
};

export const getPostApiV3IndexerTestallMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3IndexerTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3IndexerTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3IndexerTestall>>,
    void
  > = () => {
    return postApiV3IndexerTestall();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3IndexerTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3IndexerTestall>>
>;

export type PostApiV3IndexerTestallMutationError = ErrorType<unknown>;

export const usePostApiV3IndexerTestall = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3IndexerTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3IndexerTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV3IndexerTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3IndexerActionName = (
  name: string,
  indexerResource: IndexerResource
) => {
  return apiInstance<void>({
    url: `/api/v3/indexer/action/${name}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: indexerResource,
  });
};

export const getPostApiV3IndexerActionNameMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3IndexerActionName>>,
    TError,
    { name: string; data: IndexerResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3IndexerActionName>>,
  TError,
  { name: string; data: IndexerResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3IndexerActionName>>,
    { name: string; data: IndexerResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV3IndexerActionName(name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3IndexerActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3IndexerActionName>>
>;
export type PostApiV3IndexerActionNameMutationBody = IndexerResource;
export type PostApiV3IndexerActionNameMutationError = ErrorType<unknown>;

export const usePostApiV3IndexerActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3IndexerActionName>>,
    TError,
    { name: string; data: IndexerResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3IndexerActionName>>,
  TError,
  { name: string; data: IndexerResource },
  TContext
> => {
  const mutationOptions = getPostApiV3IndexerActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ConfigIndexer = (signal?: AbortSignal) => {
  return apiInstance<IndexerConfigResource>({
    url: `/api/v3/config/indexer`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigIndexerQueryKey = () => {
  return [`/api/v3/config/indexer`] as const;
};

export const getGetApiV3ConfigIndexerQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ConfigIndexerQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigIndexer>>
  > = ({ signal }) => getApiV3ConfigIndexer(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigIndexerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigIndexer>>
>;
export type GetApiV3ConfigIndexerQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigIndexer<
  TData = Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigIndexer<
  TData = Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigIndexer<
  TData = Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigIndexer<
  TData = Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigIndexerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3ConfigIndexerId = (
  id: string,
  indexerConfigResource: IndexerConfigResource
) => {
  return apiInstance<IndexerConfigResource>({
    url: `/api/v3/config/indexer/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: indexerConfigResource,
  });
};

export const getPutApiV3ConfigIndexerIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigIndexerId>>,
    TError,
    { id: string; data: IndexerConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3ConfigIndexerId>>,
  TError,
  { id: string; data: IndexerConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigIndexerId>>,
    { id: string; data: IndexerConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigIndexerId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3ConfigIndexerIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigIndexerId>>
>;
export type PutApiV3ConfigIndexerIdMutationBody = IndexerConfigResource;
export type PutApiV3ConfigIndexerIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigIndexerId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigIndexerId>>,
    TError,
    { id: string; data: IndexerConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3ConfigIndexerId>>,
  TError,
  { id: string; data: IndexerConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV3ConfigIndexerIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ConfigIndexerId = (id: number, signal?: AbortSignal) => {
  return apiInstance<IndexerConfigResource>({
    url: `/api/v3/config/indexer/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigIndexerIdQueryKey = (id: number) => {
  return [`/api/v3/config/indexer/${id}`] as const;
};

export const getGetApiV3ConfigIndexerIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigIndexerIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>
  > = ({ signal }) => getApiV3ConfigIndexerId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigIndexerIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>
>;
export type GetApiV3ConfigIndexerIdQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigIndexerId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigIndexerId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigIndexerId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigIndexerId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigIndexerIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Indexerflag = (signal?: AbortSignal) => {
  return apiInstance<IndexerFlagResource[]>({
    url: `/api/v3/indexerflag`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3IndexerflagQueryKey = () => {
  return [`/api/v3/indexerflag`] as const;
};

export const getGetApiV3IndexerflagQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Indexerflag>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Indexerflag>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3IndexerflagQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Indexerflag>>
  > = ({ signal }) => getApiV3Indexerflag(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Indexerflag>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3IndexerflagQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Indexerflag>>
>;
export type GetApiV3IndexerflagQueryError = ErrorType<unknown>;

export function useGetApiV3Indexerflag<
  TData = Awaited<ReturnType<typeof getApiV3Indexerflag>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Indexerflag>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Indexerflag>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Indexerflag<
  TData = Awaited<ReturnType<typeof getApiV3Indexerflag>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Indexerflag>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Indexerflag>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Indexerflag<
  TData = Awaited<ReturnType<typeof getApiV3Indexerflag>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Indexerflag>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Indexerflag<
  TData = Awaited<ReturnType<typeof getApiV3Indexerflag>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Indexerflag>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3IndexerflagQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getInitializeJs = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/initialize.js`, method: "GET", signal });
};

export const getGetInitializeJsQueryKey = () => {
  return [`/initialize.js`] as const;
};

export const getGetInitializeJsQueryOptions = <
  TData = Awaited<ReturnType<typeof getInitializeJs>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getInitializeJs>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInitializeJsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInitializeJs>>> = ({
    signal,
  }) => getInitializeJs(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInitializeJs>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetInitializeJsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInitializeJs>>
>;
export type GetInitializeJsQueryError = ErrorType<unknown>;

export function useGetInitializeJs<
  TData = Awaited<ReturnType<typeof getInitializeJs>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getInitializeJs>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getInitializeJs>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetInitializeJs<
  TData = Awaited<ReturnType<typeof getInitializeJs>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getInitializeJs>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getInitializeJs>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetInitializeJs<
  TData = Awaited<ReturnType<typeof getInitializeJs>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getInitializeJs>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetInitializeJs<
  TData = Awaited<ReturnType<typeof getInitializeJs>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getInitializeJs>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetInitializeJsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Language = (signal?: AbortSignal) => {
  return apiInstance<LanguageResource[]>({
    url: `/api/v3/language`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3LanguageQueryKey = () => {
  return [`/api/v3/language`] as const;
};

export const getGetApiV3LanguageQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Language>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Language>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3LanguageQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Language>>
  > = ({ signal }) => getApiV3Language(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Language>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3LanguageQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Language>>
>;
export type GetApiV3LanguageQueryError = ErrorType<unknown>;

export function useGetApiV3Language<
  TData = Awaited<ReturnType<typeof getApiV3Language>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Language>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Language>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Language<
  TData = Awaited<ReturnType<typeof getApiV3Language>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Language>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Language>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Language<
  TData = Awaited<ReturnType<typeof getApiV3Language>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Language>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Language<
  TData = Awaited<ReturnType<typeof getApiV3Language>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Language>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3LanguageQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3LanguageId = (id: number, signal?: AbortSignal) => {
  return apiInstance<LanguageResource>({
    url: `/api/v3/language/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3LanguageIdQueryKey = (id: number) => {
  return [`/api/v3/language/${id}`] as const;
};

export const getGetApiV3LanguageIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3LanguageId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LanguageId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3LanguageIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3LanguageId>>
  > = ({ signal }) => getApiV3LanguageId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3LanguageId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3LanguageIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LanguageId>>
>;
export type GetApiV3LanguageIdQueryError = ErrorType<unknown>;

export function useGetApiV3LanguageId<
  TData = Awaited<ReturnType<typeof getApiV3LanguageId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LanguageId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3LanguageId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3LanguageId<
  TData = Awaited<ReturnType<typeof getApiV3LanguageId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LanguageId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3LanguageId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3LanguageId<
  TData = Awaited<ReturnType<typeof getApiV3LanguageId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LanguageId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3LanguageId<
  TData = Awaited<ReturnType<typeof getApiV3LanguageId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LanguageId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3LanguageIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Localization = (signal?: AbortSignal) => {
  return apiInstance<string>({
    url: `/api/v3/localization`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3LocalizationQueryKey = () => {
  return [`/api/v3/localization`] as const;
};

export const getGetApiV3LocalizationQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Localization>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Localization>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3LocalizationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Localization>>
  > = ({ signal }) => getApiV3Localization(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Localization>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3LocalizationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Localization>>
>;
export type GetApiV3LocalizationQueryError = ErrorType<unknown>;

export function useGetApiV3Localization<
  TData = Awaited<ReturnType<typeof getApiV3Localization>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Localization>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Localization>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Localization<
  TData = Awaited<ReturnType<typeof getApiV3Localization>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Localization>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Localization>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Localization<
  TData = Awaited<ReturnType<typeof getApiV3Localization>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Localization>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Localization<
  TData = Awaited<ReturnType<typeof getApiV3Localization>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Localization>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3LocalizationQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Log = (signal?: AbortSignal) => {
  return apiInstance<LogResourcePagingResource>({
    url: `/api/v3/log`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3LogQueryKey = () => {
  return [`/api/v3/log`] as const;
};

export const getGetApiV3LogQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Log>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Log>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3LogQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Log>>> = ({
    signal,
  }) => getApiV3Log(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Log>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3LogQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Log>>
>;
export type GetApiV3LogQueryError = ErrorType<unknown>;

export function useGetApiV3Log<
  TData = Awaited<ReturnType<typeof getApiV3Log>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Log>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Log>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Log<
  TData = Awaited<ReturnType<typeof getApiV3Log>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Log>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Log>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Log<
  TData = Awaited<ReturnType<typeof getApiV3Log>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Log>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Log<
  TData = Awaited<ReturnType<typeof getApiV3Log>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Log>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3LogQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3LogFile = (signal?: AbortSignal) => {
  return apiInstance<LogFileResource[]>({
    url: `/api/v3/log/file`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3LogFileQueryKey = () => {
  return [`/api/v3/log/file`] as const;
};

export const getGetApiV3LogFileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3LogFile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3LogFile>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3LogFileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3LogFile>>> = ({
    signal,
  }) => getApiV3LogFile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3LogFile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3LogFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LogFile>>
>;
export type GetApiV3LogFileQueryError = ErrorType<unknown>;

export function useGetApiV3LogFile<
  TData = Awaited<ReturnType<typeof getApiV3LogFile>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3LogFile>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3LogFile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3LogFile<
  TData = Awaited<ReturnType<typeof getApiV3LogFile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3LogFile>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3LogFile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3LogFile<
  TData = Awaited<ReturnType<typeof getApiV3LogFile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3LogFile>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3LogFile<
  TData = Awaited<ReturnType<typeof getApiV3LogFile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3LogFile>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3LogFileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3LogFileFilename = (
  filename: string,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v3/log/file/${filename}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3LogFileFilenameQueryKey = (filename: string) => {
  return [`/api/v3/log/file/${filename}`] as const;
};

export const getGetApiV3LogFileFilenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3LogFileFilenameQueryKey(filename);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3LogFileFilename>>
  > = ({ signal }) => getApiV3LogFileFilename(filename, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!filename,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3LogFileFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LogFileFilename>>
>;
export type GetApiV3LogFileFilenameQueryError = ErrorType<unknown>;

export function useGetApiV3LogFileFilename<
  TData = Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3LogFileFilename<
  TData = Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3LogFileFilename<
  TData = Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3LogFileFilename<
  TData = Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3LogFileFilenameQueryOptions(
    filename,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Manualimport = (
  params?: GetApiV3ManualimportParams,
  signal?: AbortSignal
) => {
  return apiInstance<ManualImportResource[]>({
    url: `/api/v3/manualimport`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3ManualimportQueryKey = (
  params?: GetApiV3ManualimportParams
) => {
  return [`/api/v3/manualimport`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3ManualimportQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Manualimport>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ManualimportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Manualimport>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ManualimportQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Manualimport>>
  > = ({ signal }) => getApiV3Manualimport(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Manualimport>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ManualimportQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Manualimport>>
>;
export type GetApiV3ManualimportQueryError = ErrorType<unknown>;

export function useGetApiV3Manualimport<
  TData = Awaited<ReturnType<typeof getApiV3Manualimport>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3ManualimportParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Manualimport>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Manualimport>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Manualimport<
  TData = Awaited<ReturnType<typeof getApiV3Manualimport>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ManualimportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Manualimport>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Manualimport>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Manualimport<
  TData = Awaited<ReturnType<typeof getApiV3Manualimport>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ManualimportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Manualimport>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Manualimport<
  TData = Awaited<ReturnType<typeof getApiV3Manualimport>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ManualimportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Manualimport>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ManualimportQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Manualimport = (
  manualImportReprocessResource: ManualImportReprocessResource[]
) => {
  return apiInstance<void>({
    url: `/api/v3/manualimport`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: manualImportReprocessResource,
  });
};

export const getPostApiV3ManualimportMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Manualimport>>,
    TError,
    { data: ManualImportReprocessResource[] },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Manualimport>>,
  TError,
  { data: ManualImportReprocessResource[] },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Manualimport>>,
    { data: ManualImportReprocessResource[] }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Manualimport(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3ManualimportMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Manualimport>>
>;
export type PostApiV3ManualimportMutationBody = ManualImportReprocessResource[];
export type PostApiV3ManualimportMutationError = ErrorType<unknown>;

export const usePostApiV3Manualimport = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Manualimport>>,
    TError,
    { data: ManualImportReprocessResource[] },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Manualimport>>,
  TError,
  { data: ManualImportReprocessResource[] },
  TContext
> => {
  const mutationOptions = getPostApiV3ManualimportMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3MediacoverMovieIdFilename = (
  movieId: number,
  filename: string,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v3/mediacover/${movieId}/${filename}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3MediacoverMovieIdFilenameQueryKey = (
  movieId: number,
  filename: string
) => {
  return [`/api/v3/mediacover/${movieId}/${filename}`] as const;
};

export const getGetApiV3MediacoverMovieIdFilenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>,
  TError = ErrorType<unknown>
>(
  movieId: number,
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV3MediacoverMovieIdFilenameQueryKey(movieId, filename);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>
  > = ({ signal }) =>
    getApiV3MediacoverMovieIdFilename(movieId, filename, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(movieId && filename),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3MediacoverMovieIdFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>
>;
export type GetApiV3MediacoverMovieIdFilenameQueryError = ErrorType<unknown>;

export function useGetApiV3MediacoverMovieIdFilename<
  TData = Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>,
  TError = ErrorType<unknown>
>(
  movieId: number,
  filename: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MediacoverMovieIdFilename<
  TData = Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>,
  TError = ErrorType<unknown>
>(
  movieId: number,
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MediacoverMovieIdFilename<
  TData = Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>,
  TError = ErrorType<unknown>
>(
  movieId: number,
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3MediacoverMovieIdFilename<
  TData = Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>,
  TError = ErrorType<unknown>
>(
  movieId: number,
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MediacoverMovieIdFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3MediacoverMovieIdFilenameQueryOptions(
    movieId,
    filename,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3ConfigMediamanagement = (signal?: AbortSignal) => {
  return apiInstance<MediaManagementConfigResource>({
    url: `/api/v3/config/mediamanagement`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigMediamanagementQueryKey = () => {
  return [`/api/v3/config/mediamanagement`] as const;
};

export const getGetApiV3ConfigMediamanagementQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigMediamanagementQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>
  > = ({ signal }) => getApiV3ConfigMediamanagement(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigMediamanagementQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>
>;
export type GetApiV3ConfigMediamanagementQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigMediamanagement<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigMediamanagement<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigMediamanagement<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigMediamanagement<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigMediamanagementQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3ConfigMediamanagementId = (
  id: string,
  mediaManagementConfigResource: MediaManagementConfigResource
) => {
  return apiInstance<MediaManagementConfigResource>({
    url: `/api/v3/config/mediamanagement/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: mediaManagementConfigResource,
  });
};

export const getPutApiV3ConfigMediamanagementIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigMediamanagementId>>,
    TError,
    { id: string; data: MediaManagementConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3ConfigMediamanagementId>>,
  TError,
  { id: string; data: MediaManagementConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigMediamanagementId>>,
    { id: string; data: MediaManagementConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigMediamanagementId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3ConfigMediamanagementIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigMediamanagementId>>
>;
export type PutApiV3ConfigMediamanagementIdMutationBody =
  MediaManagementConfigResource;
export type PutApiV3ConfigMediamanagementIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigMediamanagementId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigMediamanagementId>>,
    TError,
    { id: string; data: MediaManagementConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3ConfigMediamanagementId>>,
  TError,
  { id: string; data: MediaManagementConfigResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV3ConfigMediamanagementIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ConfigMediamanagementId = (
  id: number,
  signal?: AbortSignal
) => {
  return apiInstance<MediaManagementConfigResource>({
    url: `/api/v3/config/mediamanagement/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigMediamanagementIdQueryKey = (id: number) => {
  return [`/api/v3/config/mediamanagement/${id}`] as const;
};

export const getGetApiV3ConfigMediamanagementIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigMediamanagementIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>
  > = ({ signal }) => getApiV3ConfigMediamanagementId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigMediamanagementIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>
>;
export type GetApiV3ConfigMediamanagementIdQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigMediamanagementId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigMediamanagementId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigMediamanagementId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigMediamanagementId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigMediamanagementIdQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Metadata = (signal?: AbortSignal) => {
  return apiInstance<MetadataResource[]>({
    url: `/api/v3/metadata`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3MetadataQueryKey = () => {
  return [`/api/v3/metadata`] as const;
};

export const getGetApiV3MetadataQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Metadata>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Metadata>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3MetadataQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Metadata>>
  > = ({ signal }) => getApiV3Metadata(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Metadata>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3MetadataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Metadata>>
>;
export type GetApiV3MetadataQueryError = ErrorType<unknown>;

export function useGetApiV3Metadata<
  TData = Awaited<ReturnType<typeof getApiV3Metadata>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Metadata>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Metadata>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Metadata<
  TData = Awaited<ReturnType<typeof getApiV3Metadata>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Metadata>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Metadata>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Metadata<
  TData = Awaited<ReturnType<typeof getApiV3Metadata>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Metadata>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Metadata<
  TData = Awaited<ReturnType<typeof getApiV3Metadata>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Metadata>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3MetadataQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Metadata = (
  metadataResource: MetadataResource,
  params?: PostApiV3MetadataParams
) => {
  return apiInstance<MetadataResource>({
    url: `/api/v3/metadata`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: metadataResource,
    params,
  });
};

export const getPostApiV3MetadataMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Metadata>>,
    TError,
    { data: MetadataResource; params?: PostApiV3MetadataParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Metadata>>,
  TError,
  { data: MetadataResource; params?: PostApiV3MetadataParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Metadata>>,
    { data: MetadataResource; params?: PostApiV3MetadataParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV3Metadata(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3MetadataMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Metadata>>
>;
export type PostApiV3MetadataMutationBody = MetadataResource;
export type PostApiV3MetadataMutationError = ErrorType<unknown>;

export const usePostApiV3Metadata = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Metadata>>,
    TError,
    { data: MetadataResource; params?: PostApiV3MetadataParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Metadata>>,
  TError,
  { data: MetadataResource; params?: PostApiV3MetadataParams },
  TContext
> => {
  const mutationOptions = getPostApiV3MetadataMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3MetadataId = (
  id: string,
  metadataResource: MetadataResource,
  params?: PutApiV3MetadataIdParams
) => {
  return apiInstance<MetadataResource>({
    url: `/api/v3/metadata/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: metadataResource,
    params,
  });
};

export const getPutApiV3MetadataIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3MetadataId>>,
    TError,
    { id: string; data: MetadataResource; params?: PutApiV3MetadataIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3MetadataId>>,
  TError,
  { id: string; data: MetadataResource; params?: PutApiV3MetadataIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3MetadataId>>,
    { id: string; data: MetadataResource; params?: PutApiV3MetadataIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV3MetadataId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3MetadataIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3MetadataId>>
>;
export type PutApiV3MetadataIdMutationBody = MetadataResource;
export type PutApiV3MetadataIdMutationError = ErrorType<unknown>;

export const usePutApiV3MetadataId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3MetadataId>>,
    TError,
    { id: string; data: MetadataResource; params?: PutApiV3MetadataIdParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3MetadataId>>,
  TError,
  { id: string; data: MetadataResource; params?: PutApiV3MetadataIdParams },
  TContext
> => {
  const mutationOptions = getPutApiV3MetadataIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3MetadataId = (id: number) => {
  return apiInstance<void>({ url: `/api/v3/metadata/${id}`, method: "DELETE" });
};

export const getDeleteApiV3MetadataIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3MetadataId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3MetadataId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3MetadataId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3MetadataId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3MetadataIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3MetadataId>>
>;

export type DeleteApiV3MetadataIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3MetadataId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3MetadataId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3MetadataId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3MetadataIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3MetadataId = (id: number, signal?: AbortSignal) => {
  return apiInstance<MetadataResource>({
    url: `/api/v3/metadata/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3MetadataIdQueryKey = (id: number) => {
  return [`/api/v3/metadata/${id}`] as const;
};

export const getGetApiV3MetadataIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3MetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MetadataId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3MetadataIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3MetadataId>>
  > = ({ signal }) => getApiV3MetadataId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3MetadataId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3MetadataIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3MetadataId>>
>;
export type GetApiV3MetadataIdQueryError = ErrorType<unknown>;

export function useGetApiV3MetadataId<
  TData = Awaited<ReturnType<typeof getApiV3MetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MetadataId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MetadataId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MetadataId<
  TData = Awaited<ReturnType<typeof getApiV3MetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MetadataId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MetadataId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MetadataId<
  TData = Awaited<ReturnType<typeof getApiV3MetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MetadataId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3MetadataId<
  TData = Awaited<ReturnType<typeof getApiV3MetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MetadataId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3MetadataIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3MetadataSchema = (signal?: AbortSignal) => {
  return apiInstance<MetadataResource[]>({
    url: `/api/v3/metadata/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3MetadataSchemaQueryKey = () => {
  return [`/api/v3/metadata/schema`] as const;
};

export const getGetApiV3MetadataSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3MetadataSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3MetadataSchema>>
  > = ({ signal }) => getApiV3MetadataSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3MetadataSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3MetadataSchema>>
>;
export type GetApiV3MetadataSchemaQueryError = ErrorType<unknown>;

export function useGetApiV3MetadataSchema<
  TData = Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MetadataSchema<
  TData = Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MetadataSchema<
  TData = Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3MetadataSchema<
  TData = Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3MetadataSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3MetadataTest = (metadataResource: MetadataResource) => {
  return apiInstance<void>({
    url: `/api/v3/metadata/test`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: metadataResource,
  });
};

export const getPostApiV3MetadataTestMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3MetadataTest>>,
    TError,
    { data: MetadataResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3MetadataTest>>,
  TError,
  { data: MetadataResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3MetadataTest>>,
    { data: MetadataResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3MetadataTest(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3MetadataTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3MetadataTest>>
>;
export type PostApiV3MetadataTestMutationBody = MetadataResource;
export type PostApiV3MetadataTestMutationError = ErrorType<unknown>;

export const usePostApiV3MetadataTest = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3MetadataTest>>,
    TError,
    { data: MetadataResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3MetadataTest>>,
  TError,
  { data: MetadataResource },
  TContext
> => {
  const mutationOptions = getPostApiV3MetadataTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3MetadataTestall = () => {
  return apiInstance<void>({ url: `/api/v3/metadata/testall`, method: "POST" });
};

export const getPostApiV3MetadataTestallMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3MetadataTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3MetadataTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3MetadataTestall>>,
    void
  > = () => {
    return postApiV3MetadataTestall();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3MetadataTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3MetadataTestall>>
>;

export type PostApiV3MetadataTestallMutationError = ErrorType<unknown>;

export const usePostApiV3MetadataTestall = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3MetadataTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3MetadataTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV3MetadataTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3MetadataActionName = (
  name: string,
  metadataResource: MetadataResource
) => {
  return apiInstance<void>({
    url: `/api/v3/metadata/action/${name}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: metadataResource,
  });
};

export const getPostApiV3MetadataActionNameMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3MetadataActionName>>,
    TError,
    { name: string; data: MetadataResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3MetadataActionName>>,
  TError,
  { name: string; data: MetadataResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3MetadataActionName>>,
    { name: string; data: MetadataResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV3MetadataActionName(name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3MetadataActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3MetadataActionName>>
>;
export type PostApiV3MetadataActionNameMutationBody = MetadataResource;
export type PostApiV3MetadataActionNameMutationError = ErrorType<unknown>;

export const usePostApiV3MetadataActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3MetadataActionName>>,
    TError,
    { name: string; data: MetadataResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3MetadataActionName>>,
  TError,
  { name: string; data: MetadataResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV3MetadataActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ConfigMetadata = (signal?: AbortSignal) => {
  return apiInstance<MetadataConfigResource>({
    url: `/api/v3/config/metadata`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigMetadataQueryKey = () => {
  return [`/api/v3/config/metadata`] as const;
};

export const getGetApiV3ConfigMetadataQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigMetadata>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigMetadata>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigMetadataQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigMetadata>>
  > = ({ signal }) => getApiV3ConfigMetadata(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigMetadata>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigMetadataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigMetadata>>
>;
export type GetApiV3ConfigMetadataQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigMetadata<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMetadata>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigMetadata>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMetadata>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigMetadata<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMetadata>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigMetadata>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMetadata>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigMetadata<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMetadata>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigMetadata>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigMetadata<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMetadata>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigMetadata>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigMetadataQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3ConfigMetadataId = (
  id: string,
  metadataConfigResource: MetadataConfigResource
) => {
  return apiInstance<MetadataConfigResource>({
    url: `/api/v3/config/metadata/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: metadataConfigResource,
  });
};

export const getPutApiV3ConfigMetadataIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigMetadataId>>,
    TError,
    { id: string; data: MetadataConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3ConfigMetadataId>>,
  TError,
  { id: string; data: MetadataConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigMetadataId>>,
    { id: string; data: MetadataConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigMetadataId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3ConfigMetadataIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigMetadataId>>
>;
export type PutApiV3ConfigMetadataIdMutationBody = MetadataConfigResource;
export type PutApiV3ConfigMetadataIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigMetadataId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigMetadataId>>,
    TError,
    { id: string; data: MetadataConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3ConfigMetadataId>>,
  TError,
  { id: string; data: MetadataConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV3ConfigMetadataIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ConfigMetadataId = (id: number, signal?: AbortSignal) => {
  return apiInstance<MetadataConfigResource>({
    url: `/api/v3/config/metadata/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigMetadataIdQueryKey = (id: number) => {
  return [`/api/v3/config/metadata/${id}`] as const;
};

export const getGetApiV3ConfigMetadataIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigMetadataIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>
  > = ({ signal }) => getApiV3ConfigMetadataId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigMetadataIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>
>;
export type GetApiV3ConfigMetadataIdQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigMetadataId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigMetadataId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigMetadataId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigMetadataId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigMetadataId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigMetadataIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Movie = (
  params?: GetApiV3MovieParams,
  signal?: AbortSignal
) => {
  return apiInstance<MovieResource[]>({
    url: `/api/v3/movie`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3MovieQueryKey = (params?: GetApiV3MovieParams) => {
  return [`/api/v3/movie`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3MovieQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Movie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Movie>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3MovieQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Movie>>> = ({
    signal,
  }) => getApiV3Movie(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Movie>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3MovieQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Movie>>
>;
export type GetApiV3MovieQueryError = ErrorType<unknown>;

export function useGetApiV3Movie<
  TData = Awaited<ReturnType<typeof getApiV3Movie>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3MovieParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Movie>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Movie>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Movie<
  TData = Awaited<ReturnType<typeof getApiV3Movie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Movie>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Movie>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Movie<
  TData = Awaited<ReturnType<typeof getApiV3Movie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Movie>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Movie<
  TData = Awaited<ReturnType<typeof getApiV3Movie>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Movie>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3MovieQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Movie = (movieResource: MovieResource) => {
  return apiInstance<MovieResource>({
    url: `/api/v3/movie`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: movieResource,
  });
};

export const getPostApiV3MovieMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Movie>>,
    TError,
    { data: MovieResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Movie>>,
  TError,
  { data: MovieResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Movie>>,
    { data: MovieResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Movie(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3MovieMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Movie>>
>;
export type PostApiV3MovieMutationBody = MovieResource;
export type PostApiV3MovieMutationError = ErrorType<unknown>;

export const usePostApiV3Movie = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Movie>>,
    TError,
    { data: MovieResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Movie>>,
  TError,
  { data: MovieResource },
  TContext
> => {
  const mutationOptions = getPostApiV3MovieMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3MovieId = (
  id: string,
  movieResource: MovieResource,
  params?: PutApiV3MovieIdParams
) => {
  return apiInstance<MovieResource>({
    url: `/api/v3/movie/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: movieResource,
    params,
  });
};

export const getPutApiV3MovieIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3MovieId>>,
    TError,
    { id: string; data: MovieResource; params?: PutApiV3MovieIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3MovieId>>,
  TError,
  { id: string; data: MovieResource; params?: PutApiV3MovieIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3MovieId>>,
    { id: string; data: MovieResource; params?: PutApiV3MovieIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV3MovieId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3MovieIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3MovieId>>
>;
export type PutApiV3MovieIdMutationBody = MovieResource;
export type PutApiV3MovieIdMutationError = ErrorType<unknown>;

export const usePutApiV3MovieId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3MovieId>>,
    TError,
    { id: string; data: MovieResource; params?: PutApiV3MovieIdParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3MovieId>>,
  TError,
  { id: string; data: MovieResource; params?: PutApiV3MovieIdParams },
  TContext
> => {
  const mutationOptions = getPutApiV3MovieIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3MovieId = (
  id: number,
  params?: DeleteApiV3MovieIdParams
) => {
  return apiInstance<void>({
    url: `/api/v3/movie/${id}`,
    method: "DELETE",
    params,
  });
};

export const getDeleteApiV3MovieIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3MovieId>>,
    TError,
    { id: number; params?: DeleteApiV3MovieIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3MovieId>>,
  TError,
  { id: number; params?: DeleteApiV3MovieIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3MovieId>>,
    { id: number; params?: DeleteApiV3MovieIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteApiV3MovieId(id, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3MovieIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3MovieId>>
>;

export type DeleteApiV3MovieIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3MovieId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3MovieId>>,
    TError,
    { id: number; params?: DeleteApiV3MovieIdParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3MovieId>>,
  TError,
  { id: number; params?: DeleteApiV3MovieIdParams },
  TContext
> => {
  const mutationOptions = getDeleteApiV3MovieIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3MovieId = (id: number, signal?: AbortSignal) => {
  return apiInstance<MovieResource>({
    url: `/api/v3/movie/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3MovieIdQueryKey = (id: number) => {
  return [`/api/v3/movie/${id}`] as const;
};

export const getGetApiV3MovieIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3MovieId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3MovieIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3MovieId>>> = ({
    signal,
  }) => getApiV3MovieId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3MovieId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3MovieIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3MovieId>>
>;
export type GetApiV3MovieIdQueryError = ErrorType<unknown>;

export function useGetApiV3MovieId<
  TData = Awaited<ReturnType<typeof getApiV3MovieId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MovieId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MovieId<
  TData = Awaited<ReturnType<typeof getApiV3MovieId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MovieId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MovieId<
  TData = Awaited<ReturnType<typeof getApiV3MovieId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3MovieId<
  TData = Awaited<ReturnType<typeof getApiV3MovieId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3MovieIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3MovieEditor = (
  movieEditorResource: MovieEditorResource
) => {
  return apiInstance<void>({
    url: `/api/v3/movie/editor`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: movieEditorResource,
  });
};

export const getPutApiV3MovieEditorMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3MovieEditor>>,
    TError,
    { data: MovieEditorResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3MovieEditor>>,
  TError,
  { data: MovieEditorResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3MovieEditor>>,
    { data: MovieEditorResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3MovieEditor(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3MovieEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3MovieEditor>>
>;
export type PutApiV3MovieEditorMutationBody = MovieEditorResource;
export type PutApiV3MovieEditorMutationError = ErrorType<unknown>;

export const usePutApiV3MovieEditor = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3MovieEditor>>,
    TError,
    { data: MovieEditorResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3MovieEditor>>,
  TError,
  { data: MovieEditorResource },
  TContext
> => {
  const mutationOptions = getPutApiV3MovieEditorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3MovieEditor = (
  movieEditorResource: MovieEditorResource
) => {
  return apiInstance<void>({
    url: `/api/v3/movie/editor`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: movieEditorResource,
  });
};

export const getDeleteApiV3MovieEditorMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3MovieEditor>>,
    TError,
    { data: MovieEditorResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3MovieEditor>>,
  TError,
  { data: MovieEditorResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3MovieEditor>>,
    { data: MovieEditorResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3MovieEditor(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3MovieEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3MovieEditor>>
>;
export type DeleteApiV3MovieEditorMutationBody = MovieEditorResource;
export type DeleteApiV3MovieEditorMutationError = ErrorType<unknown>;

export const useDeleteApiV3MovieEditor = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3MovieEditor>>,
    TError,
    { data: MovieEditorResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3MovieEditor>>,
  TError,
  { data: MovieEditorResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV3MovieEditorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Moviefile = (
  params?: GetApiV3MoviefileParams,
  signal?: AbortSignal
) => {
  return apiInstance<MovieFileResource[]>({
    url: `/api/v3/moviefile`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3MoviefileQueryKey = (
  params?: GetApiV3MoviefileParams
) => {
  return [`/api/v3/moviefile`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3MoviefileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Moviefile>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MoviefileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Moviefile>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3MoviefileQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Moviefile>>
  > = ({ signal }) => getApiV3Moviefile(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Moviefile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3MoviefileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Moviefile>>
>;
export type GetApiV3MoviefileQueryError = ErrorType<unknown>;

export function useGetApiV3Moviefile<
  TData = Awaited<ReturnType<typeof getApiV3Moviefile>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3MoviefileParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Moviefile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Moviefile>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Moviefile<
  TData = Awaited<ReturnType<typeof getApiV3Moviefile>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MoviefileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Moviefile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Moviefile>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Moviefile<
  TData = Awaited<ReturnType<typeof getApiV3Moviefile>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MoviefileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Moviefile>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Moviefile<
  TData = Awaited<ReturnType<typeof getApiV3Moviefile>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MoviefileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Moviefile>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3MoviefileQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3MoviefileId = (
  id: string,
  movieFileResource: MovieFileResource
) => {
  return apiInstance<MovieFileResource>({
    url: `/api/v3/moviefile/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: movieFileResource,
  });
};

export const getPutApiV3MoviefileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3MoviefileId>>,
    TError,
    { id: string; data: MovieFileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3MoviefileId>>,
  TError,
  { id: string; data: MovieFileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3MoviefileId>>,
    { id: string; data: MovieFileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3MoviefileId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3MoviefileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3MoviefileId>>
>;
export type PutApiV3MoviefileIdMutationBody = MovieFileResource;
export type PutApiV3MoviefileIdMutationError = ErrorType<unknown>;

export const usePutApiV3MoviefileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3MoviefileId>>,
    TError,
    { id: string; data: MovieFileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3MoviefileId>>,
  TError,
  { id: string; data: MovieFileResource },
  TContext
> => {
  const mutationOptions = getPutApiV3MoviefileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3MoviefileId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/moviefile/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3MoviefileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3MoviefileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3MoviefileId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3MoviefileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3MoviefileId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3MoviefileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3MoviefileId>>
>;

export type DeleteApiV3MoviefileIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3MoviefileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3MoviefileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3MoviefileId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3MoviefileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3MoviefileId = (id: number, signal?: AbortSignal) => {
  return apiInstance<MovieFileResource>({
    url: `/api/v3/moviefile/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3MoviefileIdQueryKey = (id: number) => {
  return [`/api/v3/moviefile/${id}`] as const;
};

export const getGetApiV3MoviefileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3MoviefileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MoviefileId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3MoviefileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3MoviefileId>>
  > = ({ signal }) => getApiV3MoviefileId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3MoviefileId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3MoviefileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3MoviefileId>>
>;
export type GetApiV3MoviefileIdQueryError = ErrorType<unknown>;

export function useGetApiV3MoviefileId<
  TData = Awaited<ReturnType<typeof getApiV3MoviefileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MoviefileId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MoviefileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MoviefileId<
  TData = Awaited<ReturnType<typeof getApiV3MoviefileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MoviefileId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MoviefileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MoviefileId<
  TData = Awaited<ReturnType<typeof getApiV3MoviefileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MoviefileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3MoviefileId<
  TData = Awaited<ReturnType<typeof getApiV3MoviefileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MoviefileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3MoviefileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3MoviefileEditor = (
  movieFileListResource: MovieFileListResource
) => {
  return apiInstance<void>({
    url: `/api/v3/moviefile/editor`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: movieFileListResource,
  });
};

export const getPutApiV3MoviefileEditorMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3MoviefileEditor>>,
    TError,
    { data: MovieFileListResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3MoviefileEditor>>,
  TError,
  { data: MovieFileListResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3MoviefileEditor>>,
    { data: MovieFileListResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3MoviefileEditor(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3MoviefileEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3MoviefileEditor>>
>;
export type PutApiV3MoviefileEditorMutationBody = MovieFileListResource;
export type PutApiV3MoviefileEditorMutationError = ErrorType<unknown>;

export const usePutApiV3MoviefileEditor = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3MoviefileEditor>>,
    TError,
    { data: MovieFileListResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3MoviefileEditor>>,
  TError,
  { data: MovieFileListResource },
  TContext
> => {
  const mutationOptions = getPutApiV3MoviefileEditorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3MoviefileBulk = (
  movieFileListResource: MovieFileListResource
) => {
  return apiInstance<void>({
    url: `/api/v3/moviefile/bulk`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: movieFileListResource,
  });
};

export const getDeleteApiV3MoviefileBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3MoviefileBulk>>,
    TError,
    { data: MovieFileListResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3MoviefileBulk>>,
  TError,
  { data: MovieFileListResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3MoviefileBulk>>,
    { data: MovieFileListResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3MoviefileBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3MoviefileBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3MoviefileBulk>>
>;
export type DeleteApiV3MoviefileBulkMutationBody = MovieFileListResource;
export type DeleteApiV3MoviefileBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3MoviefileBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3MoviefileBulk>>,
    TError,
    { data: MovieFileListResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3MoviefileBulk>>,
  TError,
  { data: MovieFileListResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV3MoviefileBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3MovieImport = (movieResource: MovieResource[]) => {
  return apiInstance<void>({
    url: `/api/v3/movie/import`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: movieResource,
  });
};

export const getPostApiV3MovieImportMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3MovieImport>>,
    TError,
    { data: MovieResource[] },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3MovieImport>>,
  TError,
  { data: MovieResource[] },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3MovieImport>>,
    { data: MovieResource[] }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3MovieImport(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3MovieImportMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3MovieImport>>
>;
export type PostApiV3MovieImportMutationBody = MovieResource[];
export type PostApiV3MovieImportMutationError = ErrorType<unknown>;

export const usePostApiV3MovieImport = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3MovieImport>>,
    TError,
    { data: MovieResource[] },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3MovieImport>>,
  TError,
  { data: MovieResource[] },
  TContext
> => {
  const mutationOptions = getPostApiV3MovieImportMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3MovieImportId = (id: number, signal?: AbortSignal) => {
  return apiInstance<MovieResource>({
    url: `/api/v3/movie/import/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3MovieImportIdQueryKey = (id: number) => {
  return [`/api/v3/movie/import/${id}`] as const;
};

export const getGetApiV3MovieImportIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3MovieImportId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieImportId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3MovieImportIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3MovieImportId>>
  > = ({ signal }) => getApiV3MovieImportId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3MovieImportId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3MovieImportIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3MovieImportId>>
>;
export type GetApiV3MovieImportIdQueryError = ErrorType<unknown>;

export function useGetApiV3MovieImportId<
  TData = Awaited<ReturnType<typeof getApiV3MovieImportId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieImportId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MovieImportId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MovieImportId<
  TData = Awaited<ReturnType<typeof getApiV3MovieImportId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieImportId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MovieImportId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MovieImportId<
  TData = Awaited<ReturnType<typeof getApiV3MovieImportId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieImportId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3MovieImportId<
  TData = Awaited<ReturnType<typeof getApiV3MovieImportId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieImportId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3MovieImportIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3MovieLookupTmdb = (
  params?: GetApiV3MovieLookupTmdbParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v3/movie/lookup/tmdb`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3MovieLookupTmdbQueryKey = (
  params?: GetApiV3MovieLookupTmdbParams
) => {
  return [`/api/v3/movie/lookup/tmdb`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3MovieLookupTmdbQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieLookupTmdbParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3MovieLookupTmdbQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>
  > = ({ signal }) => getApiV3MovieLookupTmdb(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3MovieLookupTmdbQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>
>;
export type GetApiV3MovieLookupTmdbQueryError = ErrorType<unknown>;

export function useGetApiV3MovieLookupTmdb<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3MovieLookupTmdbParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MovieLookupTmdb<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieLookupTmdbParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MovieLookupTmdb<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieLookupTmdbParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3MovieLookupTmdb<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieLookupTmdbParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupTmdb>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3MovieLookupTmdbQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3MovieLookupImdb = (
  params?: GetApiV3MovieLookupImdbParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v3/movie/lookup/imdb`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3MovieLookupImdbQueryKey = (
  params?: GetApiV3MovieLookupImdbParams
) => {
  return [`/api/v3/movie/lookup/imdb`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3MovieLookupImdbQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieLookupImdbParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3MovieLookupImdbQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>
  > = ({ signal }) => getApiV3MovieLookupImdb(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3MovieLookupImdbQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>
>;
export type GetApiV3MovieLookupImdbQueryError = ErrorType<unknown>;

export function useGetApiV3MovieLookupImdb<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3MovieLookupImdbParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MovieLookupImdb<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieLookupImdbParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MovieLookupImdb<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieLookupImdbParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3MovieLookupImdb<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieLookupImdbParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupImdb>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3MovieLookupImdbQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3MovieLookup = (
  params?: GetApiV3MovieLookupParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v3/movie/lookup`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3MovieLookupQueryKey = (
  params?: GetApiV3MovieLookupParams
) => {
  return [`/api/v3/movie/lookup`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3MovieLookupQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3MovieLookup>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookup>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3MovieLookupQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3MovieLookup>>
  > = ({ signal }) => getApiV3MovieLookup(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3MovieLookup>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3MovieLookupQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3MovieLookup>>
>;
export type GetApiV3MovieLookupQueryError = ErrorType<unknown>;

export function useGetApiV3MovieLookup<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookup>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3MovieLookupParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookup>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MovieLookup>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MovieLookup<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookup>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookup>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MovieLookup>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MovieLookup<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookup>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookup>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3MovieLookup<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookup>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3MovieLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookup>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3MovieLookupQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3MovieLookupId = (id: number, signal?: AbortSignal) => {
  return apiInstance<MovieResource>({
    url: `/api/v3/movie/lookup/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3MovieLookupIdQueryKey = (id: number) => {
  return [`/api/v3/movie/lookup/${id}`] as const;
};

export const getGetApiV3MovieLookupIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3MovieLookupIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3MovieLookupId>>
  > = ({ signal }) => getApiV3MovieLookupId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3MovieLookupId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3MovieLookupIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3MovieLookupId>>
>;
export type GetApiV3MovieLookupIdQueryError = ErrorType<unknown>;

export function useGetApiV3MovieLookupId<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MovieLookupId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MovieLookupId<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3MovieLookupId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3MovieLookupId<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3MovieLookupId<
  TData = Awaited<ReturnType<typeof getApiV3MovieLookupId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3MovieLookupId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3MovieLookupIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3ConfigNaming = (signal?: AbortSignal) => {
  return apiInstance<NamingConfigResource>({
    url: `/api/v3/config/naming`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigNamingQueryKey = () => {
  return [`/api/v3/config/naming`] as const;
};

export const getGetApiV3ConfigNamingQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ConfigNamingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigNaming>>
  > = ({ signal }) => getApiV3ConfigNaming(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigNamingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigNaming>>
>;
export type GetApiV3ConfigNamingQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigNaming<
  TData = Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigNaming<
  TData = Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigNaming<
  TData = Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigNaming<
  TData = Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigNamingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3ConfigNamingId = (
  id: string,
  namingConfigResource: NamingConfigResource
) => {
  return apiInstance<NamingConfigResource>({
    url: `/api/v3/config/naming/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: namingConfigResource,
  });
};

export const getPutApiV3ConfigNamingIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigNamingId>>,
    TError,
    { id: string; data: NamingConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3ConfigNamingId>>,
  TError,
  { id: string; data: NamingConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigNamingId>>,
    { id: string; data: NamingConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigNamingId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3ConfigNamingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigNamingId>>
>;
export type PutApiV3ConfigNamingIdMutationBody = NamingConfigResource;
export type PutApiV3ConfigNamingIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigNamingId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigNamingId>>,
    TError,
    { id: string; data: NamingConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3ConfigNamingId>>,
  TError,
  { id: string; data: NamingConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV3ConfigNamingIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ConfigNamingId = (id: number, signal?: AbortSignal) => {
  return apiInstance<NamingConfigResource>({
    url: `/api/v3/config/naming/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigNamingIdQueryKey = (id: number) => {
  return [`/api/v3/config/naming/${id}`] as const;
};

export const getGetApiV3ConfigNamingIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigNamingIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigNamingId>>
  > = ({ signal }) => getApiV3ConfigNamingId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigNamingIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigNamingId>>
>;
export type GetApiV3ConfigNamingIdQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigNamingId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigNamingId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigNamingId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigNamingId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigNamingIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3ConfigNamingExamples = (
  params?: GetApiV3ConfigNamingExamplesParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v3/config/naming/examples`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3ConfigNamingExamplesQueryKey = (
  params?: GetApiV3ConfigNamingExamplesParams
) => {
  return [
    `/api/v3/config/naming/examples`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV3ConfigNamingExamplesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ConfigNamingExamplesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigNamingExamplesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>
  > = ({ signal }) => getApiV3ConfigNamingExamples(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigNamingExamplesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>
>;
export type GetApiV3ConfigNamingExamplesQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigNamingExamples<
  TData = Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3ConfigNamingExamplesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigNamingExamples<
  TData = Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ConfigNamingExamplesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigNamingExamples<
  TData = Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ConfigNamingExamplesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigNamingExamples<
  TData = Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ConfigNamingExamplesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigNamingExamplesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Notification = (signal?: AbortSignal) => {
  return apiInstance<NotificationResource[]>({
    url: `/api/v3/notification`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3NotificationQueryKey = () => {
  return [`/api/v3/notification`] as const;
};

export const getGetApiV3NotificationQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Notification>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Notification>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3NotificationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Notification>>
  > = ({ signal }) => getApiV3Notification(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Notification>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3NotificationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Notification>>
>;
export type GetApiV3NotificationQueryError = ErrorType<unknown>;

export function useGetApiV3Notification<
  TData = Awaited<ReturnType<typeof getApiV3Notification>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Notification>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Notification>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Notification<
  TData = Awaited<ReturnType<typeof getApiV3Notification>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Notification>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Notification>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Notification<
  TData = Awaited<ReturnType<typeof getApiV3Notification>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Notification>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Notification<
  TData = Awaited<ReturnType<typeof getApiV3Notification>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Notification>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3NotificationQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Notification = (
  notificationResource: NotificationResource,
  params?: PostApiV3NotificationParams
) => {
  return apiInstance<NotificationResource>({
    url: `/api/v3/notification`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: notificationResource,
    params,
  });
};

export const getPostApiV3NotificationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Notification>>,
    TError,
    { data: NotificationResource; params?: PostApiV3NotificationParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Notification>>,
  TError,
  { data: NotificationResource; params?: PostApiV3NotificationParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Notification>>,
    { data: NotificationResource; params?: PostApiV3NotificationParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV3Notification(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3NotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Notification>>
>;
export type PostApiV3NotificationMutationBody = NotificationResource;
export type PostApiV3NotificationMutationError = ErrorType<unknown>;

export const usePostApiV3Notification = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Notification>>,
    TError,
    { data: NotificationResource; params?: PostApiV3NotificationParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Notification>>,
  TError,
  { data: NotificationResource; params?: PostApiV3NotificationParams },
  TContext
> => {
  const mutationOptions = getPostApiV3NotificationMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3NotificationId = (
  id: string,
  notificationResource: NotificationResource,
  params?: PutApiV3NotificationIdParams
) => {
  return apiInstance<NotificationResource>({
    url: `/api/v3/notification/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: notificationResource,
    params,
  });
};

export const getPutApiV3NotificationIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3NotificationId>>,
    TError,
    {
      id: string;
      data: NotificationResource;
      params?: PutApiV3NotificationIdParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3NotificationId>>,
  TError,
  {
    id: string;
    data: NotificationResource;
    params?: PutApiV3NotificationIdParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3NotificationId>>,
    {
      id: string;
      data: NotificationResource;
      params?: PutApiV3NotificationIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV3NotificationId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3NotificationIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3NotificationId>>
>;
export type PutApiV3NotificationIdMutationBody = NotificationResource;
export type PutApiV3NotificationIdMutationError = ErrorType<unknown>;

export const usePutApiV3NotificationId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3NotificationId>>,
    TError,
    {
      id: string;
      data: NotificationResource;
      params?: PutApiV3NotificationIdParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3NotificationId>>,
  TError,
  {
    id: string;
    data: NotificationResource;
    params?: PutApiV3NotificationIdParams;
  },
  TContext
> => {
  const mutationOptions = getPutApiV3NotificationIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3NotificationId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/notification/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3NotificationIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3NotificationId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3NotificationId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3NotificationId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3NotificationId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3NotificationIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3NotificationId>>
>;

export type DeleteApiV3NotificationIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3NotificationId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3NotificationId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3NotificationId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3NotificationIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3NotificationId = (id: number, signal?: AbortSignal) => {
  return apiInstance<NotificationResource>({
    url: `/api/v3/notification/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3NotificationIdQueryKey = (id: number) => {
  return [`/api/v3/notification/${id}`] as const;
};

export const getGetApiV3NotificationIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3NotificationId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3NotificationId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3NotificationIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3NotificationId>>
  > = ({ signal }) => getApiV3NotificationId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3NotificationId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3NotificationIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3NotificationId>>
>;
export type GetApiV3NotificationIdQueryError = ErrorType<unknown>;

export function useGetApiV3NotificationId<
  TData = Awaited<ReturnType<typeof getApiV3NotificationId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3NotificationId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3NotificationId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3NotificationId<
  TData = Awaited<ReturnType<typeof getApiV3NotificationId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3NotificationId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3NotificationId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3NotificationId<
  TData = Awaited<ReturnType<typeof getApiV3NotificationId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3NotificationId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3NotificationId<
  TData = Awaited<ReturnType<typeof getApiV3NotificationId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3NotificationId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3NotificationIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3NotificationSchema = (signal?: AbortSignal) => {
  return apiInstance<NotificationResource[]>({
    url: `/api/v3/notification/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3NotificationSchemaQueryKey = () => {
  return [`/api/v3/notification/schema`] as const;
};

export const getGetApiV3NotificationSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3NotificationSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3NotificationSchema>>
  > = ({ signal }) => getApiV3NotificationSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3NotificationSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3NotificationSchema>>
>;
export type GetApiV3NotificationSchemaQueryError = ErrorType<unknown>;

export function useGetApiV3NotificationSchema<
  TData = Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3NotificationSchema<
  TData = Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3NotificationSchema<
  TData = Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3NotificationSchema<
  TData = Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3NotificationSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3NotificationTest = (
  notificationResource: NotificationResource
) => {
  return apiInstance<void>({
    url: `/api/v3/notification/test`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: notificationResource,
  });
};

export const getPostApiV3NotificationTestMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3NotificationTest>>,
    TError,
    { data: NotificationResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3NotificationTest>>,
  TError,
  { data: NotificationResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3NotificationTest>>,
    { data: NotificationResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3NotificationTest(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3NotificationTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3NotificationTest>>
>;
export type PostApiV3NotificationTestMutationBody = NotificationResource;
export type PostApiV3NotificationTestMutationError = ErrorType<unknown>;

export const usePostApiV3NotificationTest = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3NotificationTest>>,
    TError,
    { data: NotificationResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3NotificationTest>>,
  TError,
  { data: NotificationResource },
  TContext
> => {
  const mutationOptions = getPostApiV3NotificationTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3NotificationTestall = () => {
  return apiInstance<void>({
    url: `/api/v3/notification/testall`,
    method: "POST",
  });
};

export const getPostApiV3NotificationTestallMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3NotificationTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3NotificationTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3NotificationTestall>>,
    void
  > = () => {
    return postApiV3NotificationTestall();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3NotificationTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3NotificationTestall>>
>;

export type PostApiV3NotificationTestallMutationError = ErrorType<unknown>;

export const usePostApiV3NotificationTestall = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3NotificationTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3NotificationTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPostApiV3NotificationTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3NotificationActionName = (
  name: string,
  notificationResource: NotificationResource
) => {
  return apiInstance<void>({
    url: `/api/v3/notification/action/${name}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: notificationResource,
  });
};

export const getPostApiV3NotificationActionNameMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3NotificationActionName>>,
    TError,
    { name: string; data: NotificationResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3NotificationActionName>>,
  TError,
  { name: string; data: NotificationResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3NotificationActionName>>,
    { name: string; data: NotificationResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV3NotificationActionName(name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3NotificationActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3NotificationActionName>>
>;
export type PostApiV3NotificationActionNameMutationBody = NotificationResource;
export type PostApiV3NotificationActionNameMutationError = ErrorType<unknown>;

export const usePostApiV3NotificationActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3NotificationActionName>>,
    TError,
    { name: string; data: NotificationResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3NotificationActionName>>,
  TError,
  { name: string; data: NotificationResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV3NotificationActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Parse = (
  params?: GetApiV3ParseParams,
  signal?: AbortSignal
) => {
  return apiInstance<ParseResource>({
    url: `/api/v3/parse`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3ParseQueryKey = (params?: GetApiV3ParseParams) => {
  return [`/api/v3/parse`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3ParseQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Parse>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ParseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Parse>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ParseQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Parse>>> = ({
    signal,
  }) => getApiV3Parse(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Parse>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ParseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Parse>>
>;
export type GetApiV3ParseQueryError = ErrorType<unknown>;

export function useGetApiV3Parse<
  TData = Awaited<ReturnType<typeof getApiV3Parse>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3ParseParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Parse>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Parse>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Parse<
  TData = Awaited<ReturnType<typeof getApiV3Parse>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ParseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Parse>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Parse>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Parse<
  TData = Awaited<ReturnType<typeof getApiV3Parse>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ParseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Parse>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Parse<
  TData = Awaited<ReturnType<typeof getApiV3Parse>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ParseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Parse>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ParseQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPing = (signal?: AbortSignal) => {
  return apiInstance<PingResource>({ url: `/ping`, method: "GET", signal });
};

export const getGetPingQueryKey = () => {
  return [`/ping`] as const;
};

export const getGetPingQueryOptions = <
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPingQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPing>>> = ({
    signal,
  }) => getPing(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPing>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPing>>
>;
export type GetPingQueryError = ErrorType<unknown>;

export function useGetPing<
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPing>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPing<
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPing>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPing<
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetPing<
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3QualitydefinitionId = (
  id: string,
  qualityDefinitionResource: QualityDefinitionResource
) => {
  return apiInstance<QualityDefinitionResource>({
    url: `/api/v3/qualitydefinition/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: qualityDefinitionResource,
  });
};

export const getPutApiV3QualitydefinitionIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3QualitydefinitionId>>,
    TError,
    { id: string; data: QualityDefinitionResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3QualitydefinitionId>>,
  TError,
  { id: string; data: QualityDefinitionResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3QualitydefinitionId>>,
    { id: string; data: QualityDefinitionResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3QualitydefinitionId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3QualitydefinitionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3QualitydefinitionId>>
>;
export type PutApiV3QualitydefinitionIdMutationBody = QualityDefinitionResource;
export type PutApiV3QualitydefinitionIdMutationError = ErrorType<unknown>;

export const usePutApiV3QualitydefinitionId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3QualitydefinitionId>>,
    TError,
    { id: string; data: QualityDefinitionResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3QualitydefinitionId>>,
  TError,
  { id: string; data: QualityDefinitionResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV3QualitydefinitionIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3QualitydefinitionId = (
  id: number,
  signal?: AbortSignal
) => {
  return apiInstance<QualityDefinitionResource>({
    url: `/api/v3/qualitydefinition/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3QualitydefinitionIdQueryKey = (id: number) => {
  return [`/api/v3/qualitydefinition/${id}`] as const;
};

export const getGetApiV3QualitydefinitionIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QualitydefinitionIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>
  > = ({ signal }) => getApiV3QualitydefinitionId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3QualitydefinitionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>
>;
export type GetApiV3QualitydefinitionIdQueryError = ErrorType<unknown>;

export function useGetApiV3QualitydefinitionId<
  TData = Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QualitydefinitionId<
  TData = Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QualitydefinitionId<
  TData = Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3QualitydefinitionId<
  TData = Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3QualitydefinitionIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Qualitydefinition = (signal?: AbortSignal) => {
  return apiInstance<QualityDefinitionResource[]>({
    url: `/api/v3/qualitydefinition`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3QualitydefinitionQueryKey = () => {
  return [`/api/v3/qualitydefinition`] as const;
};

export const getGetApiV3QualitydefinitionQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QualitydefinitionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Qualitydefinition>>
  > = ({ signal }) => getApiV3Qualitydefinition(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3QualitydefinitionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Qualitydefinition>>
>;
export type GetApiV3QualitydefinitionQueryError = ErrorType<unknown>;

export function useGetApiV3Qualitydefinition<
  TData = Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Qualitydefinition<
  TData = Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Qualitydefinition<
  TData = Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Qualitydefinition<
  TData = Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3QualitydefinitionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3QualitydefinitionUpdate = (
  qualityDefinitionResource: QualityDefinitionResource[]
) => {
  return apiInstance<void>({
    url: `/api/v3/qualitydefinition/update`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: qualityDefinitionResource,
  });
};

export const getPutApiV3QualitydefinitionUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3QualitydefinitionUpdate>>,
    TError,
    { data: QualityDefinitionResource[] },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3QualitydefinitionUpdate>>,
  TError,
  { data: QualityDefinitionResource[] },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3QualitydefinitionUpdate>>,
    { data: QualityDefinitionResource[] }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3QualitydefinitionUpdate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3QualitydefinitionUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3QualitydefinitionUpdate>>
>;
export type PutApiV3QualitydefinitionUpdateMutationBody =
  QualityDefinitionResource[];
export type PutApiV3QualitydefinitionUpdateMutationError = ErrorType<unknown>;

export const usePutApiV3QualitydefinitionUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3QualitydefinitionUpdate>>,
    TError,
    { data: QualityDefinitionResource[] },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3QualitydefinitionUpdate>>,
  TError,
  { data: QualityDefinitionResource[] },
  TContext
> => {
  const mutationOptions =
    getPutApiV3QualitydefinitionUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3Qualityprofile = (
  qualityProfileResource: QualityProfileResource
) => {
  return apiInstance<QualityProfileResource>({
    url: `/api/v3/qualityprofile`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: qualityProfileResource,
  });
};

export const getPostApiV3QualityprofileMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Qualityprofile>>,
    TError,
    { data: QualityProfileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Qualityprofile>>,
  TError,
  { data: QualityProfileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Qualityprofile>>,
    { data: QualityProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Qualityprofile(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3QualityprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Qualityprofile>>
>;
export type PostApiV3QualityprofileMutationBody = QualityProfileResource;
export type PostApiV3QualityprofileMutationError = ErrorType<unknown>;

export const usePostApiV3Qualityprofile = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Qualityprofile>>,
    TError,
    { data: QualityProfileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Qualityprofile>>,
  TError,
  { data: QualityProfileResource },
  TContext
> => {
  const mutationOptions = getPostApiV3QualityprofileMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Qualityprofile = (signal?: AbortSignal) => {
  return apiInstance<QualityProfileResource[]>({
    url: `/api/v3/qualityprofile`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3QualityprofileQueryKey = () => {
  return [`/api/v3/qualityprofile`] as const;
};

export const getGetApiV3QualityprofileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QualityprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Qualityprofile>>
  > = ({ signal }) => getApiV3Qualityprofile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3QualityprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Qualityprofile>>
>;
export type GetApiV3QualityprofileQueryError = ErrorType<unknown>;

export function useGetApiV3Qualityprofile<
  TData = Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Qualityprofile<
  TData = Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Qualityprofile<
  TData = Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Qualityprofile<
  TData = Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3QualityprofileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV3QualityprofileId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/qualityprofile/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3QualityprofileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3QualityprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3QualityprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3QualityprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3QualityprofileId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3QualityprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3QualityprofileId>>
>;

export type DeleteApiV3QualityprofileIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3QualityprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3QualityprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3QualityprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV3QualityprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3QualityprofileId = (
  id: string,
  qualityProfileResource: QualityProfileResource
) => {
  return apiInstance<QualityProfileResource>({
    url: `/api/v3/qualityprofile/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: qualityProfileResource,
  });
};

export const getPutApiV3QualityprofileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3QualityprofileId>>,
    TError,
    { id: string; data: QualityProfileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3QualityprofileId>>,
  TError,
  { id: string; data: QualityProfileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3QualityprofileId>>,
    { id: string; data: QualityProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3QualityprofileId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3QualityprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3QualityprofileId>>
>;
export type PutApiV3QualityprofileIdMutationBody = QualityProfileResource;
export type PutApiV3QualityprofileIdMutationError = ErrorType<unknown>;

export const usePutApiV3QualityprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3QualityprofileId>>,
    TError,
    { id: string; data: QualityProfileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3QualityprofileId>>,
  TError,
  { id: string; data: QualityProfileResource },
  TContext
> => {
  const mutationOptions = getPutApiV3QualityprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3QualityprofileId = (id: number, signal?: AbortSignal) => {
  return apiInstance<QualityProfileResource>({
    url: `/api/v3/qualityprofile/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3QualityprofileIdQueryKey = (id: number) => {
  return [`/api/v3/qualityprofile/${id}`] as const;
};

export const getGetApiV3QualityprofileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QualityprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3QualityprofileId>>
  > = ({ signal }) => getApiV3QualityprofileId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3QualityprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3QualityprofileId>>
>;
export type GetApiV3QualityprofileIdQueryError = ErrorType<unknown>;

export function useGetApiV3QualityprofileId<
  TData = Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QualityprofileId<
  TData = Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QualityprofileId<
  TData = Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3QualityprofileId<
  TData = Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3QualityprofileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3QualityprofileSchema = (signal?: AbortSignal) => {
  return apiInstance<QualityProfileResource>({
    url: `/api/v3/qualityprofile/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3QualityprofileSchemaQueryKey = () => {
  return [`/api/v3/qualityprofile/schema`] as const;
};

export const getGetApiV3QualityprofileSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QualityprofileSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>
  > = ({ signal }) => getApiV3QualityprofileSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3QualityprofileSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>
>;
export type GetApiV3QualityprofileSchemaQueryError = ErrorType<unknown>;

export function useGetApiV3QualityprofileSchema<
  TData = Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QualityprofileSchema<
  TData = Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QualityprofileSchema<
  TData = Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3QualityprofileSchema<
  TData = Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3QualityprofileSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV3QueueId = (
  id: number,
  params?: DeleteApiV3QueueIdParams
) => {
  return apiInstance<void>({
    url: `/api/v3/queue/${id}`,
    method: "DELETE",
    params,
  });
};

export const getDeleteApiV3QueueIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3QueueId>>,
    TError,
    { id: number; params?: DeleteApiV3QueueIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3QueueId>>,
  TError,
  { id: number; params?: DeleteApiV3QueueIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3QueueId>>,
    { id: number; params?: DeleteApiV3QueueIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteApiV3QueueId(id, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3QueueIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3QueueId>>
>;

export type DeleteApiV3QueueIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3QueueId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3QueueId>>,
    TError,
    { id: number; params?: DeleteApiV3QueueIdParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3QueueId>>,
  TError,
  { id: number; params?: DeleteApiV3QueueIdParams },
  TContext
> => {
  const mutationOptions = getDeleteApiV3QueueIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3QueueId = (id: number, signal?: AbortSignal) => {
  return apiInstance<QueueResource>({
    url: `/api/v3/queue/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3QueueIdQueryKey = (id: number) => {
  return [`/api/v3/queue/${id}`] as const;
};

export const getGetApiV3QueueIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3QueueId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3QueueIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3QueueId>>> = ({
    signal,
  }) => getApiV3QueueId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3QueueId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3QueueIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3QueueId>>
>;
export type GetApiV3QueueIdQueryError = ErrorType<unknown>;

export function useGetApiV3QueueId<
  TData = Awaited<ReturnType<typeof getApiV3QueueId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3QueueId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QueueId<
  TData = Awaited<ReturnType<typeof getApiV3QueueId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3QueueId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QueueId<
  TData = Awaited<ReturnType<typeof getApiV3QueueId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3QueueId<
  TData = Awaited<ReturnType<typeof getApiV3QueueId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3QueueIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV3QueueBulk = (
  queueBulkResource: QueueBulkResource,
  params?: DeleteApiV3QueueBulkParams
) => {
  return apiInstance<void>({
    url: `/api/v3/queue/bulk`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: queueBulkResource,
    params,
  });
};

export const getDeleteApiV3QueueBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3QueueBulk>>,
    TError,
    { data: QueueBulkResource; params?: DeleteApiV3QueueBulkParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3QueueBulk>>,
  TError,
  { data: QueueBulkResource; params?: DeleteApiV3QueueBulkParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3QueueBulk>>,
    { data: QueueBulkResource; params?: DeleteApiV3QueueBulkParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return deleteApiV3QueueBulk(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3QueueBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3QueueBulk>>
>;
export type DeleteApiV3QueueBulkMutationBody = QueueBulkResource;
export type DeleteApiV3QueueBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3QueueBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3QueueBulk>>,
    TError,
    { data: QueueBulkResource; params?: DeleteApiV3QueueBulkParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3QueueBulk>>,
  TError,
  { data: QueueBulkResource; params?: DeleteApiV3QueueBulkParams },
  TContext
> => {
  const mutationOptions = getDeleteApiV3QueueBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Queue = (
  params?: GetApiV3QueueParams,
  signal?: AbortSignal
) => {
  return apiInstance<QueueResourcePagingResource>({
    url: `/api/v3/queue`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3QueueQueryKey = (params?: GetApiV3QueueParams) => {
  return [`/api/v3/queue`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3QueueQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Queue>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3QueueParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Queue>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3QueueQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Queue>>> = ({
    signal,
  }) => getApiV3Queue(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Queue>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3QueueQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Queue>>
>;
export type GetApiV3QueueQueryError = ErrorType<unknown>;

export function useGetApiV3Queue<
  TData = Awaited<ReturnType<typeof getApiV3Queue>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3QueueParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Queue>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Queue>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Queue<
  TData = Awaited<ReturnType<typeof getApiV3Queue>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3QueueParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Queue>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Queue>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Queue<
  TData = Awaited<ReturnType<typeof getApiV3Queue>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3QueueParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Queue>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Queue<
  TData = Awaited<ReturnType<typeof getApiV3Queue>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3QueueParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Queue>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3QueueQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3QueueGrabId = (id: number) => {
  return apiInstance<void>({ url: `/api/v3/queue/grab/${id}`, method: "POST" });
};

export const getPostApiV3QueueGrabIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3QueueGrabId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3QueueGrabId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3QueueGrabId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postApiV3QueueGrabId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3QueueGrabIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3QueueGrabId>>
>;

export type PostApiV3QueueGrabIdMutationError = ErrorType<unknown>;

export const usePostApiV3QueueGrabId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3QueueGrabId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3QueueGrabId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPostApiV3QueueGrabIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3QueueGrabBulk = (
  queueBulkResource: QueueBulkResource
) => {
  return apiInstance<void>({
    url: `/api/v3/queue/grab/bulk`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: queueBulkResource,
  });
};

export const getPostApiV3QueueGrabBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3QueueGrabBulk>>,
    TError,
    { data: QueueBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3QueueGrabBulk>>,
  TError,
  { data: QueueBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3QueueGrabBulk>>,
    { data: QueueBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3QueueGrabBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3QueueGrabBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3QueueGrabBulk>>
>;
export type PostApiV3QueueGrabBulkMutationBody = QueueBulkResource;
export type PostApiV3QueueGrabBulkMutationError = ErrorType<unknown>;

export const usePostApiV3QueueGrabBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3QueueGrabBulk>>,
    TError,
    { data: QueueBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3QueueGrabBulk>>,
  TError,
  { data: QueueBulkResource },
  TContext
> => {
  const mutationOptions = getPostApiV3QueueGrabBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3QueueDetails = (
  params?: GetApiV3QueueDetailsParams,
  signal?: AbortSignal
) => {
  return apiInstance<QueueResource[]>({
    url: `/api/v3/queue/details`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3QueueDetailsQueryKey = (
  params?: GetApiV3QueueDetailsParams
) => {
  return [`/api/v3/queue/details`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3QueueDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3QueueDetails>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3QueueDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueDetails>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QueueDetailsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3QueueDetails>>
  > = ({ signal }) => getApiV3QueueDetails(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3QueueDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3QueueDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3QueueDetails>>
>;
export type GetApiV3QueueDetailsQueryError = ErrorType<unknown>;

export function useGetApiV3QueueDetails<
  TData = Awaited<ReturnType<typeof getApiV3QueueDetails>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3QueueDetailsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3QueueDetails>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QueueDetails<
  TData = Awaited<ReturnType<typeof getApiV3QueueDetails>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3QueueDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3QueueDetails>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QueueDetails<
  TData = Awaited<ReturnType<typeof getApiV3QueueDetails>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3QueueDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueDetails>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3QueueDetails<
  TData = Awaited<ReturnType<typeof getApiV3QueueDetails>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3QueueDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueDetails>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3QueueDetailsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3QueueDetailsId = (id: number, signal?: AbortSignal) => {
  return apiInstance<QueueResource>({
    url: `/api/v3/queue/details/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3QueueDetailsIdQueryKey = (id: number) => {
  return [`/api/v3/queue/details/${id}`] as const;
};

export const getGetApiV3QueueDetailsIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3QueueDetailsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueDetailsId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QueueDetailsIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3QueueDetailsId>>
  > = ({ signal }) => getApiV3QueueDetailsId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3QueueDetailsId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3QueueDetailsIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3QueueDetailsId>>
>;
export type GetApiV3QueueDetailsIdQueryError = ErrorType<unknown>;

export function useGetApiV3QueueDetailsId<
  TData = Awaited<ReturnType<typeof getApiV3QueueDetailsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueDetailsId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3QueueDetailsId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QueueDetailsId<
  TData = Awaited<ReturnType<typeof getApiV3QueueDetailsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueDetailsId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3QueueDetailsId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QueueDetailsId<
  TData = Awaited<ReturnType<typeof getApiV3QueueDetailsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueDetailsId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3QueueDetailsId<
  TData = Awaited<ReturnType<typeof getApiV3QueueDetailsId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueDetailsId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3QueueDetailsIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3QueueStatus = (signal?: AbortSignal) => {
  return apiInstance<QueueStatusResource>({
    url: `/api/v3/queue/status`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3QueueStatusQueryKey = () => {
  return [`/api/v3/queue/status`] as const;
};

export const getGetApiV3QueueStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3QueueStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3QueueStatus>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3QueueStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3QueueStatus>>
  > = ({ signal }) => getApiV3QueueStatus(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3QueueStatus>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3QueueStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3QueueStatus>>
>;
export type GetApiV3QueueStatusQueryError = ErrorType<unknown>;

export function useGetApiV3QueueStatus<
  TData = Awaited<ReturnType<typeof getApiV3QueueStatus>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3QueueStatus>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3QueueStatus>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QueueStatus<
  TData = Awaited<ReturnType<typeof getApiV3QueueStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3QueueStatus>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3QueueStatus>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QueueStatus<
  TData = Awaited<ReturnType<typeof getApiV3QueueStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3QueueStatus>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3QueueStatus<
  TData = Awaited<ReturnType<typeof getApiV3QueueStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3QueueStatus>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3QueueStatusQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3QueueStatusId = (id: number, signal?: AbortSignal) => {
  return apiInstance<QueueStatusResource>({
    url: `/api/v3/queue/status/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3QueueStatusIdQueryKey = (id: number) => {
  return [`/api/v3/queue/status/${id}`] as const;
};

export const getGetApiV3QueueStatusIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3QueueStatusId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueStatusId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QueueStatusIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3QueueStatusId>>
  > = ({ signal }) => getApiV3QueueStatusId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3QueueStatusId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3QueueStatusIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3QueueStatusId>>
>;
export type GetApiV3QueueStatusIdQueryError = ErrorType<unknown>;

export function useGetApiV3QueueStatusId<
  TData = Awaited<ReturnType<typeof getApiV3QueueStatusId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueStatusId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3QueueStatusId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QueueStatusId<
  TData = Awaited<ReturnType<typeof getApiV3QueueStatusId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueStatusId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3QueueStatusId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3QueueStatusId<
  TData = Awaited<ReturnType<typeof getApiV3QueueStatusId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueStatusId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3QueueStatusId<
  TData = Awaited<ReturnType<typeof getApiV3QueueStatusId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3QueueStatusId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3QueueStatusIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Release = (releaseResource: ReleaseResource) => {
  return apiInstance<void>({
    url: `/api/v3/release`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: releaseResource,
  });
};

export const getPostApiV3ReleaseMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Release>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Release>>,
  TError,
  { data: ReleaseResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Release>>,
    { data: ReleaseResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Release(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3ReleaseMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Release>>
>;
export type PostApiV3ReleaseMutationBody = ReleaseResource;
export type PostApiV3ReleaseMutationError = ErrorType<unknown>;

export const usePostApiV3Release = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Release>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Release>>,
  TError,
  { data: ReleaseResource },
  TContext
> => {
  const mutationOptions = getPostApiV3ReleaseMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Release = (
  params?: GetApiV3ReleaseParams,
  signal?: AbortSignal
) => {
  return apiInstance<ReleaseResource[]>({
    url: `/api/v3/release`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3ReleaseQueryKey = (params?: GetApiV3ReleaseParams) => {
  return [`/api/v3/release`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3ReleaseQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Release>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ReleaseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Release>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ReleaseQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Release>>> = ({
    signal,
  }) => getApiV3Release(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Release>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ReleaseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Release>>
>;
export type GetApiV3ReleaseQueryError = ErrorType<unknown>;

export function useGetApiV3Release<
  TData = Awaited<ReturnType<typeof getApiV3Release>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3ReleaseParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Release>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Release>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Release<
  TData = Awaited<ReturnType<typeof getApiV3Release>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ReleaseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Release>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Release>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Release<
  TData = Awaited<ReturnType<typeof getApiV3Release>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ReleaseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Release>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Release<
  TData = Awaited<ReturnType<typeof getApiV3Release>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3ReleaseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3Release>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ReleaseQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3ReleaseId = (id: number, signal?: AbortSignal) => {
  return apiInstance<ReleaseResource>({
    url: `/api/v3/release/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ReleaseIdQueryKey = (id: number) => {
  return [`/api/v3/release/${id}`] as const;
};

export const getGetApiV3ReleaseIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ReleaseId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ReleaseId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ReleaseIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ReleaseId>>
  > = ({ signal }) => getApiV3ReleaseId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ReleaseId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ReleaseIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ReleaseId>>
>;
export type GetApiV3ReleaseIdQueryError = ErrorType<unknown>;

export function useGetApiV3ReleaseId<
  TData = Awaited<ReturnType<typeof getApiV3ReleaseId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ReleaseId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ReleaseId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ReleaseId<
  TData = Awaited<ReturnType<typeof getApiV3ReleaseId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ReleaseId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ReleaseId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ReleaseId<
  TData = Awaited<ReturnType<typeof getApiV3ReleaseId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ReleaseId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ReleaseId<
  TData = Awaited<ReturnType<typeof getApiV3ReleaseId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ReleaseId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ReleaseIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3ReleasePush = (releaseResource: ReleaseResource) => {
  return apiInstance<ReleaseResource[]>({
    url: `/api/v3/release/push`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: releaseResource,
  });
};

export const getPostApiV3ReleasePushMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ReleasePush>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3ReleasePush>>,
  TError,
  { data: ReleaseResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3ReleasePush>>,
    { data: ReleaseResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3ReleasePush(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3ReleasePushMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3ReleasePush>>
>;
export type PostApiV3ReleasePushMutationBody = ReleaseResource;
export type PostApiV3ReleasePushMutationError = ErrorType<unknown>;

export const usePostApiV3ReleasePush = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ReleasePush>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3ReleasePush>>,
  TError,
  { data: ReleaseResource },
  TContext
> => {
  const mutationOptions = getPostApiV3ReleasePushMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ReleasePushId = (id: number, signal?: AbortSignal) => {
  return apiInstance<ReleaseResource>({
    url: `/api/v3/release/push/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ReleasePushIdQueryKey = (id: number) => {
  return [`/api/v3/release/push/${id}`] as const;
};

export const getGetApiV3ReleasePushIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ReleasePushId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ReleasePushId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ReleasePushIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ReleasePushId>>
  > = ({ signal }) => getApiV3ReleasePushId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ReleasePushId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ReleasePushIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ReleasePushId>>
>;
export type GetApiV3ReleasePushIdQueryError = ErrorType<unknown>;

export function useGetApiV3ReleasePushId<
  TData = Awaited<ReturnType<typeof getApiV3ReleasePushId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ReleasePushId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ReleasePushId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ReleasePushId<
  TData = Awaited<ReturnType<typeof getApiV3ReleasePushId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ReleasePushId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ReleasePushId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ReleasePushId<
  TData = Awaited<ReturnType<typeof getApiV3ReleasePushId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ReleasePushId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ReleasePushId<
  TData = Awaited<ReturnType<typeof getApiV3ReleasePushId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ReleasePushId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ReleasePushIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Remotepathmapping = (
  remotePathMappingResource: RemotePathMappingResource
) => {
  return apiInstance<RemotePathMappingResource>({
    url: `/api/v3/remotepathmapping`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: remotePathMappingResource,
  });
};

export const getPostApiV3RemotepathmappingMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Remotepathmapping>>,
    TError,
    { data: RemotePathMappingResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Remotepathmapping>>,
  TError,
  { data: RemotePathMappingResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Remotepathmapping>>,
    { data: RemotePathMappingResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Remotepathmapping(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3RemotepathmappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Remotepathmapping>>
>;
export type PostApiV3RemotepathmappingMutationBody = RemotePathMappingResource;
export type PostApiV3RemotepathmappingMutationError = ErrorType<unknown>;

export const usePostApiV3Remotepathmapping = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Remotepathmapping>>,
    TError,
    { data: RemotePathMappingResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Remotepathmapping>>,
  TError,
  { data: RemotePathMappingResource },
  TContext
> => {
  const mutationOptions = getPostApiV3RemotepathmappingMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Remotepathmapping = (signal?: AbortSignal) => {
  return apiInstance<RemotePathMappingResource[]>({
    url: `/api/v3/remotepathmapping`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3RemotepathmappingQueryKey = () => {
  return [`/api/v3/remotepathmapping`] as const;
};

export const getGetApiV3RemotepathmappingQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3RemotepathmappingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Remotepathmapping>>
  > = ({ signal }) => getApiV3Remotepathmapping(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3RemotepathmappingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Remotepathmapping>>
>;
export type GetApiV3RemotepathmappingQueryError = ErrorType<unknown>;

export function useGetApiV3Remotepathmapping<
  TData = Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Remotepathmapping<
  TData = Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Remotepathmapping<
  TData = Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Remotepathmapping<
  TData = Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3RemotepathmappingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV3RemotepathmappingId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/remotepathmapping/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3RemotepathmappingIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3RemotepathmappingId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3RemotepathmappingId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3RemotepathmappingId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3RemotepathmappingId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3RemotepathmappingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3RemotepathmappingId>>
>;

export type DeleteApiV3RemotepathmappingIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3RemotepathmappingId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3RemotepathmappingId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3RemotepathmappingId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV3RemotepathmappingIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3RemotepathmappingId = (
  id: string,
  remotePathMappingResource: RemotePathMappingResource
) => {
  return apiInstance<RemotePathMappingResource>({
    url: `/api/v3/remotepathmapping/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: remotePathMappingResource,
  });
};

export const getPutApiV3RemotepathmappingIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3RemotepathmappingId>>,
    TError,
    { id: string; data: RemotePathMappingResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3RemotepathmappingId>>,
  TError,
  { id: string; data: RemotePathMappingResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3RemotepathmappingId>>,
    { id: string; data: RemotePathMappingResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3RemotepathmappingId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3RemotepathmappingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3RemotepathmappingId>>
>;
export type PutApiV3RemotepathmappingIdMutationBody = RemotePathMappingResource;
export type PutApiV3RemotepathmappingIdMutationError = ErrorType<unknown>;

export const usePutApiV3RemotepathmappingId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3RemotepathmappingId>>,
    TError,
    { id: string; data: RemotePathMappingResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3RemotepathmappingId>>,
  TError,
  { id: string; data: RemotePathMappingResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV3RemotepathmappingIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3RemotepathmappingId = (
  id: number,
  signal?: AbortSignal
) => {
  return apiInstance<RemotePathMappingResource>({
    url: `/api/v3/remotepathmapping/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3RemotepathmappingIdQueryKey = (id: number) => {
  return [`/api/v3/remotepathmapping/${id}`] as const;
};

export const getGetApiV3RemotepathmappingIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3RemotepathmappingIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>
  > = ({ signal }) => getApiV3RemotepathmappingId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3RemotepathmappingIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>
>;
export type GetApiV3RemotepathmappingIdQueryError = ErrorType<unknown>;

export function useGetApiV3RemotepathmappingId<
  TData = Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3RemotepathmappingId<
  TData = Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3RemotepathmappingId<
  TData = Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3RemotepathmappingId<
  TData = Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3RemotepathmappingIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Rename = (
  params?: GetApiV3RenameParams,
  signal?: AbortSignal
) => {
  return apiInstance<RenameMovieResource[]>({
    url: `/api/v3/rename`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV3RenameQueryKey = (params?: GetApiV3RenameParams) => {
  return [`/api/v3/rename`, ...(params ? [params] : [])] as const;
};

export const getGetApiV3RenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Rename>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3RenameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Rename>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3RenameQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Rename>>> = ({
    signal,
  }) => getApiV3Rename(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Rename>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3RenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Rename>>
>;
export type GetApiV3RenameQueryError = ErrorType<unknown>;

export function useGetApiV3Rename<
  TData = Awaited<ReturnType<typeof getApiV3Rename>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV3RenameParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Rename>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Rename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Rename<
  TData = Awaited<ReturnType<typeof getApiV3Rename>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3RenameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Rename>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3Rename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Rename<
  TData = Awaited<ReturnType<typeof getApiV3Rename>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3RenameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Rename>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Rename<
  TData = Awaited<ReturnType<typeof getApiV3Rename>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV3RenameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3Rename>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3RenameQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Restriction = (signal?: AbortSignal) => {
  return apiInstance<RestrictionResource[]>({
    url: `/api/v3/restriction`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3RestrictionQueryKey = () => {
  return [`/api/v3/restriction`] as const;
};

export const getGetApiV3RestrictionQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Restriction>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Restriction>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3RestrictionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Restriction>>
  > = ({ signal }) => getApiV3Restriction(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Restriction>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3RestrictionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Restriction>>
>;
export type GetApiV3RestrictionQueryError = ErrorType<unknown>;

export function useGetApiV3Restriction<
  TData = Awaited<ReturnType<typeof getApiV3Restriction>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Restriction>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Restriction>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Restriction<
  TData = Awaited<ReturnType<typeof getApiV3Restriction>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Restriction>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Restriction>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Restriction<
  TData = Awaited<ReturnType<typeof getApiV3Restriction>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Restriction>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Restriction<
  TData = Awaited<ReturnType<typeof getApiV3Restriction>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Restriction>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3RestrictionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Restriction = (
  restrictionResource: RestrictionResource
) => {
  return apiInstance<RestrictionResource>({
    url: `/api/v3/restriction`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: restrictionResource,
  });
};

export const getPostApiV3RestrictionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Restriction>>,
    TError,
    { data: RestrictionResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Restriction>>,
  TError,
  { data: RestrictionResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Restriction>>,
    { data: RestrictionResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Restriction(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3RestrictionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Restriction>>
>;
export type PostApiV3RestrictionMutationBody = RestrictionResource;
export type PostApiV3RestrictionMutationError = ErrorType<unknown>;

export const usePostApiV3Restriction = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Restriction>>,
    TError,
    { data: RestrictionResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Restriction>>,
  TError,
  { data: RestrictionResource },
  TContext
> => {
  const mutationOptions = getPostApiV3RestrictionMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3RestrictionId = (
  id: string,
  restrictionResource: RestrictionResource
) => {
  return apiInstance<RestrictionResource>({
    url: `/api/v3/restriction/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: restrictionResource,
  });
};

export const getPutApiV3RestrictionIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3RestrictionId>>,
    TError,
    { id: string; data: RestrictionResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3RestrictionId>>,
  TError,
  { id: string; data: RestrictionResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3RestrictionId>>,
    { id: string; data: RestrictionResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3RestrictionId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3RestrictionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3RestrictionId>>
>;
export type PutApiV3RestrictionIdMutationBody = RestrictionResource;
export type PutApiV3RestrictionIdMutationError = ErrorType<unknown>;

export const usePutApiV3RestrictionId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3RestrictionId>>,
    TError,
    { id: string; data: RestrictionResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3RestrictionId>>,
  TError,
  { id: string; data: RestrictionResource },
  TContext
> => {
  const mutationOptions = getPutApiV3RestrictionIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3RestrictionId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/restriction/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3RestrictionIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3RestrictionId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3RestrictionId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3RestrictionId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3RestrictionId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3RestrictionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3RestrictionId>>
>;

export type DeleteApiV3RestrictionIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3RestrictionId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3RestrictionId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3RestrictionId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3RestrictionIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3RestrictionId = (id: number, signal?: AbortSignal) => {
  return apiInstance<RestrictionResource>({
    url: `/api/v3/restriction/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3RestrictionIdQueryKey = (id: number) => {
  return [`/api/v3/restriction/${id}`] as const;
};

export const getGetApiV3RestrictionIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3RestrictionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RestrictionId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3RestrictionIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3RestrictionId>>
  > = ({ signal }) => getApiV3RestrictionId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3RestrictionId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3RestrictionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3RestrictionId>>
>;
export type GetApiV3RestrictionIdQueryError = ErrorType<unknown>;

export function useGetApiV3RestrictionId<
  TData = Awaited<ReturnType<typeof getApiV3RestrictionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RestrictionId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3RestrictionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3RestrictionId<
  TData = Awaited<ReturnType<typeof getApiV3RestrictionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RestrictionId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3RestrictionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3RestrictionId<
  TData = Awaited<ReturnType<typeof getApiV3RestrictionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RestrictionId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3RestrictionId<
  TData = Awaited<ReturnType<typeof getApiV3RestrictionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RestrictionId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3RestrictionIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Rootfolder = (rootFolderResource: RootFolderResource) => {
  return apiInstance<RootFolderResource>({
    url: `/api/v3/rootfolder`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: rootFolderResource,
  });
};

export const getPostApiV3RootfolderMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Rootfolder>>,
    TError,
    { data: RootFolderResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Rootfolder>>,
  TError,
  { data: RootFolderResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Rootfolder>>,
    { data: RootFolderResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Rootfolder(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3RootfolderMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Rootfolder>>
>;
export type PostApiV3RootfolderMutationBody = RootFolderResource;
export type PostApiV3RootfolderMutationError = ErrorType<unknown>;

export const usePostApiV3Rootfolder = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Rootfolder>>,
    TError,
    { data: RootFolderResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Rootfolder>>,
  TError,
  { data: RootFolderResource },
  TContext
> => {
  const mutationOptions = getPostApiV3RootfolderMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Rootfolder = (signal?: AbortSignal) => {
  return apiInstance<RootFolderResource[]>({
    url: `/api/v3/rootfolder`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3RootfolderQueryKey = () => {
  return [`/api/v3/rootfolder`] as const;
};

export const getGetApiV3RootfolderQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Rootfolder>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Rootfolder>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3RootfolderQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Rootfolder>>
  > = ({ signal }) => getApiV3Rootfolder(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Rootfolder>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3RootfolderQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Rootfolder>>
>;
export type GetApiV3RootfolderQueryError = ErrorType<unknown>;

export function useGetApiV3Rootfolder<
  TData = Awaited<ReturnType<typeof getApiV3Rootfolder>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Rootfolder>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Rootfolder>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Rootfolder<
  TData = Awaited<ReturnType<typeof getApiV3Rootfolder>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Rootfolder>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Rootfolder>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Rootfolder<
  TData = Awaited<ReturnType<typeof getApiV3Rootfolder>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Rootfolder>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Rootfolder<
  TData = Awaited<ReturnType<typeof getApiV3Rootfolder>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Rootfolder>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3RootfolderQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV3RootfolderId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/rootfolder/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV3RootfolderIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3RootfolderId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3RootfolderId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3RootfolderId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3RootfolderId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3RootfolderIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3RootfolderId>>
>;

export type DeleteApiV3RootfolderIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3RootfolderId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3RootfolderId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3RootfolderId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3RootfolderIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3RootfolderId = (id: number, signal?: AbortSignal) => {
  return apiInstance<RootFolderResource>({
    url: `/api/v3/rootfolder/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3RootfolderIdQueryKey = (id: number) => {
  return [`/api/v3/rootfolder/${id}`] as const;
};

export const getGetApiV3RootfolderIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3RootfolderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RootfolderId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3RootfolderIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3RootfolderId>>
  > = ({ signal }) => getApiV3RootfolderId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3RootfolderId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3RootfolderIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3RootfolderId>>
>;
export type GetApiV3RootfolderIdQueryError = ErrorType<unknown>;

export function useGetApiV3RootfolderId<
  TData = Awaited<ReturnType<typeof getApiV3RootfolderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RootfolderId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3RootfolderId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3RootfolderId<
  TData = Awaited<ReturnType<typeof getApiV3RootfolderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RootfolderId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3RootfolderId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3RootfolderId<
  TData = Awaited<ReturnType<typeof getApiV3RootfolderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RootfolderId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3RootfolderId<
  TData = Awaited<ReturnType<typeof getApiV3RootfolderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3RootfolderId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3RootfolderIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getContentPath = (path: string, signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/content/${path}`, method: "GET", signal });
};

export const getGetContentPathQueryKey = (path: string) => {
  return [`/content/${path}`] as const;
};

export const getGetContentPathQueryOptions = <
  TData = Awaited<ReturnType<typeof getContentPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentPath>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetContentPathQueryKey(path);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentPath>>> = ({
    signal,
  }) => getContentPath(path, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!path,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getContentPath>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetContentPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContentPath>>
>;
export type GetContentPathQueryError = ErrorType<unknown>;

export function useGetContentPath<
  TData = Awaited<ReturnType<typeof getContentPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentPath>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentPath>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetContentPath<
  TData = Awaited<ReturnType<typeof getContentPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentPath>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentPath>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetContentPath<
  TData = Awaited<ReturnType<typeof getContentPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentPath>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetContentPath<
  TData = Awaited<ReturnType<typeof getContentPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentPath>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetContentPathQueryOptions(path, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const get = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/`, method: "GET", signal });
};

export const getGetQueryKey = () => {
  return [`/`] as const;
};

export const getGetQueryOptions = <
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({
    signal,
  }) => get(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof get>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>;
export type GetQueryError = ErrorType<unknown>;

export function useGet<
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof get>>, TError, TData>,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGet<
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof get>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGet<
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGet<
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPath = (path: string, signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/${path}`, method: "GET", signal });
};

export const getGetPathQueryKey = (path: string) => {
  return [`/${path}`] as const;
};

export const getGetPathQueryOptions = <
  TData = Awaited<ReturnType<typeof getPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPathQueryKey(path);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPath>>> = ({
    signal,
  }) => getPath(path, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!path,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPath>>
>;
export type GetPathQueryError = ErrorType<unknown>;

export function useGetPath<
  TData = Awaited<ReturnType<typeof getPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPath>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPath<
  TData = Awaited<ReturnType<typeof getPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPath>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPath<
  TData = Awaited<ReturnType<typeof getPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetPath<
  TData = Awaited<ReturnType<typeof getPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPathQueryOptions(path, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3SystemStatus = (signal?: AbortSignal) => {
  return apiInstance<SystemResource>({
    url: `/api/v3/system/status`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3SystemStatusQueryKey = () => {
  return [`/api/v3/system/status`] as const;
};

export const getGetApiV3SystemStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3SystemStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemStatus>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3SystemStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SystemStatus>>
  > = ({ signal }) => getApiV3SystemStatus(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3SystemStatus>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3SystemStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SystemStatus>>
>;
export type GetApiV3SystemStatusQueryError = ErrorType<unknown>;

export function useGetApiV3SystemStatus<
  TData = Awaited<ReturnType<typeof getApiV3SystemStatus>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemStatus>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3SystemStatus>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3SystemStatus<
  TData = Awaited<ReturnType<typeof getApiV3SystemStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemStatus>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3SystemStatus>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3SystemStatus<
  TData = Awaited<ReturnType<typeof getApiV3SystemStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemStatus>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3SystemStatus<
  TData = Awaited<ReturnType<typeof getApiV3SystemStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemStatus>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3SystemStatusQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3SystemRoutes = (signal?: AbortSignal) => {
  return apiInstance<void>({
    url: `/api/v3/system/routes`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3SystemRoutesQueryKey = () => {
  return [`/api/v3/system/routes`] as const;
};

export const getGetApiV3SystemRoutesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3SystemRoutesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SystemRoutes>>
  > = ({ signal }) => getApiV3SystemRoutes(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3SystemRoutesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SystemRoutes>>
>;
export type GetApiV3SystemRoutesQueryError = ErrorType<unknown>;

export function useGetApiV3SystemRoutes<
  TData = Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3SystemRoutes<
  TData = Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3SystemRoutes<
  TData = Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3SystemRoutes<
  TData = Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3SystemRoutesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3SystemRoutesDuplicate = (signal?: AbortSignal) => {
  return apiInstance<void>({
    url: `/api/v3/system/routes/duplicate`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3SystemRoutesDuplicateQueryKey = () => {
  return [`/api/v3/system/routes/duplicate`] as const;
};

export const getGetApiV3SystemRoutesDuplicateQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3SystemRoutesDuplicateQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>
  > = ({ signal }) => getApiV3SystemRoutesDuplicate(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3SystemRoutesDuplicateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>
>;
export type GetApiV3SystemRoutesDuplicateQueryError = ErrorType<unknown>;

export function useGetApiV3SystemRoutesDuplicate<
  TData = Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3SystemRoutesDuplicate<
  TData = Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3SystemRoutesDuplicate<
  TData = Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3SystemRoutesDuplicate<
  TData = Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3SystemRoutesDuplicateQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3SystemShutdown = () => {
  return apiInstance<void>({ url: `/api/v3/system/shutdown`, method: "POST" });
};

export const getPostApiV3SystemShutdownMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3SystemShutdown>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3SystemShutdown>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3SystemShutdown>>,
    void
  > = () => {
    return postApiV3SystemShutdown();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3SystemShutdownMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3SystemShutdown>>
>;

export type PostApiV3SystemShutdownMutationError = ErrorType<unknown>;

export const usePostApiV3SystemShutdown = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3SystemShutdown>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3SystemShutdown>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV3SystemShutdownMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV3SystemRestart = () => {
  return apiInstance<void>({ url: `/api/v3/system/restart`, method: "POST" });
};

export const getPostApiV3SystemRestartMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3SystemRestart>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3SystemRestart>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3SystemRestart>>,
    void
  > = () => {
    return postApiV3SystemRestart();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3SystemRestartMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3SystemRestart>>
>;

export type PostApiV3SystemRestartMutationError = ErrorType<unknown>;

export const usePostApiV3SystemRestart = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3SystemRestart>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3SystemRestart>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV3SystemRestartMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3Tag = (signal?: AbortSignal) => {
  return apiInstance<TagResource[]>({
    url: `/api/v3/tag`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3TagQueryKey = () => {
  return [`/api/v3/tag`] as const;
};

export const getGetApiV3TagQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Tag>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Tag>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3TagQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Tag>>> = ({
    signal,
  }) => getApiV3Tag(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Tag>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3TagQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Tag>>
>;
export type GetApiV3TagQueryError = ErrorType<unknown>;

export function useGetApiV3Tag<
  TData = Awaited<ReturnType<typeof getApiV3Tag>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Tag>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Tag>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Tag<
  TData = Awaited<ReturnType<typeof getApiV3Tag>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Tag>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Tag>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Tag<
  TData = Awaited<ReturnType<typeof getApiV3Tag>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Tag>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Tag<
  TData = Awaited<ReturnType<typeof getApiV3Tag>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Tag>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3TagQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV3Tag = (tagResource: TagResource) => {
  return apiInstance<TagResource>({
    url: `/api/v3/tag`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: tagResource,
  });
};

export const getPostApiV3TagMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Tag>>,
    TError,
    { data: TagResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV3Tag>>,
  TError,
  { data: TagResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Tag>>,
    { data: TagResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Tag(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV3TagMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Tag>>
>;
export type PostApiV3TagMutationBody = TagResource;
export type PostApiV3TagMutationError = ErrorType<unknown>;

export const usePostApiV3Tag = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Tag>>,
    TError,
    { data: TagResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV3Tag>>,
  TError,
  { data: TagResource },
  TContext
> => {
  const mutationOptions = getPostApiV3TagMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV3TagId = (id: string, tagResource: TagResource) => {
  return apiInstance<TagResource>({
    url: `/api/v3/tag/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: tagResource,
  });
};

export const getPutApiV3TagIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3TagId>>,
    TError,
    { id: string; data: TagResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3TagId>>,
  TError,
  { id: string; data: TagResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3TagId>>,
    { id: string; data: TagResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3TagId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3TagIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3TagId>>
>;
export type PutApiV3TagIdMutationBody = TagResource;
export type PutApiV3TagIdMutationError = ErrorType<unknown>;

export const usePutApiV3TagId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3TagId>>,
    TError,
    { id: string; data: TagResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3TagId>>,
  TError,
  { id: string; data: TagResource },
  TContext
> => {
  const mutationOptions = getPutApiV3TagIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV3TagId = (id: number) => {
  return apiInstance<void>({ url: `/api/v3/tag/${id}`, method: "DELETE" });
};

export const getDeleteApiV3TagIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3TagId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV3TagId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3TagId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3TagId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV3TagIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3TagId>>
>;

export type DeleteApiV3TagIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3TagId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3TagId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV3TagId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV3TagIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3TagId = (id: number, signal?: AbortSignal) => {
  return apiInstance<TagResource>({
    url: `/api/v3/tag/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3TagIdQueryKey = (id: number) => {
  return [`/api/v3/tag/${id}`] as const;
};

export const getGetApiV3TagIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3TagId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3TagId>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3TagIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3TagId>>> = ({
    signal,
  }) => getApiV3TagId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3TagId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3TagIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3TagId>>
>;
export type GetApiV3TagIdQueryError = ErrorType<unknown>;

export function useGetApiV3TagId<
  TData = Awaited<ReturnType<typeof getApiV3TagId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3TagId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3TagId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3TagId<
  TData = Awaited<ReturnType<typeof getApiV3TagId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3TagId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3TagId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3TagId<
  TData = Awaited<ReturnType<typeof getApiV3TagId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3TagId>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3TagId<
  TData = Awaited<ReturnType<typeof getApiV3TagId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV3TagId>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3TagIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3TagDetail = (signal?: AbortSignal) => {
  return apiInstance<TagDetailsResource[]>({
    url: `/api/v3/tag/detail`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3TagDetailQueryKey = () => {
  return [`/api/v3/tag/detail`] as const;
};

export const getGetApiV3TagDetailQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3TagDetail>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3TagDetail>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3TagDetailQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3TagDetail>>
  > = ({ signal }) => getApiV3TagDetail(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3TagDetail>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3TagDetailQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3TagDetail>>
>;
export type GetApiV3TagDetailQueryError = ErrorType<unknown>;

export function useGetApiV3TagDetail<
  TData = Awaited<ReturnType<typeof getApiV3TagDetail>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3TagDetail>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3TagDetail>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3TagDetail<
  TData = Awaited<ReturnType<typeof getApiV3TagDetail>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3TagDetail>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3TagDetail>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3TagDetail<
  TData = Awaited<ReturnType<typeof getApiV3TagDetail>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3TagDetail>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3TagDetail<
  TData = Awaited<ReturnType<typeof getApiV3TagDetail>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3TagDetail>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3TagDetailQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3TagDetailId = (id: number, signal?: AbortSignal) => {
  return apiInstance<TagDetailsResource>({
    url: `/api/v3/tag/detail/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3TagDetailIdQueryKey = (id: number) => {
  return [`/api/v3/tag/detail/${id}`] as const;
};

export const getGetApiV3TagDetailIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3TagDetailId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3TagDetailId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3TagDetailIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3TagDetailId>>
  > = ({ signal }) => getApiV3TagDetailId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3TagDetailId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3TagDetailIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3TagDetailId>>
>;
export type GetApiV3TagDetailIdQueryError = ErrorType<unknown>;

export function useGetApiV3TagDetailId<
  TData = Awaited<ReturnType<typeof getApiV3TagDetailId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3TagDetailId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3TagDetailId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3TagDetailId<
  TData = Awaited<ReturnType<typeof getApiV3TagDetailId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3TagDetailId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3TagDetailId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3TagDetailId<
  TData = Awaited<ReturnType<typeof getApiV3TagDetailId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3TagDetailId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3TagDetailId<
  TData = Awaited<ReturnType<typeof getApiV3TagDetailId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3TagDetailId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3TagDetailIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3SystemTask = (signal?: AbortSignal) => {
  return apiInstance<TaskResource[]>({
    url: `/api/v3/system/task`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3SystemTaskQueryKey = () => {
  return [`/api/v3/system/task`] as const;
};

export const getGetApiV3SystemTaskQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3SystemTask>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemTask>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3SystemTaskQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SystemTask>>
  > = ({ signal }) => getApiV3SystemTask(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3SystemTask>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3SystemTaskQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SystemTask>>
>;
export type GetApiV3SystemTaskQueryError = ErrorType<unknown>;

export function useGetApiV3SystemTask<
  TData = Awaited<ReturnType<typeof getApiV3SystemTask>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemTask>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3SystemTask>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3SystemTask<
  TData = Awaited<ReturnType<typeof getApiV3SystemTask>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemTask>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3SystemTask>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3SystemTask<
  TData = Awaited<ReturnType<typeof getApiV3SystemTask>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemTask>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3SystemTask<
  TData = Awaited<ReturnType<typeof getApiV3SystemTask>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemTask>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3SystemTaskQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3SystemTaskId = (id: number, signal?: AbortSignal) => {
  return apiInstance<TaskResource>({
    url: `/api/v3/system/task/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3SystemTaskIdQueryKey = (id: number) => {
  return [`/api/v3/system/task/${id}`] as const;
};

export const getGetApiV3SystemTaskIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3SystemTaskIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SystemTaskId>>
  > = ({ signal }) => getApiV3SystemTaskId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3SystemTaskIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SystemTaskId>>
>;
export type GetApiV3SystemTaskIdQueryError = ErrorType<unknown>;

export function useGetApiV3SystemTaskId<
  TData = Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3SystemTaskId<
  TData = Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3SystemTaskId<
  TData = Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3SystemTaskId<
  TData = Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3SystemTaskIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV3ConfigUiId = (
  id: string,
  uiConfigResource: UiConfigResource
) => {
  return apiInstance<UiConfigResource>({
    url: `/api/v3/config/ui/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: uiConfigResource,
  });
};

export const getPutApiV3ConfigUiIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigUiId>>,
    TError,
    { id: string; data: UiConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV3ConfigUiId>>,
  TError,
  { id: string; data: UiConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigUiId>>,
    { id: string; data: UiConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigUiId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV3ConfigUiIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigUiId>>
>;
export type PutApiV3ConfigUiIdMutationBody = UiConfigResource;
export type PutApiV3ConfigUiIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigUiId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigUiId>>,
    TError,
    { id: string; data: UiConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV3ConfigUiId>>,
  TError,
  { id: string; data: UiConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV3ConfigUiIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV3ConfigUiId = (id: number, signal?: AbortSignal) => {
  return apiInstance<UiConfigResource>({
    url: `/api/v3/config/ui/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigUiIdQueryKey = (id: number) => {
  return [`/api/v3/config/ui/${id}`] as const;
};

export const getGetApiV3ConfigUiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ConfigUiIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigUiId>>
  > = ({ signal }) => getApiV3ConfigUiId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigUiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigUiId>>
>;
export type GetApiV3ConfigUiIdQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigUiId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigUiId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigUiId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigUiId<
  TData = Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigUiIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3ConfigUi = (signal?: AbortSignal) => {
  return apiInstance<UiConfigResource>({
    url: `/api/v3/config/ui`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3ConfigUiQueryKey = () => {
  return [`/api/v3/config/ui`] as const;
};

export const getGetApiV3ConfigUiQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigUi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3ConfigUi>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ConfigUiQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigUi>>
  > = ({ signal }) => getApiV3ConfigUi(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigUi>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3ConfigUiQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigUi>>
>;
export type GetApiV3ConfigUiQueryError = ErrorType<unknown>;

export function useGetApiV3ConfigUi<
  TData = Awaited<ReturnType<typeof getApiV3ConfigUi>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3ConfigUi>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigUi>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigUi<
  TData = Awaited<ReturnType<typeof getApiV3ConfigUi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3ConfigUi>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3ConfigUi>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3ConfigUi<
  TData = Awaited<ReturnType<typeof getApiV3ConfigUi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3ConfigUi>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3ConfigUi<
  TData = Awaited<ReturnType<typeof getApiV3ConfigUi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3ConfigUi>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3ConfigUiQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3Update = (signal?: AbortSignal) => {
  return apiInstance<UpdateResource[]>({
    url: `/api/v3/update`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3UpdateQueryKey = () => {
  return [`/api/v3/update`] as const;
};

export const getGetApiV3UpdateQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3Update>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Update>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3UpdateQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Update>>> = ({
    signal,
  }) => getApiV3Update(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Update>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3UpdateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Update>>
>;
export type GetApiV3UpdateQueryError = ErrorType<unknown>;

export function useGetApiV3Update<
  TData = Awaited<ReturnType<typeof getApiV3Update>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Update>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Update>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Update<
  TData = Awaited<ReturnType<typeof getApiV3Update>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Update>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3Update>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3Update<
  TData = Awaited<ReturnType<typeof getApiV3Update>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Update>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3Update<
  TData = Awaited<ReturnType<typeof getApiV3Update>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV3Update>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3UpdateQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3LogFileUpdate = (signal?: AbortSignal) => {
  return apiInstance<LogFileResource[]>({
    url: `/api/v3/log/file/update`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3LogFileUpdateQueryKey = () => {
  return [`/api/v3/log/file/update`] as const;
};

export const getGetApiV3LogFileUpdateQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3LogFileUpdateQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3LogFileUpdate>>
  > = ({ signal }) => getApiV3LogFileUpdate(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3LogFileUpdateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LogFileUpdate>>
>;
export type GetApiV3LogFileUpdateQueryError = ErrorType<unknown>;

export function useGetApiV3LogFileUpdate<
  TData = Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3LogFileUpdate<
  TData = Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3LogFileUpdate<
  TData = Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3LogFileUpdate<
  TData = Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3LogFileUpdateQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV3LogFileUpdateFilename = (
  filename: string,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v3/log/file/update/${filename}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV3LogFileUpdateFilenameQueryKey = (filename: string) => {
  return [`/api/v3/log/file/update/${filename}`] as const;
};

export const getGetApiV3LogFileUpdateFilenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV3LogFileUpdateFilenameQueryKey(filename);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>
  > = ({ signal }) => getApiV3LogFileUpdateFilename(filename, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!filename,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV3LogFileUpdateFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>
>;
export type GetApiV3LogFileUpdateFilenameQueryError = ErrorType<unknown>;

export function useGetApiV3LogFileUpdateFilename<
  TData = Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3LogFileUpdateFilename<
  TData = Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV3LogFileUpdateFilename<
  TData = Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV3LogFileUpdateFilename<
  TData = Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV3LogFileUpdateFilenameQueryOptions(
    filename,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
