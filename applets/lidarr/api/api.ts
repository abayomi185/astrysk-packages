/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Lidarr
 * Lidarr API docs
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  AlbumResource,
  AlbumResourcePagingResource,
  AlbumStudioResource,
  AlbumsMonitoredResource,
  ArtistEditorResource,
  ArtistResource,
  BackupResource,
  BlocklistBulkResource,
  BlocklistResourcePagingResource,
  CommandResource,
  CustomFilterResource,
  CustomFormatResource,
  DelayProfileResource,
  DeleteApiV1AlbumIdParams,
  DeleteApiV1ArtistIdParams,
  DeleteApiV1QueueBulkParams,
  DeleteApiV1QueueIdParams,
  DiskSpaceResource,
  DownloadClientBulkResource,
  DownloadClientConfigResource,
  DownloadClientResource,
  GetApiV1AlbumLookupParams,
  GetApiV1AlbumParams,
  GetApiV1ArtistLookupParams,
  GetApiV1ArtistParams,
  GetApiV1CalendarParams,
  GetApiV1ConfigNamingExamplesParams,
  GetApiV1FilesystemMediafilesParams,
  GetApiV1FilesystemParams,
  GetApiV1FilesystemTypeParams,
  GetApiV1HistoryArtistParams,
  GetApiV1HistoryParams,
  GetApiV1HistorySinceParams,
  GetApiV1ManualimportParams,
  GetApiV1ParseParams,
  GetApiV1QueueDetailsParams,
  GetApiV1QueueParams,
  GetApiV1ReleaseParams,
  GetApiV1RenameParams,
  GetApiV1RetagParams,
  GetApiV1SearchParams,
  GetApiV1TrackParams,
  GetApiV1TrackfileParams,
  GetApiV1WantedCutoffParams,
  GetApiV1WantedMissingParams,
  GetFeedV1CalendarLidarrIcsParams,
  HealthResource,
  HistoryResource,
  HistoryResourcePagingResource,
  HostConfigResource,
  ImportListBulkResource,
  ImportListExclusionResource,
  ImportListResource,
  IndexerBulkResource,
  IndexerConfigResource,
  IndexerResource,
  LanguageResource,
  LocalizationResource,
  LogFileResource,
  LogResourcePagingResource,
  ManualImportResource,
  ManualImportUpdateResource,
  MediaManagementConfigResource,
  MetadataProfileResource,
  MetadataProviderConfigResource,
  MetadataResource,
  NamingConfigResource,
  NotificationResource,
  ParseResource,
  PingResource,
  PostApiV1DownloadclientParams,
  PostApiV1ImportlistParams,
  PostApiV1IndexerParams,
  PostApiV1MetadataParams,
  PostApiV1NotificationParams,
  PostLoginBody,
  PostLoginParams,
  PutApiV1ArtistIdParams,
  PutApiV1DelayprofileReorderIdParams,
  PutApiV1DownloadclientIdParams,
  PutApiV1ImportlistIdParams,
  PutApiV1IndexerIdParams,
  PutApiV1MetadataIdParams,
  PutApiV1NotificationIdParams,
  QualityDefinitionResource,
  QualityProfileResource,
  QueueBulkResource,
  QueueResource,
  QueueResourcePagingResource,
  QueueStatusResource,
  ReleaseProfileResource,
  ReleaseResource,
  RemotePathMappingResource,
  RenameTrackResource,
  RetagTrackResource,
  RootFolderResource,
  SystemResource,
  TagDetailsResource,
  TagResource,
  TaskResource,
  TrackFileListResource,
  TrackFileResource,
  TrackResource,
  UiConfigResource,
  UpdateResource,
} from "./model";
import { apiInstance } from "../../../api/apiInstance";
import type { ErrorType } from "../../../api/apiInstance";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
  T
>() => T extends Y ? 1 : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

export const getApiV1Album = (
  params?: GetApiV1AlbumParams,
  signal?: AbortSignal
) => {
  return apiInstance<AlbumResource[]>({
    url: `/api/v1/album`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1AlbumQueryKey = (params?: GetApiV1AlbumParams) => {
  return [`/api/v1/album`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1AlbumQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Album>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1AlbumParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Album>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1AlbumQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Album>>> = ({
    signal,
  }) => getApiV1Album(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Album>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1AlbumQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Album>>
>;
export type GetApiV1AlbumQueryError = ErrorType<unknown>;

export function useGetApiV1Album<
  TData = Awaited<ReturnType<typeof getApiV1Album>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1AlbumParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Album>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Album>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Album<
  TData = Awaited<ReturnType<typeof getApiV1Album>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1AlbumParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Album>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Album>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Album<
  TData = Awaited<ReturnType<typeof getApiV1Album>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1AlbumParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Album>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Album<
  TData = Awaited<ReturnType<typeof getApiV1Album>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1AlbumParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Album>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1AlbumQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Album = (albumResource: NonReadonly<AlbumResource>) => {
  return apiInstance<AlbumResource>({
    url: `/api/v1/album`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: albumResource,
  });
};

export const getPostApiV1AlbumMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Album>>,
    TError,
    { data: NonReadonly<AlbumResource> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Album>>,
  TError,
  { data: NonReadonly<AlbumResource> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Album>>,
    { data: NonReadonly<AlbumResource> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Album(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1AlbumMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Album>>
>;
export type PostApiV1AlbumMutationBody = NonReadonly<AlbumResource>;
export type PostApiV1AlbumMutationError = ErrorType<unknown>;

export const usePostApiV1Album = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Album>>,
    TError,
    { data: NonReadonly<AlbumResource> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Album>>,
  TError,
  { data: NonReadonly<AlbumResource> },
  TContext
> => {
  const mutationOptions = getPostApiV1AlbumMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1AlbumId = (
  id: string,
  albumResource: NonReadonly<AlbumResource>
) => {
  return apiInstance<AlbumResource>({
    url: `/api/v1/album/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: albumResource,
  });
};

export const getPutApiV1AlbumIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1AlbumId>>,
    TError,
    { id: string; data: NonReadonly<AlbumResource> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1AlbumId>>,
  TError,
  { id: string; data: NonReadonly<AlbumResource> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1AlbumId>>,
    { id: string; data: NonReadonly<AlbumResource> }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1AlbumId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1AlbumIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1AlbumId>>
>;
export type PutApiV1AlbumIdMutationBody = NonReadonly<AlbumResource>;
export type PutApiV1AlbumIdMutationError = ErrorType<unknown>;

export const usePutApiV1AlbumId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1AlbumId>>,
    TError,
    { id: string; data: NonReadonly<AlbumResource> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1AlbumId>>,
  TError,
  { id: string; data: NonReadonly<AlbumResource> },
  TContext
> => {
  const mutationOptions = getPutApiV1AlbumIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1AlbumId = (
  id: number,
  params?: DeleteApiV1AlbumIdParams
) => {
  return apiInstance<void>({
    url: `/api/v1/album/${id}`,
    method: "DELETE",
    params,
  });
};

export const getDeleteApiV1AlbumIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1AlbumId>>,
    TError,
    { id: number; params?: DeleteApiV1AlbumIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1AlbumId>>,
  TError,
  { id: number; params?: DeleteApiV1AlbumIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1AlbumId>>,
    { id: number; params?: DeleteApiV1AlbumIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteApiV1AlbumId(id, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1AlbumIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1AlbumId>>
>;

export type DeleteApiV1AlbumIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1AlbumId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1AlbumId>>,
    TError,
    { id: number; params?: DeleteApiV1AlbumIdParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1AlbumId>>,
  TError,
  { id: number; params?: DeleteApiV1AlbumIdParams },
  TContext
> => {
  const mutationOptions = getDeleteApiV1AlbumIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1AlbumId = (id: number, signal?: AbortSignal) => {
  return apiInstance<AlbumResource>({
    url: `/api/v1/album/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1AlbumIdQueryKey = (id: number) => {
  return [`/api/v1/album/${id}`] as const;
};

export const getGetApiV1AlbumIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1AlbumId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AlbumId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1AlbumIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1AlbumId>>> = ({
    signal,
  }) => getApiV1AlbumId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1AlbumId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1AlbumIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1AlbumId>>
>;
export type GetApiV1AlbumIdQueryError = ErrorType<unknown>;

export function useGetApiV1AlbumId<
  TData = Awaited<ReturnType<typeof getApiV1AlbumId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AlbumId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1AlbumId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1AlbumId<
  TData = Awaited<ReturnType<typeof getApiV1AlbumId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AlbumId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1AlbumId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1AlbumId<
  TData = Awaited<ReturnType<typeof getApiV1AlbumId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AlbumId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1AlbumId<
  TData = Awaited<ReturnType<typeof getApiV1AlbumId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AlbumId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1AlbumIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1AlbumMonitor = (
  albumsMonitoredResource: AlbumsMonitoredResource
) => {
  return apiInstance<void>({
    url: `/api/v1/album/monitor`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: albumsMonitoredResource,
  });
};

export const getPutApiV1AlbumMonitorMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1AlbumMonitor>>,
    TError,
    { data: AlbumsMonitoredResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1AlbumMonitor>>,
  TError,
  { data: AlbumsMonitoredResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1AlbumMonitor>>,
    { data: AlbumsMonitoredResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1AlbumMonitor(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1AlbumMonitorMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1AlbumMonitor>>
>;
export type PutApiV1AlbumMonitorMutationBody = AlbumsMonitoredResource;
export type PutApiV1AlbumMonitorMutationError = ErrorType<unknown>;

export const usePutApiV1AlbumMonitor = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1AlbumMonitor>>,
    TError,
    { data: AlbumsMonitoredResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1AlbumMonitor>>,
  TError,
  { data: AlbumsMonitoredResource },
  TContext
> => {
  const mutationOptions = getPutApiV1AlbumMonitorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1AlbumLookup = (
  params?: GetApiV1AlbumLookupParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v1/album/lookup`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1AlbumLookupQueryKey = (
  params?: GetApiV1AlbumLookupParams
) => {
  return [`/api/v1/album/lookup`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1AlbumLookupQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1AlbumLookup>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1AlbumLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AlbumLookup>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1AlbumLookupQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1AlbumLookup>>
  > = ({ signal }) => getApiV1AlbumLookup(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1AlbumLookup>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1AlbumLookupQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1AlbumLookup>>
>;
export type GetApiV1AlbumLookupQueryError = ErrorType<unknown>;

export function useGetApiV1AlbumLookup<
  TData = Awaited<ReturnType<typeof getApiV1AlbumLookup>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1AlbumLookupParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AlbumLookup>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1AlbumLookup>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1AlbumLookup<
  TData = Awaited<ReturnType<typeof getApiV1AlbumLookup>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1AlbumLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AlbumLookup>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1AlbumLookup>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1AlbumLookup<
  TData = Awaited<ReturnType<typeof getApiV1AlbumLookup>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1AlbumLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AlbumLookup>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1AlbumLookup<
  TData = Awaited<ReturnType<typeof getApiV1AlbumLookup>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1AlbumLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AlbumLookup>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1AlbumLookupQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Albumstudio = (
  albumStudioResource: AlbumStudioResource
) => {
  return apiInstance<void>({
    url: `/api/v1/albumstudio`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: albumStudioResource,
  });
};

export const getPostApiV1AlbumstudioMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Albumstudio>>,
    TError,
    { data: AlbumStudioResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Albumstudio>>,
  TError,
  { data: AlbumStudioResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Albumstudio>>,
    { data: AlbumStudioResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Albumstudio(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1AlbumstudioMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Albumstudio>>
>;
export type PostApiV1AlbumstudioMutationBody = AlbumStudioResource;
export type PostApiV1AlbumstudioMutationError = ErrorType<unknown>;

export const usePostApiV1Albumstudio = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Albumstudio>>,
    TError,
    { data: AlbumStudioResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Albumstudio>>,
  TError,
  { data: AlbumStudioResource },
  TContext
> => {
  const mutationOptions = getPostApiV1AlbumstudioMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApi = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/api`, method: "GET", signal });
};

export const getGetApiQueryKey = () => {
  return [`/api`] as const;
};

export const getGetApiQueryOptions = <
  TData = Awaited<ReturnType<typeof getApi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApi>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApi>>> = ({
    signal,
  }) => getApi(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApi>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiQueryResult = NonNullable<Awaited<ReturnType<typeof getApi>>>;
export type GetApiQueryError = ErrorType<unknown>;

export function useGetApi<
  TData = Awaited<ReturnType<typeof getApi>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApi>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApi>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApi<
  TData = Awaited<ReturnType<typeof getApi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApi>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApi>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApi<
  TData = Awaited<ReturnType<typeof getApi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApi>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApi<
  TData = Awaited<ReturnType<typeof getApi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApi>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1ArtistId = (id: number, signal?: AbortSignal) => {
  return apiInstance<ArtistResource>({
    url: `/api/v1/artist/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ArtistIdQueryKey = (id: number) => {
  return [`/api/v1/artist/${id}`] as const;
};

export const getGetApiV1ArtistIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ArtistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ArtistId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ArtistIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ArtistId>>
  > = ({ signal }) => getApiV1ArtistId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ArtistId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ArtistIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ArtistId>>
>;
export type GetApiV1ArtistIdQueryError = ErrorType<unknown>;

export function useGetApiV1ArtistId<
  TData = Awaited<ReturnType<typeof getApiV1ArtistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ArtistId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ArtistId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ArtistId<
  TData = Awaited<ReturnType<typeof getApiV1ArtistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ArtistId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ArtistId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ArtistId<
  TData = Awaited<ReturnType<typeof getApiV1ArtistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ArtistId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ArtistId<
  TData = Awaited<ReturnType<typeof getApiV1ArtistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ArtistId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ArtistIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1ArtistId = (
  id: string,
  artistResource: NonReadonly<ArtistResource>,
  params?: PutApiV1ArtistIdParams
) => {
  return apiInstance<ArtistResource>({
    url: `/api/v1/artist/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: artistResource,
    params,
  });
};

export const getPutApiV1ArtistIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ArtistId>>,
    TError,
    {
      id: string;
      data: NonReadonly<ArtistResource>;
      params?: PutApiV1ArtistIdParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ArtistId>>,
  TError,
  {
    id: string;
    data: NonReadonly<ArtistResource>;
    params?: PutApiV1ArtistIdParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ArtistId>>,
    {
      id: string;
      data: NonReadonly<ArtistResource>;
      params?: PutApiV1ArtistIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV1ArtistId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ArtistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ArtistId>>
>;
export type PutApiV1ArtistIdMutationBody = NonReadonly<ArtistResource>;
export type PutApiV1ArtistIdMutationError = ErrorType<unknown>;

export const usePutApiV1ArtistId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ArtistId>>,
    TError,
    {
      id: string;
      data: NonReadonly<ArtistResource>;
      params?: PutApiV1ArtistIdParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ArtistId>>,
  TError,
  {
    id: string;
    data: NonReadonly<ArtistResource>;
    params?: PutApiV1ArtistIdParams;
  },
  TContext
> => {
  const mutationOptions = getPutApiV1ArtistIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1ArtistId = (
  id: number,
  params?: DeleteApiV1ArtistIdParams
) => {
  return apiInstance<void>({
    url: `/api/v1/artist/${id}`,
    method: "DELETE",
    params,
  });
};

export const getDeleteApiV1ArtistIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ArtistId>>,
    TError,
    { id: number; params?: DeleteApiV1ArtistIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ArtistId>>,
  TError,
  { id: number; params?: DeleteApiV1ArtistIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ArtistId>>,
    { id: number; params?: DeleteApiV1ArtistIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteApiV1ArtistId(id, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ArtistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ArtistId>>
>;

export type DeleteApiV1ArtistIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1ArtistId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ArtistId>>,
    TError,
    { id: number; params?: DeleteApiV1ArtistIdParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1ArtistId>>,
  TError,
  { id: number; params?: DeleteApiV1ArtistIdParams },
  TContext
> => {
  const mutationOptions = getDeleteApiV1ArtistIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Artist = (
  params?: GetApiV1ArtistParams,
  signal?: AbortSignal
) => {
  return apiInstance<ArtistResource[]>({
    url: `/api/v1/artist`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1ArtistQueryKey = (params?: GetApiV1ArtistParams) => {
  return [`/api/v1/artist`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ArtistQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Artist>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ArtistParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Artist>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ArtistQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Artist>>> = ({
    signal,
  }) => getApiV1Artist(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Artist>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ArtistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Artist>>
>;
export type GetApiV1ArtistQueryError = ErrorType<unknown>;

export function useGetApiV1Artist<
  TData = Awaited<ReturnType<typeof getApiV1Artist>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1ArtistParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Artist>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Artist>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Artist<
  TData = Awaited<ReturnType<typeof getApiV1Artist>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ArtistParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Artist>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Artist>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Artist<
  TData = Awaited<ReturnType<typeof getApiV1Artist>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ArtistParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Artist>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Artist<
  TData = Awaited<ReturnType<typeof getApiV1Artist>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ArtistParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Artist>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ArtistQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Artist = (
  artistResource: NonReadonly<ArtistResource>
) => {
  return apiInstance<ArtistResource>({
    url: `/api/v1/artist`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: artistResource,
  });
};

export const getPostApiV1ArtistMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Artist>>,
    TError,
    { data: NonReadonly<ArtistResource> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Artist>>,
  TError,
  { data: NonReadonly<ArtistResource> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Artist>>,
    { data: NonReadonly<ArtistResource> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Artist(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ArtistMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Artist>>
>;
export type PostApiV1ArtistMutationBody = NonReadonly<ArtistResource>;
export type PostApiV1ArtistMutationError = ErrorType<unknown>;

export const usePostApiV1Artist = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Artist>>,
    TError,
    { data: NonReadonly<ArtistResource> },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Artist>>,
  TError,
  { data: NonReadonly<ArtistResource> },
  TContext
> => {
  const mutationOptions = getPostApiV1ArtistMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1ArtistEditor = (
  artistEditorResource: ArtistEditorResource
) => {
  return apiInstance<void>({
    url: `/api/v1/artist/editor`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: artistEditorResource,
  });
};

export const getPutApiV1ArtistEditorMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ArtistEditor>>,
    TError,
    { data: ArtistEditorResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ArtistEditor>>,
  TError,
  { data: ArtistEditorResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ArtistEditor>>,
    { data: ArtistEditorResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1ArtistEditor(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ArtistEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ArtistEditor>>
>;
export type PutApiV1ArtistEditorMutationBody = ArtistEditorResource;
export type PutApiV1ArtistEditorMutationError = ErrorType<unknown>;

export const usePutApiV1ArtistEditor = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ArtistEditor>>,
    TError,
    { data: ArtistEditorResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ArtistEditor>>,
  TError,
  { data: ArtistEditorResource },
  TContext
> => {
  const mutationOptions = getPutApiV1ArtistEditorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1ArtistEditor = (
  artistEditorResource: ArtistEditorResource
) => {
  return apiInstance<void>({
    url: `/api/v1/artist/editor`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: artistEditorResource,
  });
};

export const getDeleteApiV1ArtistEditorMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ArtistEditor>>,
    TError,
    { data: ArtistEditorResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ArtistEditor>>,
  TError,
  { data: ArtistEditorResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ArtistEditor>>,
    { data: ArtistEditorResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV1ArtistEditor(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ArtistEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ArtistEditor>>
>;
export type DeleteApiV1ArtistEditorMutationBody = ArtistEditorResource;
export type DeleteApiV1ArtistEditorMutationError = ErrorType<unknown>;

export const useDeleteApiV1ArtistEditor = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ArtistEditor>>,
    TError,
    { data: ArtistEditorResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1ArtistEditor>>,
  TError,
  { data: ArtistEditorResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV1ArtistEditorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ArtistLookup = (
  params?: GetApiV1ArtistLookupParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v1/artist/lookup`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1ArtistLookupQueryKey = (
  params?: GetApiV1ArtistLookupParams
) => {
  return [`/api/v1/artist/lookup`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ArtistLookupQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ArtistLookup>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ArtistLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ArtistLookup>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ArtistLookupQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ArtistLookup>>
  > = ({ signal }) => getApiV1ArtistLookup(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ArtistLookup>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ArtistLookupQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ArtistLookup>>
>;
export type GetApiV1ArtistLookupQueryError = ErrorType<unknown>;

export function useGetApiV1ArtistLookup<
  TData = Awaited<ReturnType<typeof getApiV1ArtistLookup>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1ArtistLookupParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ArtistLookup>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ArtistLookup>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ArtistLookup<
  TData = Awaited<ReturnType<typeof getApiV1ArtistLookup>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ArtistLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ArtistLookup>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ArtistLookup>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ArtistLookup<
  TData = Awaited<ReturnType<typeof getApiV1ArtistLookup>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ArtistLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ArtistLookup>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ArtistLookup<
  TData = Awaited<ReturnType<typeof getApiV1ArtistLookup>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ArtistLookupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ArtistLookup>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ArtistLookupQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postLogin = (
  postLoginBody: PostLoginBody,
  params?: PostLoginParams
) => {
  const formData = new FormData();
  if (postLoginBody.Username !== undefined) {
    formData.append("Username", postLoginBody.Username);
  }
  if (postLoginBody.Password !== undefined) {
    formData.append("Password", postLoginBody.Password);
  }
  if (postLoginBody.RememberMe !== undefined) {
    formData.append("RememberMe", postLoginBody.RememberMe);
  }

  return apiInstance<void>({
    url: `/login`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
  });
};

export const getPostLoginMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    { data: PostLoginBody; params?: PostLoginParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: PostLoginBody; params?: PostLoginParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLogin>>,
    { data: PostLoginBody; params?: PostLoginParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postLogin(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLogin>>
>;
export type PostLoginMutationBody = PostLoginBody;
export type PostLoginMutationError = ErrorType<unknown>;

export const usePostLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    { data: PostLoginBody; params?: PostLoginParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: PostLoginBody; params?: PostLoginParams },
  TContext
> => {
  const mutationOptions = getPostLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getLogin = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/login`, method: "GET", signal });
};

export const getGetLoginQueryKey = () => {
  return [`/login`] as const;
};

export const getGetLoginQueryOptions = <
  TData = Awaited<ReturnType<typeof getLogin>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogin>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLoginQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLogin>>> = ({
    signal,
  }) => getLogin(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLogin>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetLoginQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLogin>>
>;
export type GetLoginQueryError = ErrorType<unknown>;

export function useGetLogin<
  TData = Awaited<ReturnType<typeof getLogin>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogin>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLogin>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetLogin<
  TData = Awaited<ReturnType<typeof getLogin>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogin>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLogin>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetLogin<
  TData = Awaited<ReturnType<typeof getLogin>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogin>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetLogin<
  TData = Awaited<ReturnType<typeof getLogin>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogin>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetLoginQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getLogout = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/logout`, method: "GET", signal });
};

export const getGetLogoutQueryKey = () => {
  return [`/logout`] as const;
};

export const getGetLogoutQueryOptions = <
  TData = Awaited<ReturnType<typeof getLogout>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLogoutQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLogout>>> = ({
    signal,
  }) => getLogout(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLogout>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetLogoutQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLogout>>
>;
export type GetLogoutQueryError = ErrorType<unknown>;

export function useGetLogout<
  TData = Awaited<ReturnType<typeof getLogout>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLogout>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetLogout<
  TData = Awaited<ReturnType<typeof getLogout>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getLogout>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetLogout<
  TData = Awaited<ReturnType<typeof getLogout>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetLogout<
  TData = Awaited<ReturnType<typeof getLogout>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetLogoutQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1SystemBackup = (signal?: AbortSignal) => {
  return apiInstance<BackupResource[]>({
    url: `/api/v1/system/backup`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1SystemBackupQueryKey = () => {
  return [`/api/v1/system/backup`] as const;
};

export const getGetApiV1SystemBackupQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SystemBackup>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemBackup>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1SystemBackupQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SystemBackup>>
  > = ({ signal }) => getApiV1SystemBackup(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SystemBackup>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1SystemBackupQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SystemBackup>>
>;
export type GetApiV1SystemBackupQueryError = ErrorType<unknown>;

export function useGetApiV1SystemBackup<
  TData = Awaited<ReturnType<typeof getApiV1SystemBackup>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemBackup>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1SystemBackup>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1SystemBackup<
  TData = Awaited<ReturnType<typeof getApiV1SystemBackup>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemBackup>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1SystemBackup>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1SystemBackup<
  TData = Awaited<ReturnType<typeof getApiV1SystemBackup>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemBackup>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1SystemBackup<
  TData = Awaited<ReturnType<typeof getApiV1SystemBackup>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemBackup>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1SystemBackupQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV1SystemBackupId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/system/backup/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1SystemBackupIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1SystemBackupId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1SystemBackupId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1SystemBackupId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1SystemBackupId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1SystemBackupIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1SystemBackupId>>
>;

export type DeleteApiV1SystemBackupIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1SystemBackupId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1SystemBackupId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1SystemBackupId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1SystemBackupIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1SystemBackupRestoreId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/system/backup/restore/${id}`,
    method: "POST",
  });
};

export const getPostApiV1SystemBackupRestoreIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemBackupRestoreId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1SystemBackupRestoreId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1SystemBackupRestoreId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postApiV1SystemBackupRestoreId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1SystemBackupRestoreIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1SystemBackupRestoreId>>
>;

export type PostApiV1SystemBackupRestoreIdMutationError = ErrorType<unknown>;

export const usePostApiV1SystemBackupRestoreId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemBackupRestoreId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1SystemBackupRestoreId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getPostApiV1SystemBackupRestoreIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1SystemBackupRestoreUpload = () => {
  return apiInstance<void>({
    url: `/api/v1/system/backup/restore/upload`,
    method: "POST",
  });
};

export const getPostApiV1SystemBackupRestoreUploadMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemBackupRestoreUpload>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1SystemBackupRestoreUpload>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1SystemBackupRestoreUpload>>,
    void
  > = () => {
    return postApiV1SystemBackupRestoreUpload();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1SystemBackupRestoreUploadMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1SystemBackupRestoreUpload>>
>;

export type PostApiV1SystemBackupRestoreUploadMutationError =
  ErrorType<unknown>;

export const usePostApiV1SystemBackupRestoreUpload = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemBackupRestoreUpload>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1SystemBackupRestoreUpload>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPostApiV1SystemBackupRestoreUploadMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Blocklist = (signal?: AbortSignal) => {
  return apiInstance<BlocklistResourcePagingResource>({
    url: `/api/v1/blocklist`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1BlocklistQueryKey = () => {
  return [`/api/v1/blocklist`] as const;
};

export const getGetApiV1BlocklistQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Blocklist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Blocklist>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1BlocklistQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Blocklist>>
  > = ({ signal }) => getApiV1Blocklist(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Blocklist>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1BlocklistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Blocklist>>
>;
export type GetApiV1BlocklistQueryError = ErrorType<unknown>;

export function useGetApiV1Blocklist<
  TData = Awaited<ReturnType<typeof getApiV1Blocklist>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Blocklist>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Blocklist>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Blocklist<
  TData = Awaited<ReturnType<typeof getApiV1Blocklist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Blocklist>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Blocklist>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Blocklist<
  TData = Awaited<ReturnType<typeof getApiV1Blocklist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Blocklist>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Blocklist<
  TData = Awaited<ReturnType<typeof getApiV1Blocklist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Blocklist>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1BlocklistQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV1BlocklistId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/blocklist/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1BlocklistIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BlocklistId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1BlocklistId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1BlocklistId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1BlocklistId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1BlocklistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1BlocklistId>>
>;

export type DeleteApiV1BlocklistIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1BlocklistId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BlocklistId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1BlocklistId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1BlocklistIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1BlocklistBulk = (
  blocklistBulkResource: BlocklistBulkResource
) => {
  return apiInstance<void>({
    url: `/api/v1/blocklist/bulk`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: blocklistBulkResource,
  });
};

export const getDeleteApiV1BlocklistBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BlocklistBulk>>,
    TError,
    { data: BlocklistBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1BlocklistBulk>>,
  TError,
  { data: BlocklistBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1BlocklistBulk>>,
    { data: BlocklistBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV1BlocklistBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1BlocklistBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1BlocklistBulk>>
>;
export type DeleteApiV1BlocklistBulkMutationBody = BlocklistBulkResource;
export type DeleteApiV1BlocklistBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV1BlocklistBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BlocklistBulk>>,
    TError,
    { data: BlocklistBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1BlocklistBulk>>,
  TError,
  { data: BlocklistBulkResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV1BlocklistBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Calendar = (
  params?: GetApiV1CalendarParams,
  signal?: AbortSignal
) => {
  return apiInstance<AlbumResource[]>({
    url: `/api/v1/calendar`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1CalendarQueryKey = (
  params?: GetApiV1CalendarParams
) => {
  return [`/api/v1/calendar`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1CalendarQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Calendar>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1CalendarParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Calendar>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1CalendarQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Calendar>>
  > = ({ signal }) => getApiV1Calendar(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Calendar>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1CalendarQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Calendar>>
>;
export type GetApiV1CalendarQueryError = ErrorType<unknown>;

export function useGetApiV1Calendar<
  TData = Awaited<ReturnType<typeof getApiV1Calendar>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1CalendarParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Calendar>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Calendar>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Calendar<
  TData = Awaited<ReturnType<typeof getApiV1Calendar>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1CalendarParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Calendar>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Calendar>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Calendar<
  TData = Awaited<ReturnType<typeof getApiV1Calendar>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1CalendarParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Calendar>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Calendar<
  TData = Awaited<ReturnType<typeof getApiV1Calendar>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1CalendarParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Calendar>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1CalendarQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1CalendarId = (id: number, signal?: AbortSignal) => {
  return apiInstance<AlbumResource>({
    url: `/api/v1/calendar/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1CalendarIdQueryKey = (id: number) => {
  return [`/api/v1/calendar/${id}`] as const;
};

export const getGetApiV1CalendarIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1CalendarId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CalendarId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1CalendarIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1CalendarId>>
  > = ({ signal }) => getApiV1CalendarId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1CalendarId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1CalendarIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1CalendarId>>
>;
export type GetApiV1CalendarIdQueryError = ErrorType<unknown>;

export function useGetApiV1CalendarId<
  TData = Awaited<ReturnType<typeof getApiV1CalendarId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CalendarId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CalendarId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1CalendarId<
  TData = Awaited<ReturnType<typeof getApiV1CalendarId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CalendarId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CalendarId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1CalendarId<
  TData = Awaited<ReturnType<typeof getApiV1CalendarId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CalendarId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1CalendarId<
  TData = Awaited<ReturnType<typeof getApiV1CalendarId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CalendarId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1CalendarIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFeedV1CalendarLidarrIcs = (
  params?: GetFeedV1CalendarLidarrIcsParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/feed/v1/calendar/lidarr.ics`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetFeedV1CalendarLidarrIcsQueryKey = (
  params?: GetFeedV1CalendarLidarrIcsParams
) => {
  return [`/feed/v1/calendar/lidarr.ics`, ...(params ? [params] : [])] as const;
};

export const getGetFeedV1CalendarLidarrIcsQueryOptions = <
  TData = Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>,
  TError = ErrorType<unknown>
>(
  params?: GetFeedV1CalendarLidarrIcsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetFeedV1CalendarLidarrIcsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>
  > = ({ signal }) => getFeedV1CalendarLidarrIcs(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetFeedV1CalendarLidarrIcsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>
>;
export type GetFeedV1CalendarLidarrIcsQueryError = ErrorType<unknown>;

export function useGetFeedV1CalendarLidarrIcs<
  TData = Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetFeedV1CalendarLidarrIcsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetFeedV1CalendarLidarrIcs<
  TData = Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>,
  TError = ErrorType<unknown>
>(
  params?: GetFeedV1CalendarLidarrIcsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetFeedV1CalendarLidarrIcs<
  TData = Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>,
  TError = ErrorType<unknown>
>(
  params?: GetFeedV1CalendarLidarrIcsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetFeedV1CalendarLidarrIcs<
  TData = Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>,
  TError = ErrorType<unknown>
>(
  params?: GetFeedV1CalendarLidarrIcsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFeedV1CalendarLidarrIcs>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetFeedV1CalendarLidarrIcsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1CommandId = (id: number, signal?: AbortSignal) => {
  return apiInstance<CommandResource>({
    url: `/api/v1/command/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1CommandIdQueryKey = (id: number) => {
  return [`/api/v1/command/${id}`] as const;
};

export const getGetApiV1CommandIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1CommandId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommandId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1CommandIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1CommandId>>
  > = ({ signal }) => getApiV1CommandId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1CommandId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1CommandIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1CommandId>>
>;
export type GetApiV1CommandIdQueryError = ErrorType<unknown>;

export function useGetApiV1CommandId<
  TData = Awaited<ReturnType<typeof getApiV1CommandId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommandId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CommandId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1CommandId<
  TData = Awaited<ReturnType<typeof getApiV1CommandId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommandId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CommandId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1CommandId<
  TData = Awaited<ReturnType<typeof getApiV1CommandId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommandId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1CommandId<
  TData = Awaited<ReturnType<typeof getApiV1CommandId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommandId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1CommandIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV1CommandId = (id: number) => {
  return apiInstance<void>({ url: `/api/v1/command/${id}`, method: "DELETE" });
};

export const getDeleteApiV1CommandIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CommandId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1CommandId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1CommandId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1CommandId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1CommandIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1CommandId>>
>;

export type DeleteApiV1CommandIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1CommandId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CommandId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1CommandId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1CommandIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1Command = (commandResource: CommandResource) => {
  return apiInstance<CommandResource>({
    url: `/api/v1/command`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: commandResource,
  });
};

export const getPostApiV1CommandMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Command>>,
    TError,
    { data: CommandResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Command>>,
  TError,
  { data: CommandResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Command>>,
    { data: CommandResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Command(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1CommandMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Command>>
>;
export type PostApiV1CommandMutationBody = CommandResource;
export type PostApiV1CommandMutationError = ErrorType<unknown>;

export const usePostApiV1Command = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Command>>,
    TError,
    { data: CommandResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Command>>,
  TError,
  { data: CommandResource },
  TContext
> => {
  const mutationOptions = getPostApiV1CommandMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Command = (signal?: AbortSignal) => {
  return apiInstance<CommandResource[]>({
    url: `/api/v1/command`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1CommandQueryKey = () => {
  return [`/api/v1/command`] as const;
};

export const getGetApiV1CommandQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Command>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Command>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1CommandQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Command>>> = ({
    signal,
  }) => getApiV1Command(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Command>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1CommandQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Command>>
>;
export type GetApiV1CommandQueryError = ErrorType<unknown>;

export function useGetApiV1Command<
  TData = Awaited<ReturnType<typeof getApiV1Command>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Command>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Command>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Command<
  TData = Awaited<ReturnType<typeof getApiV1Command>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Command>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Command>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Command<
  TData = Awaited<ReturnType<typeof getApiV1Command>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Command>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Command<
  TData = Awaited<ReturnType<typeof getApiV1Command>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Command>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1CommandQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1CustomfilterId = (id: number, signal?: AbortSignal) => {
  return apiInstance<CustomFilterResource>({
    url: `/api/v1/customfilter/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1CustomfilterIdQueryKey = (id: number) => {
  return [`/api/v1/customfilter/${id}`] as const;
};

export const getGetApiV1CustomfilterIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1CustomfilterIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1CustomfilterId>>
  > = ({ signal }) => getApiV1CustomfilterId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1CustomfilterIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1CustomfilterId>>
>;
export type GetApiV1CustomfilterIdQueryError = ErrorType<unknown>;

export function useGetApiV1CustomfilterId<
  TData = Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1CustomfilterId<
  TData = Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1CustomfilterId<
  TData = Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1CustomfilterId<
  TData = Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1CustomfilterIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1CustomfilterId = (
  id: string,
  customFilterResource: CustomFilterResource
) => {
  return apiInstance<CustomFilterResource>({
    url: `/api/v1/customfilter/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: customFilterResource,
  });
};

export const getPutApiV1CustomfilterIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1CustomfilterId>>,
    TError,
    { id: string; data: CustomFilterResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1CustomfilterId>>,
  TError,
  { id: string; data: CustomFilterResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1CustomfilterId>>,
    { id: string; data: CustomFilterResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1CustomfilterId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1CustomfilterIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1CustomfilterId>>
>;
export type PutApiV1CustomfilterIdMutationBody = CustomFilterResource;
export type PutApiV1CustomfilterIdMutationError = ErrorType<unknown>;

export const usePutApiV1CustomfilterId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1CustomfilterId>>,
    TError,
    { id: string; data: CustomFilterResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1CustomfilterId>>,
  TError,
  { id: string; data: CustomFilterResource },
  TContext
> => {
  const mutationOptions = getPutApiV1CustomfilterIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1CustomfilterId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/customfilter/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1CustomfilterIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CustomfilterId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1CustomfilterId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1CustomfilterId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1CustomfilterId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1CustomfilterIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1CustomfilterId>>
>;

export type DeleteApiV1CustomfilterIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1CustomfilterId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CustomfilterId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1CustomfilterId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1CustomfilterIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Customfilter = (signal?: AbortSignal) => {
  return apiInstance<CustomFilterResource[]>({
    url: `/api/v1/customfilter`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1CustomfilterQueryKey = () => {
  return [`/api/v1/customfilter`] as const;
};

export const getGetApiV1CustomfilterQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Customfilter>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customfilter>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1CustomfilterQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Customfilter>>
  > = ({ signal }) => getApiV1Customfilter(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Customfilter>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1CustomfilterQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Customfilter>>
>;
export type GetApiV1CustomfilterQueryError = ErrorType<unknown>;

export function useGetApiV1Customfilter<
  TData = Awaited<ReturnType<typeof getApiV1Customfilter>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customfilter>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Customfilter>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Customfilter<
  TData = Awaited<ReturnType<typeof getApiV1Customfilter>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customfilter>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Customfilter>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Customfilter<
  TData = Awaited<ReturnType<typeof getApiV1Customfilter>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customfilter>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Customfilter<
  TData = Awaited<ReturnType<typeof getApiV1Customfilter>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customfilter>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1CustomfilterQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Customfilter = (
  customFilterResource: CustomFilterResource
) => {
  return apiInstance<CustomFilterResource>({
    url: `/api/v1/customfilter`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: customFilterResource,
  });
};

export const getPostApiV1CustomfilterMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Customfilter>>,
    TError,
    { data: CustomFilterResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Customfilter>>,
  TError,
  { data: CustomFilterResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Customfilter>>,
    { data: CustomFilterResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Customfilter(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1CustomfilterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Customfilter>>
>;
export type PostApiV1CustomfilterMutationBody = CustomFilterResource;
export type PostApiV1CustomfilterMutationError = ErrorType<unknown>;

export const usePostApiV1Customfilter = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Customfilter>>,
    TError,
    { data: CustomFilterResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Customfilter>>,
  TError,
  { data: CustomFilterResource },
  TContext
> => {
  const mutationOptions = getPostApiV1CustomfilterMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1CustomformatId = (id: number, signal?: AbortSignal) => {
  return apiInstance<CustomFormatResource>({
    url: `/api/v1/customformat/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1CustomformatIdQueryKey = (id: number) => {
  return [`/api/v1/customformat/${id}`] as const;
};

export const getGetApiV1CustomformatIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1CustomformatId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomformatId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1CustomformatIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1CustomformatId>>
  > = ({ signal }) => getApiV1CustomformatId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1CustomformatId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1CustomformatIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1CustomformatId>>
>;
export type GetApiV1CustomformatIdQueryError = ErrorType<unknown>;

export function useGetApiV1CustomformatId<
  TData = Awaited<ReturnType<typeof getApiV1CustomformatId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomformatId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CustomformatId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1CustomformatId<
  TData = Awaited<ReturnType<typeof getApiV1CustomformatId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomformatId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1CustomformatId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1CustomformatId<
  TData = Awaited<ReturnType<typeof getApiV1CustomformatId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomformatId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1CustomformatId<
  TData = Awaited<ReturnType<typeof getApiV1CustomformatId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomformatId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1CustomformatIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1CustomformatId = (
  id: string,
  customFormatResource: CustomFormatResource
) => {
  return apiInstance<CustomFormatResource>({
    url: `/api/v1/customformat/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: customFormatResource,
  });
};

export const getPutApiV1CustomformatIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1CustomformatId>>,
    TError,
    { id: string; data: CustomFormatResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1CustomformatId>>,
  TError,
  { id: string; data: CustomFormatResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1CustomformatId>>,
    { id: string; data: CustomFormatResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1CustomformatId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1CustomformatIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1CustomformatId>>
>;
export type PutApiV1CustomformatIdMutationBody = CustomFormatResource;
export type PutApiV1CustomformatIdMutationError = ErrorType<unknown>;

export const usePutApiV1CustomformatId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1CustomformatId>>,
    TError,
    { id: string; data: CustomFormatResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1CustomformatId>>,
  TError,
  { id: string; data: CustomFormatResource },
  TContext
> => {
  const mutationOptions = getPutApiV1CustomformatIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1CustomformatId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/customformat/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1CustomformatIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CustomformatId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1CustomformatId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1CustomformatId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1CustomformatId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1CustomformatIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1CustomformatId>>
>;

export type DeleteApiV1CustomformatIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1CustomformatId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CustomformatId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1CustomformatId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1CustomformatIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1Customformat = (
  customFormatResource: CustomFormatResource
) => {
  return apiInstance<CustomFormatResource>({
    url: `/api/v1/customformat`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: customFormatResource,
  });
};

export const getPostApiV1CustomformatMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Customformat>>,
    TError,
    { data: CustomFormatResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Customformat>>,
  TError,
  { data: CustomFormatResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Customformat>>,
    { data: CustomFormatResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Customformat(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1CustomformatMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Customformat>>
>;
export type PostApiV1CustomformatMutationBody = CustomFormatResource;
export type PostApiV1CustomformatMutationError = ErrorType<unknown>;

export const usePostApiV1Customformat = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Customformat>>,
    TError,
    { data: CustomFormatResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Customformat>>,
  TError,
  { data: CustomFormatResource },
  TContext
> => {
  const mutationOptions = getPostApiV1CustomformatMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Customformat = (signal?: AbortSignal) => {
  return apiInstance<CustomFormatResource[]>({
    url: `/api/v1/customformat`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1CustomformatQueryKey = () => {
  return [`/api/v1/customformat`] as const;
};

export const getGetApiV1CustomformatQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Customformat>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customformat>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1CustomformatQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Customformat>>
  > = ({ signal }) => getApiV1Customformat(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Customformat>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1CustomformatQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Customformat>>
>;
export type GetApiV1CustomformatQueryError = ErrorType<unknown>;

export function useGetApiV1Customformat<
  TData = Awaited<ReturnType<typeof getApiV1Customformat>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customformat>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Customformat>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Customformat<
  TData = Awaited<ReturnType<typeof getApiV1Customformat>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customformat>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Customformat>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Customformat<
  TData = Awaited<ReturnType<typeof getApiV1Customformat>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customformat>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Customformat<
  TData = Awaited<ReturnType<typeof getApiV1Customformat>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customformat>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1CustomformatQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1CustomformatSchema = (signal?: AbortSignal) => {
  return apiInstance<void>({
    url: `/api/v1/customformat/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1CustomformatSchemaQueryKey = () => {
  return [`/api/v1/customformat/schema`] as const;
};

export const getGetApiV1CustomformatSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1CustomformatSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1CustomformatSchema>>
  > = ({ signal }) => getApiV1CustomformatSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1CustomformatSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1CustomformatSchema>>
>;
export type GetApiV1CustomformatSchemaQueryError = ErrorType<unknown>;

export function useGetApiV1CustomformatSchema<
  TData = Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1CustomformatSchema<
  TData = Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1CustomformatSchema<
  TData = Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1CustomformatSchema<
  TData = Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1CustomformatSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1WantedCutoff = (
  params?: GetApiV1WantedCutoffParams,
  signal?: AbortSignal
) => {
  return apiInstance<AlbumResourcePagingResource>({
    url: `/api/v1/wanted/cutoff`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1WantedCutoffQueryKey = (
  params?: GetApiV1WantedCutoffParams
) => {
  return [`/api/v1/wanted/cutoff`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1WantedCutoffQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1WantedCutoffParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1WantedCutoffQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1WantedCutoff>>
  > = ({ signal }) => getApiV1WantedCutoff(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1WantedCutoffQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1WantedCutoff>>
>;
export type GetApiV1WantedCutoffQueryError = ErrorType<unknown>;

export function useGetApiV1WantedCutoff<
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1WantedCutoffParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1WantedCutoff<
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1WantedCutoffParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1WantedCutoff<
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1WantedCutoffParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1WantedCutoff<
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1WantedCutoffParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1WantedCutoffQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1WantedCutoffId = (id: number, signal?: AbortSignal) => {
  return apiInstance<AlbumResource>({
    url: `/api/v1/wanted/cutoff/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1WantedCutoffIdQueryKey = (id: number) => {
  return [`/api/v1/wanted/cutoff/${id}`] as const;
};

export const getGetApiV1WantedCutoffIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1WantedCutoffIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1WantedCutoffId>>
  > = ({ signal }) => getApiV1WantedCutoffId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1WantedCutoffIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1WantedCutoffId>>
>;
export type GetApiV1WantedCutoffIdQueryError = ErrorType<unknown>;

export function useGetApiV1WantedCutoffId<
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1WantedCutoffId<
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1WantedCutoffId<
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1WantedCutoffId<
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1WantedCutoffIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Delayprofile = (
  delayProfileResource: DelayProfileResource
) => {
  return apiInstance<DelayProfileResource>({
    url: `/api/v1/delayprofile`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: delayProfileResource,
  });
};

export const getPostApiV1DelayprofileMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Delayprofile>>,
    TError,
    { data: DelayProfileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Delayprofile>>,
  TError,
  { data: DelayProfileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Delayprofile>>,
    { data: DelayProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Delayprofile(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1DelayprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Delayprofile>>
>;
export type PostApiV1DelayprofileMutationBody = DelayProfileResource;
export type PostApiV1DelayprofileMutationError = ErrorType<unknown>;

export const usePostApiV1Delayprofile = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Delayprofile>>,
    TError,
    { data: DelayProfileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Delayprofile>>,
  TError,
  { data: DelayProfileResource },
  TContext
> => {
  const mutationOptions = getPostApiV1DelayprofileMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Delayprofile = (signal?: AbortSignal) => {
  return apiInstance<DelayProfileResource[]>({
    url: `/api/v1/delayprofile`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1DelayprofileQueryKey = () => {
  return [`/api/v1/delayprofile`] as const;
};

export const getGetApiV1DelayprofileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Delayprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Delayprofile>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1DelayprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Delayprofile>>
  > = ({ signal }) => getApiV1Delayprofile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Delayprofile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1DelayprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Delayprofile>>
>;
export type GetApiV1DelayprofileQueryError = ErrorType<unknown>;

export function useGetApiV1Delayprofile<
  TData = Awaited<ReturnType<typeof getApiV1Delayprofile>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Delayprofile>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Delayprofile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Delayprofile<
  TData = Awaited<ReturnType<typeof getApiV1Delayprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Delayprofile>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Delayprofile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Delayprofile<
  TData = Awaited<ReturnType<typeof getApiV1Delayprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Delayprofile>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Delayprofile<
  TData = Awaited<ReturnType<typeof getApiV1Delayprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Delayprofile>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1DelayprofileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV1DelayprofileId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/delayprofile/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1DelayprofileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1DelayprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1DelayprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1DelayprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1DelayprofileId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1DelayprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1DelayprofileId>>
>;

export type DeleteApiV1DelayprofileIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1DelayprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1DelayprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1DelayprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1DelayprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1DelayprofileId = (
  id: string,
  delayProfileResource: DelayProfileResource
) => {
  return apiInstance<DelayProfileResource>({
    url: `/api/v1/delayprofile/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: delayProfileResource,
  });
};

export const getPutApiV1DelayprofileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DelayprofileId>>,
    TError,
    { id: string; data: DelayProfileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1DelayprofileId>>,
  TError,
  { id: string; data: DelayProfileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1DelayprofileId>>,
    { id: string; data: DelayProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1DelayprofileId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1DelayprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1DelayprofileId>>
>;
export type PutApiV1DelayprofileIdMutationBody = DelayProfileResource;
export type PutApiV1DelayprofileIdMutationError = ErrorType<unknown>;

export const usePutApiV1DelayprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DelayprofileId>>,
    TError,
    { id: string; data: DelayProfileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1DelayprofileId>>,
  TError,
  { id: string; data: DelayProfileResource },
  TContext
> => {
  const mutationOptions = getPutApiV1DelayprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1DelayprofileId = (id: number, signal?: AbortSignal) => {
  return apiInstance<DelayProfileResource>({
    url: `/api/v1/delayprofile/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1DelayprofileIdQueryKey = (id: number) => {
  return [`/api/v1/delayprofile/${id}`] as const;
};

export const getGetApiV1DelayprofileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1DelayprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1DelayprofileId>>
  > = ({ signal }) => getApiV1DelayprofileId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1DelayprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1DelayprofileId>>
>;
export type GetApiV1DelayprofileIdQueryError = ErrorType<unknown>;

export function useGetApiV1DelayprofileId<
  TData = Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1DelayprofileId<
  TData = Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1DelayprofileId<
  TData = Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1DelayprofileId<
  TData = Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1DelayprofileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1DelayprofileReorderId = (
  id: number,
  params?: PutApiV1DelayprofileReorderIdParams
) => {
  return apiInstance<void>({
    url: `/api/v1/delayprofile/reorder/${id}`,
    method: "PUT",
    params,
  });
};

export const getPutApiV1DelayprofileReorderIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DelayprofileReorderId>>,
    TError,
    { id: number; params?: PutApiV1DelayprofileReorderIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1DelayprofileReorderId>>,
  TError,
  { id: number; params?: PutApiV1DelayprofileReorderIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1DelayprofileReorderId>>,
    { id: number; params?: PutApiV1DelayprofileReorderIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return putApiV1DelayprofileReorderId(id, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1DelayprofileReorderIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1DelayprofileReorderId>>
>;

export type PutApiV1DelayprofileReorderIdMutationError = ErrorType<unknown>;

export const usePutApiV1DelayprofileReorderId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DelayprofileReorderId>>,
    TError,
    { id: number; params?: PutApiV1DelayprofileReorderIdParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1DelayprofileReorderId>>,
  TError,
  { id: number; params?: PutApiV1DelayprofileReorderIdParams },
  TContext
> => {
  const mutationOptions =
    getPutApiV1DelayprofileReorderIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Diskspace = (signal?: AbortSignal) => {
  return apiInstance<DiskSpaceResource[]>({
    url: `/api/v1/diskspace`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1DiskspaceQueryKey = () => {
  return [`/api/v1/diskspace`] as const;
};

export const getGetApiV1DiskspaceQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Diskspace>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Diskspace>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1DiskspaceQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Diskspace>>
  > = ({ signal }) => getApiV1Diskspace(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Diskspace>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1DiskspaceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Diskspace>>
>;
export type GetApiV1DiskspaceQueryError = ErrorType<unknown>;

export function useGetApiV1Diskspace<
  TData = Awaited<ReturnType<typeof getApiV1Diskspace>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Diskspace>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Diskspace>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Diskspace<
  TData = Awaited<ReturnType<typeof getApiV1Diskspace>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Diskspace>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Diskspace>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Diskspace<
  TData = Awaited<ReturnType<typeof getApiV1Diskspace>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Diskspace>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Diskspace<
  TData = Awaited<ReturnType<typeof getApiV1Diskspace>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Diskspace>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1DiskspaceQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1DownloadclientId = (id: number, signal?: AbortSignal) => {
  return apiInstance<DownloadClientResource>({
    url: `/api/v1/downloadclient/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1DownloadclientIdQueryKey = (id: number) => {
  return [`/api/v1/downloadclient/${id}`] as const;
};

export const getGetApiV1DownloadclientIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1DownloadclientIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1DownloadclientId>>
  > = ({ signal }) => getApiV1DownloadclientId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1DownloadclientIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1DownloadclientId>>
>;
export type GetApiV1DownloadclientIdQueryError = ErrorType<unknown>;

export function useGetApiV1DownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1DownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1DownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1DownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1DownloadclientIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1DownloadclientId = (
  id: string,
  downloadClientResource: DownloadClientResource,
  params?: PutApiV1DownloadclientIdParams
) => {
  return apiInstance<DownloadClientResource>({
    url: `/api/v1/downloadclient/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: downloadClientResource,
    params,
  });
};

export const getPutApiV1DownloadclientIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DownloadclientId>>,
    TError,
    {
      id: string;
      data: DownloadClientResource;
      params?: PutApiV1DownloadclientIdParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1DownloadclientId>>,
  TError,
  {
    id: string;
    data: DownloadClientResource;
    params?: PutApiV1DownloadclientIdParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1DownloadclientId>>,
    {
      id: string;
      data: DownloadClientResource;
      params?: PutApiV1DownloadclientIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV1DownloadclientId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1DownloadclientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1DownloadclientId>>
>;
export type PutApiV1DownloadclientIdMutationBody = DownloadClientResource;
export type PutApiV1DownloadclientIdMutationError = ErrorType<unknown>;

export const usePutApiV1DownloadclientId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DownloadclientId>>,
    TError,
    {
      id: string;
      data: DownloadClientResource;
      params?: PutApiV1DownloadclientIdParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1DownloadclientId>>,
  TError,
  {
    id: string;
    data: DownloadClientResource;
    params?: PutApiV1DownloadclientIdParams;
  },
  TContext
> => {
  const mutationOptions = getPutApiV1DownloadclientIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1DownloadclientId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/downloadclient/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1DownloadclientIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1DownloadclientId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1DownloadclientId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1DownloadclientId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1DownloadclientId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1DownloadclientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1DownloadclientId>>
>;

export type DeleteApiV1DownloadclientIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1DownloadclientId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1DownloadclientId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1DownloadclientId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1DownloadclientIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Downloadclient = (signal?: AbortSignal) => {
  return apiInstance<DownloadClientResource[]>({
    url: `/api/v1/downloadclient`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1DownloadclientQueryKey = () => {
  return [`/api/v1/downloadclient`] as const;
};

export const getGetApiV1DownloadclientQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Downloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Downloadclient>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1DownloadclientQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Downloadclient>>
  > = ({ signal }) => getApiV1Downloadclient(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Downloadclient>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1DownloadclientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Downloadclient>>
>;
export type GetApiV1DownloadclientQueryError = ErrorType<unknown>;

export function useGetApiV1Downloadclient<
  TData = Awaited<ReturnType<typeof getApiV1Downloadclient>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Downloadclient>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Downloadclient>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Downloadclient<
  TData = Awaited<ReturnType<typeof getApiV1Downloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Downloadclient>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Downloadclient>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Downloadclient<
  TData = Awaited<ReturnType<typeof getApiV1Downloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Downloadclient>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Downloadclient<
  TData = Awaited<ReturnType<typeof getApiV1Downloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Downloadclient>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1DownloadclientQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Downloadclient = (
  downloadClientResource: DownloadClientResource,
  params?: PostApiV1DownloadclientParams
) => {
  return apiInstance<DownloadClientResource>({
    url: `/api/v1/downloadclient`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: downloadClientResource,
    params,
  });
};

export const getPostApiV1DownloadclientMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Downloadclient>>,
    TError,
    { data: DownloadClientResource; params?: PostApiV1DownloadclientParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Downloadclient>>,
  TError,
  { data: DownloadClientResource; params?: PostApiV1DownloadclientParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Downloadclient>>,
    { data: DownloadClientResource; params?: PostApiV1DownloadclientParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1Downloadclient(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1DownloadclientMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Downloadclient>>
>;
export type PostApiV1DownloadclientMutationBody = DownloadClientResource;
export type PostApiV1DownloadclientMutationError = ErrorType<unknown>;

export const usePostApiV1Downloadclient = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Downloadclient>>,
    TError,
    { data: DownloadClientResource; params?: PostApiV1DownloadclientParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Downloadclient>>,
  TError,
  { data: DownloadClientResource; params?: PostApiV1DownloadclientParams },
  TContext
> => {
  const mutationOptions = getPostApiV1DownloadclientMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1DownloadclientBulk = (
  downloadClientBulkResource: DownloadClientBulkResource
) => {
  return apiInstance<DownloadClientResource>({
    url: `/api/v1/downloadclient/bulk`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: downloadClientBulkResource,
  });
};

export const getPutApiV1DownloadclientBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1DownloadclientBulk>>,
  TError,
  { data: DownloadClientBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1DownloadclientBulk>>,
    { data: DownloadClientBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1DownloadclientBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1DownloadclientBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1DownloadclientBulk>>
>;
export type PutApiV1DownloadclientBulkMutationBody = DownloadClientBulkResource;
export type PutApiV1DownloadclientBulkMutationError = ErrorType<unknown>;

export const usePutApiV1DownloadclientBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1DownloadclientBulk>>,
  TError,
  { data: DownloadClientBulkResource },
  TContext
> => {
  const mutationOptions = getPutApiV1DownloadclientBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1DownloadclientBulk = (
  downloadClientBulkResource: DownloadClientBulkResource
) => {
  return apiInstance<void>({
    url: `/api/v1/downloadclient/bulk`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: downloadClientBulkResource,
  });
};

export const getDeleteApiV1DownloadclientBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1DownloadclientBulk>>,
  TError,
  { data: DownloadClientBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1DownloadclientBulk>>,
    { data: DownloadClientBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV1DownloadclientBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1DownloadclientBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1DownloadclientBulk>>
>;
export type DeleteApiV1DownloadclientBulkMutationBody =
  DownloadClientBulkResource;
export type DeleteApiV1DownloadclientBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV1DownloadclientBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1DownloadclientBulk>>,
  TError,
  { data: DownloadClientBulkResource },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1DownloadclientBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1DownloadclientSchema = (signal?: AbortSignal) => {
  return apiInstance<DownloadClientResource[]>({
    url: `/api/v1/downloadclient/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1DownloadclientSchemaQueryKey = () => {
  return [`/api/v1/downloadclient/schema`] as const;
};

export const getGetApiV1DownloadclientSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1DownloadclientSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>
  > = ({ signal }) => getApiV1DownloadclientSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1DownloadclientSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>
>;
export type GetApiV1DownloadclientSchemaQueryError = ErrorType<unknown>;

export function useGetApiV1DownloadclientSchema<
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1DownloadclientSchema<
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1DownloadclientSchema<
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1DownloadclientSchema<
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1DownloadclientSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1DownloadclientTest = (
  downloadClientResource: DownloadClientResource
) => {
  return apiInstance<void>({
    url: `/api/v1/downloadclient/test`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: downloadClientResource,
  });
};

export const getPostApiV1DownloadclientTestMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1DownloadclientTest>>,
    TError,
    { data: DownloadClientResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1DownloadclientTest>>,
  TError,
  { data: DownloadClientResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1DownloadclientTest>>,
    { data: DownloadClientResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1DownloadclientTest(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1DownloadclientTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1DownloadclientTest>>
>;
export type PostApiV1DownloadclientTestMutationBody = DownloadClientResource;
export type PostApiV1DownloadclientTestMutationError = ErrorType<unknown>;

export const usePostApiV1DownloadclientTest = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1DownloadclientTest>>,
    TError,
    { data: DownloadClientResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1DownloadclientTest>>,
  TError,
  { data: DownloadClientResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV1DownloadclientTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1DownloadclientTestall = () => {
  return apiInstance<void>({
    url: `/api/v1/downloadclient/testall`,
    method: "POST",
  });
};

export const getPostApiV1DownloadclientTestallMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1DownloadclientTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1DownloadclientTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1DownloadclientTestall>>,
    void
  > = () => {
    return postApiV1DownloadclientTestall();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1DownloadclientTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1DownloadclientTestall>>
>;

export type PostApiV1DownloadclientTestallMutationError = ErrorType<unknown>;

export const usePostApiV1DownloadclientTestall = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1DownloadclientTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1DownloadclientTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPostApiV1DownloadclientTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1DownloadclientActionName = (
  name: string,
  downloadClientResource: DownloadClientResource
) => {
  return apiInstance<void>({
    url: `/api/v1/downloadclient/action/${name}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: downloadClientResource,
  });
};

export const getPostApiV1DownloadclientActionNameMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1DownloadclientActionName>>,
    TError,
    { name: string; data: DownloadClientResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1DownloadclientActionName>>,
  TError,
  { name: string; data: DownloadClientResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1DownloadclientActionName>>,
    { name: string; data: DownloadClientResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV1DownloadclientActionName(name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1DownloadclientActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1DownloadclientActionName>>
>;
export type PostApiV1DownloadclientActionNameMutationBody =
  DownloadClientResource;
export type PostApiV1DownloadclientActionNameMutationError = ErrorType<unknown>;

export const usePostApiV1DownloadclientActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1DownloadclientActionName>>,
    TError,
    { name: string; data: DownloadClientResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1DownloadclientActionName>>,
  TError,
  { name: string; data: DownloadClientResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV1DownloadclientActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigDownloadclientId = (
  id: number,
  signal?: AbortSignal
) => {
  return apiInstance<DownloadClientConfigResource>({
    url: `/api/v1/config/downloadclient/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigDownloadclientIdQueryKey = (id: number) => {
  return [`/api/v1/config/downloadclient/${id}`] as const;
};

export const getGetApiV1ConfigDownloadclientIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ConfigDownloadclientIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>
  > = ({ signal }) => getApiV1ConfigDownloadclientId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigDownloadclientIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>
>;
export type GetApiV1ConfigDownloadclientIdQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigDownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigDownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigDownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigDownloadclientId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigDownloadclientIdQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1ConfigDownloadclientId = (
  id: string,
  downloadClientConfigResource: DownloadClientConfigResource
) => {
  return apiInstance<DownloadClientConfigResource>({
    url: `/api/v1/config/downloadclient/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: downloadClientConfigResource,
  });
};

export const getPutApiV1ConfigDownloadclientIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigDownloadclientId>>,
    TError,
    { id: string; data: DownloadClientConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigDownloadclientId>>,
  TError,
  { id: string; data: DownloadClientConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigDownloadclientId>>,
    { id: string; data: DownloadClientConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigDownloadclientId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigDownloadclientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigDownloadclientId>>
>;
export type PutApiV1ConfigDownloadclientIdMutationBody =
  DownloadClientConfigResource;
export type PutApiV1ConfigDownloadclientIdMutationError = ErrorType<unknown>;

export const usePutApiV1ConfigDownloadclientId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigDownloadclientId>>,
    TError,
    { id: string; data: DownloadClientConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ConfigDownloadclientId>>,
  TError,
  { id: string; data: DownloadClientConfigResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV1ConfigDownloadclientIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigDownloadclient = (signal?: AbortSignal) => {
  return apiInstance<DownloadClientConfigResource>({
    url: `/api/v1/config/downloadclient`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigDownloadclientQueryKey = () => {
  return [`/api/v1/config/downloadclient`] as const;
};

export const getGetApiV1ConfigDownloadclientQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ConfigDownloadclientQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>
  > = ({ signal }) => getApiV1ConfigDownloadclient(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigDownloadclientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>
>;
export type GetApiV1ConfigDownloadclientQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigDownloadclient<
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigDownloadclient<
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigDownloadclient<
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigDownloadclient<
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigDownloadclientQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1Filesystem = (
  params?: GetApiV1FilesystemParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v1/filesystem`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1FilesystemQueryKey = (
  params?: GetApiV1FilesystemParams
) => {
  return [`/api/v1/filesystem`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1FilesystemQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Filesystem>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1FilesystemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Filesystem>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1FilesystemQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Filesystem>>
  > = ({ signal }) => getApiV1Filesystem(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Filesystem>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1FilesystemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Filesystem>>
>;
export type GetApiV1FilesystemQueryError = ErrorType<unknown>;

export function useGetApiV1Filesystem<
  TData = Awaited<ReturnType<typeof getApiV1Filesystem>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1FilesystemParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Filesystem>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Filesystem>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Filesystem<
  TData = Awaited<ReturnType<typeof getApiV1Filesystem>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1FilesystemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Filesystem>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Filesystem>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Filesystem<
  TData = Awaited<ReturnType<typeof getApiV1Filesystem>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1FilesystemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Filesystem>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Filesystem<
  TData = Awaited<ReturnType<typeof getApiV1Filesystem>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1FilesystemParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Filesystem>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1FilesystemQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1FilesystemType = (
  params?: GetApiV1FilesystemTypeParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v1/filesystem/type`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1FilesystemTypeQueryKey = (
  params?: GetApiV1FilesystemTypeParams
) => {
  return [`/api/v1/filesystem/type`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1FilesystemTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FilesystemType>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1FilesystemTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemType>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1FilesystemTypeQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1FilesystemType>>
  > = ({ signal }) => getApiV1FilesystemType(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FilesystemType>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1FilesystemTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FilesystemType>>
>;
export type GetApiV1FilesystemTypeQueryError = ErrorType<unknown>;

export function useGetApiV1FilesystemType<
  TData = Awaited<ReturnType<typeof getApiV1FilesystemType>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1FilesystemTypeParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemType>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FilesystemType>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1FilesystemType<
  TData = Awaited<ReturnType<typeof getApiV1FilesystemType>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1FilesystemTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemType>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FilesystemType>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1FilesystemType<
  TData = Awaited<ReturnType<typeof getApiV1FilesystemType>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1FilesystemTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemType>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1FilesystemType<
  TData = Awaited<ReturnType<typeof getApiV1FilesystemType>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1FilesystemTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemType>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1FilesystemTypeQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1FilesystemMediafiles = (
  params?: GetApiV1FilesystemMediafilesParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v1/filesystem/mediafiles`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1FilesystemMediafilesQueryKey = (
  params?: GetApiV1FilesystemMediafilesParams
) => {
  return [
    `/api/v1/filesystem/mediafiles`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1FilesystemMediafilesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1FilesystemMediafilesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1FilesystemMediafilesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>
  > = ({ signal }) => getApiV1FilesystemMediafiles(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1FilesystemMediafilesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>
>;
export type GetApiV1FilesystemMediafilesQueryError = ErrorType<unknown>;

export function useGetApiV1FilesystemMediafiles<
  TData = Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1FilesystemMediafilesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1FilesystemMediafiles<
  TData = Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1FilesystemMediafilesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1FilesystemMediafiles<
  TData = Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1FilesystemMediafilesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1FilesystemMediafiles<
  TData = Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1FilesystemMediafilesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1FilesystemMediafilesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1Health = (signal?: AbortSignal) => {
  return apiInstance<HealthResource[]>({
    url: `/api/v1/health`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1HealthQueryKey = () => {
  return [`/api/v1/health`] as const;
};

export const getGetApiV1HealthQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Health>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Health>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1HealthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Health>>> = ({
    signal,
  }) => getApiV1Health(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Health>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1HealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Health>>
>;
export type GetApiV1HealthQueryError = ErrorType<unknown>;

export function useGetApiV1Health<
  TData = Awaited<ReturnType<typeof getApiV1Health>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Health>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Health>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Health<
  TData = Awaited<ReturnType<typeof getApiV1Health>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Health>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Health>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Health<
  TData = Awaited<ReturnType<typeof getApiV1Health>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Health>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Health<
  TData = Awaited<ReturnType<typeof getApiV1Health>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Health>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1HealthQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1History = (
  params?: GetApiV1HistoryParams,
  signal?: AbortSignal
) => {
  return apiInstance<HistoryResourcePagingResource>({
    url: `/api/v1/history`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1HistoryQueryKey = (params?: GetApiV1HistoryParams) => {
  return [`/api/v1/history`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1HistoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1History>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1HistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1History>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1HistoryQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1History>>> = ({
    signal,
  }) => getApiV1History(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1History>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1HistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1History>>
>;
export type GetApiV1HistoryQueryError = ErrorType<unknown>;

export function useGetApiV1History<
  TData = Awaited<ReturnType<typeof getApiV1History>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1HistoryParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1History>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1History>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1History<
  TData = Awaited<ReturnType<typeof getApiV1History>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1HistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1History>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1History>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1History<
  TData = Awaited<ReturnType<typeof getApiV1History>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1HistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1History>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1History<
  TData = Awaited<ReturnType<typeof getApiV1History>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1HistoryParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1History>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1HistoryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1HistorySince = (
  params?: GetApiV1HistorySinceParams,
  signal?: AbortSignal
) => {
  return apiInstance<HistoryResource[]>({
    url: `/api/v1/history/since`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1HistorySinceQueryKey = (
  params?: GetApiV1HistorySinceParams
) => {
  return [`/api/v1/history/since`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1HistorySinceQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1HistorySince>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1HistorySinceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistorySince>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1HistorySinceQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1HistorySince>>
  > = ({ signal }) => getApiV1HistorySince(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1HistorySince>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1HistorySinceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1HistorySince>>
>;
export type GetApiV1HistorySinceQueryError = ErrorType<unknown>;

export function useGetApiV1HistorySince<
  TData = Awaited<ReturnType<typeof getApiV1HistorySince>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1HistorySinceParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistorySince>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1HistorySince>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1HistorySince<
  TData = Awaited<ReturnType<typeof getApiV1HistorySince>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1HistorySinceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistorySince>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1HistorySince>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1HistorySince<
  TData = Awaited<ReturnType<typeof getApiV1HistorySince>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1HistorySinceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistorySince>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1HistorySince<
  TData = Awaited<ReturnType<typeof getApiV1HistorySince>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1HistorySinceParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistorySince>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1HistorySinceQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1HistoryArtist = (
  params?: GetApiV1HistoryArtistParams,
  signal?: AbortSignal
) => {
  return apiInstance<HistoryResource[]>({
    url: `/api/v1/history/artist`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1HistoryArtistQueryKey = (
  params?: GetApiV1HistoryArtistParams
) => {
  return [`/api/v1/history/artist`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1HistoryArtistQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1HistoryArtist>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1HistoryArtistParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistoryArtist>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1HistoryArtistQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1HistoryArtist>>
  > = ({ signal }) => getApiV1HistoryArtist(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1HistoryArtist>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1HistoryArtistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1HistoryArtist>>
>;
export type GetApiV1HistoryArtistQueryError = ErrorType<unknown>;

export function useGetApiV1HistoryArtist<
  TData = Awaited<ReturnType<typeof getApiV1HistoryArtist>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1HistoryArtistParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistoryArtist>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1HistoryArtist>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1HistoryArtist<
  TData = Awaited<ReturnType<typeof getApiV1HistoryArtist>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1HistoryArtistParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistoryArtist>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1HistoryArtist>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1HistoryArtist<
  TData = Awaited<ReturnType<typeof getApiV1HistoryArtist>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1HistoryArtistParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistoryArtist>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1HistoryArtist<
  TData = Awaited<ReturnType<typeof getApiV1HistoryArtist>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1HistoryArtistParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistoryArtist>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1HistoryArtistQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1HistoryFailedId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/history/failed/${id}`,
    method: "POST",
  });
};

export const getPostApiV1HistoryFailedIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1HistoryFailedId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1HistoryFailedId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1HistoryFailedId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postApiV1HistoryFailedId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1HistoryFailedIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1HistoryFailedId>>
>;

export type PostApiV1HistoryFailedIdMutationError = ErrorType<unknown>;

export const usePostApiV1HistoryFailedId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1HistoryFailedId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1HistoryFailedId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPostApiV1HistoryFailedIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigHostId = (id: number, signal?: AbortSignal) => {
  return apiInstance<HostConfigResource>({
    url: `/api/v1/config/host/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigHostIdQueryKey = (id: number) => {
  return [`/api/v1/config/host/${id}`] as const;
};

export const getGetApiV1ConfigHostIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ConfigHostIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigHostId>>
  > = ({ signal }) => getApiV1ConfigHostId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigHostIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigHostId>>
>;
export type GetApiV1ConfigHostIdQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigHostId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigHostId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigHostId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigHostId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigHostIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1ConfigHostId = (
  id: string,
  hostConfigResource: HostConfigResource
) => {
  return apiInstance<HostConfigResource>({
    url: `/api/v1/config/host/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: hostConfigResource,
  });
};

export const getPutApiV1ConfigHostIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigHostId>>,
    TError,
    { id: string; data: HostConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigHostId>>,
  TError,
  { id: string; data: HostConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigHostId>>,
    { id: string; data: HostConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigHostId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigHostIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigHostId>>
>;
export type PutApiV1ConfigHostIdMutationBody = HostConfigResource;
export type PutApiV1ConfigHostIdMutationError = ErrorType<unknown>;

export const usePutApiV1ConfigHostId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigHostId>>,
    TError,
    { id: string; data: HostConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ConfigHostId>>,
  TError,
  { id: string; data: HostConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV1ConfigHostIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigHost = (signal?: AbortSignal) => {
  return apiInstance<HostConfigResource>({
    url: `/api/v1/config/host`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigHostQueryKey = () => {
  return [`/api/v1/config/host`] as const;
};

export const getGetApiV1ConfigHostQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigHost>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigHost>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ConfigHostQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigHost>>
  > = ({ signal }) => getApiV1ConfigHost(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigHost>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigHostQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigHost>>
>;
export type GetApiV1ConfigHostQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigHost<
  TData = Awaited<ReturnType<typeof getApiV1ConfigHost>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigHost>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigHost>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigHost<
  TData = Awaited<ReturnType<typeof getApiV1ConfigHost>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigHost>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigHost>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigHost<
  TData = Awaited<ReturnType<typeof getApiV1ConfigHost>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigHost>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigHost<
  TData = Awaited<ReturnType<typeof getApiV1ConfigHost>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigHost>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigHostQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1ImportlistId = (id: number, signal?: AbortSignal) => {
  return apiInstance<ImportListResource>({
    url: `/api/v1/importlist/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ImportlistIdQueryKey = (id: number) => {
  return [`/api/v1/importlist/${id}`] as const;
};

export const getGetApiV1ImportlistIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ImportlistIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ImportlistId>>
  > = ({ signal }) => getApiV1ImportlistId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ImportlistId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ImportlistIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ImportlistId>>
>;
export type GetApiV1ImportlistIdQueryError = ErrorType<unknown>;

export function useGetApiV1ImportlistId<
  TData = Awaited<ReturnType<typeof getApiV1ImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ImportlistId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ImportlistId<
  TData = Awaited<ReturnType<typeof getApiV1ImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ImportlistId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ImportlistId<
  TData = Awaited<ReturnType<typeof getApiV1ImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ImportlistId<
  TData = Awaited<ReturnType<typeof getApiV1ImportlistId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ImportlistIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1ImportlistId = (
  id: string,
  importListResource: ImportListResource,
  params?: PutApiV1ImportlistIdParams
) => {
  return apiInstance<ImportListResource>({
    url: `/api/v1/importlist/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: importListResource,
    params,
  });
};

export const getPutApiV1ImportlistIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ImportlistId>>,
    TError,
    {
      id: string;
      data: ImportListResource;
      params?: PutApiV1ImportlistIdParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ImportlistId>>,
  TError,
  { id: string; data: ImportListResource; params?: PutApiV1ImportlistIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ImportlistId>>,
    {
      id: string;
      data: ImportListResource;
      params?: PutApiV1ImportlistIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV1ImportlistId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ImportlistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ImportlistId>>
>;
export type PutApiV1ImportlistIdMutationBody = ImportListResource;
export type PutApiV1ImportlistIdMutationError = ErrorType<unknown>;

export const usePutApiV1ImportlistId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ImportlistId>>,
    TError,
    {
      id: string;
      data: ImportListResource;
      params?: PutApiV1ImportlistIdParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ImportlistId>>,
  TError,
  { id: string; data: ImportListResource; params?: PutApiV1ImportlistIdParams },
  TContext
> => {
  const mutationOptions = getPutApiV1ImportlistIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1ImportlistId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/importlist/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1ImportlistIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ImportlistId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ImportlistId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ImportlistId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1ImportlistId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ImportlistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ImportlistId>>
>;

export type DeleteApiV1ImportlistIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1ImportlistId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ImportlistId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1ImportlistId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1ImportlistIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Importlist = (signal?: AbortSignal) => {
  return apiInstance<ImportListResource[]>({
    url: `/api/v1/importlist`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ImportlistQueryKey = () => {
  return [`/api/v1/importlist`] as const;
};

export const getGetApiV1ImportlistQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Importlist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlist>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ImportlistQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Importlist>>
  > = ({ signal }) => getApiV1Importlist(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Importlist>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ImportlistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Importlist>>
>;
export type GetApiV1ImportlistQueryError = ErrorType<unknown>;

export function useGetApiV1Importlist<
  TData = Awaited<ReturnType<typeof getApiV1Importlist>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlist>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Importlist>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Importlist<
  TData = Awaited<ReturnType<typeof getApiV1Importlist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlist>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Importlist>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Importlist<
  TData = Awaited<ReturnType<typeof getApiV1Importlist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlist>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Importlist<
  TData = Awaited<ReturnType<typeof getApiV1Importlist>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlist>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ImportlistQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Importlist = (
  importListResource: ImportListResource,
  params?: PostApiV1ImportlistParams
) => {
  return apiInstance<ImportListResource>({
    url: `/api/v1/importlist`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: importListResource,
    params,
  });
};

export const getPostApiV1ImportlistMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Importlist>>,
    TError,
    { data: ImportListResource; params?: PostApiV1ImportlistParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Importlist>>,
  TError,
  { data: ImportListResource; params?: PostApiV1ImportlistParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Importlist>>,
    { data: ImportListResource; params?: PostApiV1ImportlistParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1Importlist(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ImportlistMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Importlist>>
>;
export type PostApiV1ImportlistMutationBody = ImportListResource;
export type PostApiV1ImportlistMutationError = ErrorType<unknown>;

export const usePostApiV1Importlist = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Importlist>>,
    TError,
    { data: ImportListResource; params?: PostApiV1ImportlistParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Importlist>>,
  TError,
  { data: ImportListResource; params?: PostApiV1ImportlistParams },
  TContext
> => {
  const mutationOptions = getPostApiV1ImportlistMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1ImportlistBulk = (
  importListBulkResource: ImportListBulkResource
) => {
  return apiInstance<ImportListResource>({
    url: `/api/v1/importlist/bulk`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: importListBulkResource,
  });
};

export const getPutApiV1ImportlistBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ImportlistBulk>>,
  TError,
  { data: ImportListBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ImportlistBulk>>,
    { data: ImportListBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1ImportlistBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ImportlistBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ImportlistBulk>>
>;
export type PutApiV1ImportlistBulkMutationBody = ImportListBulkResource;
export type PutApiV1ImportlistBulkMutationError = ErrorType<unknown>;

export const usePutApiV1ImportlistBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ImportlistBulk>>,
  TError,
  { data: ImportListBulkResource },
  TContext
> => {
  const mutationOptions = getPutApiV1ImportlistBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1ImportlistBulk = (
  importListBulkResource: ImportListBulkResource
) => {
  return apiInstance<void>({
    url: `/api/v1/importlist/bulk`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: importListBulkResource,
  });
};

export const getDeleteApiV1ImportlistBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ImportlistBulk>>,
  TError,
  { data: ImportListBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ImportlistBulk>>,
    { data: ImportListBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV1ImportlistBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ImportlistBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ImportlistBulk>>
>;
export type DeleteApiV1ImportlistBulkMutationBody = ImportListBulkResource;
export type DeleteApiV1ImportlistBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV1ImportlistBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1ImportlistBulk>>,
  TError,
  { data: ImportListBulkResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV1ImportlistBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ImportlistSchema = (signal?: AbortSignal) => {
  return apiInstance<ImportListResource[]>({
    url: `/api/v1/importlist/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ImportlistSchemaQueryKey = () => {
  return [`/api/v1/importlist/schema`] as const;
};

export const getGetApiV1ImportlistSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ImportlistSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ImportlistSchema>>
  > = ({ signal }) => getApiV1ImportlistSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ImportlistSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ImportlistSchema>>
>;
export type GetApiV1ImportlistSchemaQueryError = ErrorType<unknown>;

export function useGetApiV1ImportlistSchema<
  TData = Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ImportlistSchema<
  TData = Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ImportlistSchema<
  TData = Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ImportlistSchema<
  TData = Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ImportlistSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1ImportlistTest = (
  importListResource: ImportListResource
) => {
  return apiInstance<void>({
    url: `/api/v1/importlist/test`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: importListResource,
  });
};

export const getPostApiV1ImportlistTestMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ImportlistTest>>,
    TError,
    { data: ImportListResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ImportlistTest>>,
  TError,
  { data: ImportListResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ImportlistTest>>,
    { data: ImportListResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1ImportlistTest(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ImportlistTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ImportlistTest>>
>;
export type PostApiV1ImportlistTestMutationBody = ImportListResource;
export type PostApiV1ImportlistTestMutationError = ErrorType<unknown>;

export const usePostApiV1ImportlistTest = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ImportlistTest>>,
    TError,
    { data: ImportListResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1ImportlistTest>>,
  TError,
  { data: ImportListResource },
  TContext
> => {
  const mutationOptions = getPostApiV1ImportlistTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1ImportlistTestall = () => {
  return apiInstance<void>({
    url: `/api/v1/importlist/testall`,
    method: "POST",
  });
};

export const getPostApiV1ImportlistTestallMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ImportlistTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ImportlistTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ImportlistTestall>>,
    void
  > = () => {
    return postApiV1ImportlistTestall();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ImportlistTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ImportlistTestall>>
>;

export type PostApiV1ImportlistTestallMutationError = ErrorType<unknown>;

export const usePostApiV1ImportlistTestall = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ImportlistTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1ImportlistTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV1ImportlistTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1ImportlistActionName = (
  name: string,
  importListResource: ImportListResource
) => {
  return apiInstance<void>({
    url: `/api/v1/importlist/action/${name}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: importListResource,
  });
};

export const getPostApiV1ImportlistActionNameMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ImportlistActionName>>,
    TError,
    { name: string; data: ImportListResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ImportlistActionName>>,
  TError,
  { name: string; data: ImportListResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ImportlistActionName>>,
    { name: string; data: ImportListResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV1ImportlistActionName(name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ImportlistActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ImportlistActionName>>
>;
export type PostApiV1ImportlistActionNameMutationBody = ImportListResource;
export type PostApiV1ImportlistActionNameMutationError = ErrorType<unknown>;

export const usePostApiV1ImportlistActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ImportlistActionName>>,
    TError,
    { name: string; data: ImportListResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1ImportlistActionName>>,
  TError,
  { name: string; data: ImportListResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV1ImportlistActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ImportlistexclusionId = (
  id: number,
  signal?: AbortSignal
) => {
  return apiInstance<ImportListExclusionResource>({
    url: `/api/v1/importlistexclusion/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ImportlistexclusionIdQueryKey = (id: number) => {
  return [`/api/v1/importlistexclusion/${id}`] as const;
};

export const getGetApiV1ImportlistexclusionIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ImportlistexclusionIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>
  > = ({ signal }) => getApiV1ImportlistexclusionId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ImportlistexclusionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>
>;
export type GetApiV1ImportlistexclusionIdQueryError = ErrorType<unknown>;

export function useGetApiV1ImportlistexclusionId<
  TData = Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ImportlistexclusionId<
  TData = Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ImportlistexclusionId<
  TData = Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ImportlistexclusionId<
  TData = Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ImportlistexclusionIdQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1ImportlistexclusionId = (
  id: string,
  importListExclusionResource: ImportListExclusionResource
) => {
  return apiInstance<ImportListExclusionResource>({
    url: `/api/v1/importlistexclusion/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: importListExclusionResource,
  });
};

export const getPutApiV1ImportlistexclusionIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ImportlistexclusionId>>,
    TError,
    { id: string; data: ImportListExclusionResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ImportlistexclusionId>>,
  TError,
  { id: string; data: ImportListExclusionResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ImportlistexclusionId>>,
    { id: string; data: ImportListExclusionResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ImportlistexclusionId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ImportlistexclusionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ImportlistexclusionId>>
>;
export type PutApiV1ImportlistexclusionIdMutationBody =
  ImportListExclusionResource;
export type PutApiV1ImportlistexclusionIdMutationError = ErrorType<unknown>;

export const usePutApiV1ImportlistexclusionId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ImportlistexclusionId>>,
    TError,
    { id: string; data: ImportListExclusionResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ImportlistexclusionId>>,
  TError,
  { id: string; data: ImportListExclusionResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV1ImportlistexclusionIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1ImportlistexclusionId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/importlistexclusion/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1ImportlistexclusionIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ImportlistexclusionId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ImportlistexclusionId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ImportlistexclusionId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1ImportlistexclusionId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ImportlistexclusionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ImportlistexclusionId>>
>;

export type DeleteApiV1ImportlistexclusionIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1ImportlistexclusionId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ImportlistexclusionId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1ImportlistexclusionId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1ImportlistexclusionIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Importlistexclusion = (signal?: AbortSignal) => {
  return apiInstance<ImportListExclusionResource[]>({
    url: `/api/v1/importlistexclusion`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ImportlistexclusionQueryKey = () => {
  return [`/api/v1/importlistexclusion`] as const;
};

export const getGetApiV1ImportlistexclusionQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ImportlistexclusionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Importlistexclusion>>
  > = ({ signal }) => getApiV1Importlistexclusion(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ImportlistexclusionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Importlistexclusion>>
>;
export type GetApiV1ImportlistexclusionQueryError = ErrorType<unknown>;

export function useGetApiV1Importlistexclusion<
  TData = Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Importlistexclusion<
  TData = Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Importlistexclusion<
  TData = Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Importlistexclusion<
  TData = Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ImportlistexclusionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Importlistexclusion = (
  importListExclusionResource: ImportListExclusionResource
) => {
  return apiInstance<ImportListExclusionResource>({
    url: `/api/v1/importlistexclusion`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: importListExclusionResource,
  });
};

export const getPostApiV1ImportlistexclusionMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Importlistexclusion>>,
    TError,
    { data: ImportListExclusionResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Importlistexclusion>>,
  TError,
  { data: ImportListExclusionResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Importlistexclusion>>,
    { data: ImportListExclusionResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Importlistexclusion(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ImportlistexclusionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Importlistexclusion>>
>;
export type PostApiV1ImportlistexclusionMutationBody =
  ImportListExclusionResource;
export type PostApiV1ImportlistexclusionMutationError = ErrorType<unknown>;

export const usePostApiV1Importlistexclusion = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Importlistexclusion>>,
    TError,
    { data: ImportListExclusionResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Importlistexclusion>>,
  TError,
  { data: ImportListExclusionResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV1ImportlistexclusionMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1IndexerId = (id: number, signal?: AbortSignal) => {
  return apiInstance<IndexerResource>({
    url: `/api/v1/indexer/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1IndexerIdQueryKey = (id: number) => {
  return [`/api/v1/indexer/${id}`] as const;
};

export const getGetApiV1IndexerIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1IndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IndexerId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1IndexerIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1IndexerId>>
  > = ({ signal }) => getApiV1IndexerId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1IndexerId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1IndexerIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1IndexerId>>
>;
export type GetApiV1IndexerIdQueryError = ErrorType<unknown>;

export function useGetApiV1IndexerId<
  TData = Awaited<ReturnType<typeof getApiV1IndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IndexerId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1IndexerId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IndexerId<
  TData = Awaited<ReturnType<typeof getApiV1IndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IndexerId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1IndexerId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IndexerId<
  TData = Awaited<ReturnType<typeof getApiV1IndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IndexerId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1IndexerId<
  TData = Awaited<ReturnType<typeof getApiV1IndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IndexerId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1IndexerIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1IndexerId = (
  id: string,
  indexerResource: IndexerResource,
  params?: PutApiV1IndexerIdParams
) => {
  return apiInstance<IndexerResource>({
    url: `/api/v1/indexer/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: indexerResource,
    params,
  });
};

export const getPutApiV1IndexerIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1IndexerId>>,
    TError,
    { id: string; data: IndexerResource; params?: PutApiV1IndexerIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1IndexerId>>,
  TError,
  { id: string; data: IndexerResource; params?: PutApiV1IndexerIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1IndexerId>>,
    { id: string; data: IndexerResource; params?: PutApiV1IndexerIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV1IndexerId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1IndexerIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1IndexerId>>
>;
export type PutApiV1IndexerIdMutationBody = IndexerResource;
export type PutApiV1IndexerIdMutationError = ErrorType<unknown>;

export const usePutApiV1IndexerId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1IndexerId>>,
    TError,
    { id: string; data: IndexerResource; params?: PutApiV1IndexerIdParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1IndexerId>>,
  TError,
  { id: string; data: IndexerResource; params?: PutApiV1IndexerIdParams },
  TContext
> => {
  const mutationOptions = getPutApiV1IndexerIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1IndexerId = (id: number) => {
  return apiInstance<void>({ url: `/api/v1/indexer/${id}`, method: "DELETE" });
};

export const getDeleteApiV1IndexerIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1IndexerId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1IndexerId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1IndexerId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1IndexerId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1IndexerIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1IndexerId>>
>;

export type DeleteApiV1IndexerIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1IndexerId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1IndexerId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1IndexerId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1IndexerIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Indexer = (signal?: AbortSignal) => {
  return apiInstance<IndexerResource[]>({
    url: `/api/v1/indexer`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1IndexerQueryKey = () => {
  return [`/api/v1/indexer`] as const;
};

export const getGetApiV1IndexerQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Indexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Indexer>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1IndexerQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Indexer>>> = ({
    signal,
  }) => getApiV1Indexer(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Indexer>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1IndexerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Indexer>>
>;
export type GetApiV1IndexerQueryError = ErrorType<unknown>;

export function useGetApiV1Indexer<
  TData = Awaited<ReturnType<typeof getApiV1Indexer>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Indexer>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Indexer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Indexer<
  TData = Awaited<ReturnType<typeof getApiV1Indexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Indexer>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Indexer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Indexer<
  TData = Awaited<ReturnType<typeof getApiV1Indexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Indexer>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Indexer<
  TData = Awaited<ReturnType<typeof getApiV1Indexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Indexer>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1IndexerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Indexer = (
  indexerResource: IndexerResource,
  params?: PostApiV1IndexerParams
) => {
  return apiInstance<IndexerResource>({
    url: `/api/v1/indexer`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: indexerResource,
    params,
  });
};

export const getPostApiV1IndexerMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Indexer>>,
    TError,
    { data: IndexerResource; params?: PostApiV1IndexerParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Indexer>>,
  TError,
  { data: IndexerResource; params?: PostApiV1IndexerParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Indexer>>,
    { data: IndexerResource; params?: PostApiV1IndexerParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1Indexer(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1IndexerMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Indexer>>
>;
export type PostApiV1IndexerMutationBody = IndexerResource;
export type PostApiV1IndexerMutationError = ErrorType<unknown>;

export const usePostApiV1Indexer = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Indexer>>,
    TError,
    { data: IndexerResource; params?: PostApiV1IndexerParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Indexer>>,
  TError,
  { data: IndexerResource; params?: PostApiV1IndexerParams },
  TContext
> => {
  const mutationOptions = getPostApiV1IndexerMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1IndexerBulk = (
  indexerBulkResource: IndexerBulkResource
) => {
  return apiInstance<IndexerResource>({
    url: `/api/v1/indexer/bulk`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: indexerBulkResource,
  });
};

export const getPutApiV1IndexerBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1IndexerBulk>>,
  TError,
  { data: IndexerBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1IndexerBulk>>,
    { data: IndexerBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1IndexerBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1IndexerBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1IndexerBulk>>
>;
export type PutApiV1IndexerBulkMutationBody = IndexerBulkResource;
export type PutApiV1IndexerBulkMutationError = ErrorType<unknown>;

export const usePutApiV1IndexerBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1IndexerBulk>>,
  TError,
  { data: IndexerBulkResource },
  TContext
> => {
  const mutationOptions = getPutApiV1IndexerBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1IndexerBulk = (
  indexerBulkResource: IndexerBulkResource
) => {
  return apiInstance<void>({
    url: `/api/v1/indexer/bulk`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: indexerBulkResource,
  });
};

export const getDeleteApiV1IndexerBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1IndexerBulk>>,
  TError,
  { data: IndexerBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1IndexerBulk>>,
    { data: IndexerBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV1IndexerBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1IndexerBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1IndexerBulk>>
>;
export type DeleteApiV1IndexerBulkMutationBody = IndexerBulkResource;
export type DeleteApiV1IndexerBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV1IndexerBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1IndexerBulk>>,
  TError,
  { data: IndexerBulkResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV1IndexerBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1IndexerSchema = (signal?: AbortSignal) => {
  return apiInstance<IndexerResource[]>({
    url: `/api/v1/indexer/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1IndexerSchemaQueryKey = () => {
  return [`/api/v1/indexer/schema`] as const;
};

export const getGetApiV1IndexerSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1IndexerSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1IndexerSchema>>
  > = ({ signal }) => getApiV1IndexerSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1IndexerSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1IndexerSchema>>
>;
export type GetApiV1IndexerSchemaQueryError = ErrorType<unknown>;

export function useGetApiV1IndexerSchema<
  TData = Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IndexerSchema<
  TData = Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IndexerSchema<
  TData = Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1IndexerSchema<
  TData = Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1IndexerSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1IndexerTest = (indexerResource: IndexerResource) => {
  return apiInstance<void>({
    url: `/api/v1/indexer/test`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: indexerResource,
  });
};

export const getPostApiV1IndexerTestMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IndexerTest>>,
    TError,
    { data: IndexerResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1IndexerTest>>,
  TError,
  { data: IndexerResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1IndexerTest>>,
    { data: IndexerResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1IndexerTest(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1IndexerTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1IndexerTest>>
>;
export type PostApiV1IndexerTestMutationBody = IndexerResource;
export type PostApiV1IndexerTestMutationError = ErrorType<unknown>;

export const usePostApiV1IndexerTest = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IndexerTest>>,
    TError,
    { data: IndexerResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1IndexerTest>>,
  TError,
  { data: IndexerResource },
  TContext
> => {
  const mutationOptions = getPostApiV1IndexerTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1IndexerTestall = () => {
  return apiInstance<void>({ url: `/api/v1/indexer/testall`, method: "POST" });
};

export const getPostApiV1IndexerTestallMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IndexerTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1IndexerTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1IndexerTestall>>,
    void
  > = () => {
    return postApiV1IndexerTestall();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1IndexerTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1IndexerTestall>>
>;

export type PostApiV1IndexerTestallMutationError = ErrorType<unknown>;

export const usePostApiV1IndexerTestall = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IndexerTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1IndexerTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV1IndexerTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1IndexerActionName = (
  name: string,
  indexerResource: IndexerResource
) => {
  return apiInstance<void>({
    url: `/api/v1/indexer/action/${name}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: indexerResource,
  });
};

export const getPostApiV1IndexerActionNameMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IndexerActionName>>,
    TError,
    { name: string; data: IndexerResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1IndexerActionName>>,
  TError,
  { name: string; data: IndexerResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1IndexerActionName>>,
    { name: string; data: IndexerResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV1IndexerActionName(name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1IndexerActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1IndexerActionName>>
>;
export type PostApiV1IndexerActionNameMutationBody = IndexerResource;
export type PostApiV1IndexerActionNameMutationError = ErrorType<unknown>;

export const usePostApiV1IndexerActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IndexerActionName>>,
    TError,
    { name: string; data: IndexerResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1IndexerActionName>>,
  TError,
  { name: string; data: IndexerResource },
  TContext
> => {
  const mutationOptions = getPostApiV1IndexerActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigIndexerId = (id: number, signal?: AbortSignal) => {
  return apiInstance<IndexerConfigResource>({
    url: `/api/v1/config/indexer/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigIndexerIdQueryKey = (id: number) => {
  return [`/api/v1/config/indexer/${id}`] as const;
};

export const getGetApiV1ConfigIndexerIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ConfigIndexerIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>
  > = ({ signal }) => getApiV1ConfigIndexerId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigIndexerIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>
>;
export type GetApiV1ConfigIndexerIdQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigIndexerId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigIndexerId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigIndexerId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigIndexerId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigIndexerIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1ConfigIndexerId = (
  id: string,
  indexerConfigResource: IndexerConfigResource
) => {
  return apiInstance<IndexerConfigResource>({
    url: `/api/v1/config/indexer/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: indexerConfigResource,
  });
};

export const getPutApiV1ConfigIndexerIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigIndexerId>>,
    TError,
    { id: string; data: IndexerConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigIndexerId>>,
  TError,
  { id: string; data: IndexerConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigIndexerId>>,
    { id: string; data: IndexerConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigIndexerId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigIndexerIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigIndexerId>>
>;
export type PutApiV1ConfigIndexerIdMutationBody = IndexerConfigResource;
export type PutApiV1ConfigIndexerIdMutationError = ErrorType<unknown>;

export const usePutApiV1ConfigIndexerId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigIndexerId>>,
    TError,
    { id: string; data: IndexerConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ConfigIndexerId>>,
  TError,
  { id: string; data: IndexerConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV1ConfigIndexerIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigIndexer = (signal?: AbortSignal) => {
  return apiInstance<IndexerConfigResource>({
    url: `/api/v1/config/indexer`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigIndexerQueryKey = () => {
  return [`/api/v1/config/indexer`] as const;
};

export const getGetApiV1ConfigIndexerQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ConfigIndexerQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigIndexer>>
  > = ({ signal }) => getApiV1ConfigIndexer(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigIndexerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigIndexer>>
>;
export type GetApiV1ConfigIndexerQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigIndexer<
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigIndexer<
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigIndexer<
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigIndexer<
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigIndexerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1LanguageId = (id: number, signal?: AbortSignal) => {
  return apiInstance<LanguageResource>({
    url: `/api/v1/language/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1LanguageIdQueryKey = (id: number) => {
  return [`/api/v1/language/${id}`] as const;
};

export const getGetApiV1LanguageIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1LanguageId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LanguageId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1LanguageIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1LanguageId>>
  > = ({ signal }) => getApiV1LanguageId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1LanguageId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1LanguageIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1LanguageId>>
>;
export type GetApiV1LanguageIdQueryError = ErrorType<unknown>;

export function useGetApiV1LanguageId<
  TData = Awaited<ReturnType<typeof getApiV1LanguageId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LanguageId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1LanguageId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1LanguageId<
  TData = Awaited<ReturnType<typeof getApiV1LanguageId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LanguageId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1LanguageId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1LanguageId<
  TData = Awaited<ReturnType<typeof getApiV1LanguageId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LanguageId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1LanguageId<
  TData = Awaited<ReturnType<typeof getApiV1LanguageId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LanguageId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1LanguageIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1Language = (signal?: AbortSignal) => {
  return apiInstance<LanguageResource[]>({
    url: `/api/v1/language`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1LanguageQueryKey = () => {
  return [`/api/v1/language`] as const;
};

export const getGetApiV1LanguageQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Language>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Language>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1LanguageQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Language>>
  > = ({ signal }) => getApiV1Language(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Language>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1LanguageQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Language>>
>;
export type GetApiV1LanguageQueryError = ErrorType<unknown>;

export function useGetApiV1Language<
  TData = Awaited<ReturnType<typeof getApiV1Language>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Language>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Language>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Language<
  TData = Awaited<ReturnType<typeof getApiV1Language>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Language>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Language>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Language<
  TData = Awaited<ReturnType<typeof getApiV1Language>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Language>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Language<
  TData = Awaited<ReturnType<typeof getApiV1Language>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Language>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1LanguageQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1Localization = (signal?: AbortSignal) => {
  return apiInstance<LocalizationResource>({
    url: `/api/v1/localization`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1LocalizationQueryKey = () => {
  return [`/api/v1/localization`] as const;
};

export const getGetApiV1LocalizationQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Localization>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Localization>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1LocalizationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Localization>>
  > = ({ signal }) => getApiV1Localization(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Localization>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1LocalizationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Localization>>
>;
export type GetApiV1LocalizationQueryError = ErrorType<unknown>;

export function useGetApiV1Localization<
  TData = Awaited<ReturnType<typeof getApiV1Localization>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Localization>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Localization>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Localization<
  TData = Awaited<ReturnType<typeof getApiV1Localization>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Localization>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Localization>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Localization<
  TData = Awaited<ReturnType<typeof getApiV1Localization>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Localization>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Localization<
  TData = Awaited<ReturnType<typeof getApiV1Localization>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Localization>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1LocalizationQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1Log = (signal?: AbortSignal) => {
  return apiInstance<LogResourcePagingResource>({
    url: `/api/v1/log`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1LogQueryKey = () => {
  return [`/api/v1/log`] as const;
};

export const getGetApiV1LogQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Log>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Log>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1LogQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Log>>> = ({
    signal,
  }) => getApiV1Log(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Log>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1LogQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Log>>
>;
export type GetApiV1LogQueryError = ErrorType<unknown>;

export function useGetApiV1Log<
  TData = Awaited<ReturnType<typeof getApiV1Log>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Log>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Log>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Log<
  TData = Awaited<ReturnType<typeof getApiV1Log>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Log>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Log>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Log<
  TData = Awaited<ReturnType<typeof getApiV1Log>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Log>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Log<
  TData = Awaited<ReturnType<typeof getApiV1Log>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Log>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1LogQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1LogFile = (signal?: AbortSignal) => {
  return apiInstance<LogFileResource[]>({
    url: `/api/v1/log/file`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1LogFileQueryKey = () => {
  return [`/api/v1/log/file`] as const;
};

export const getGetApiV1LogFileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1LogFile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1LogFile>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1LogFileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1LogFile>>> = ({
    signal,
  }) => getApiV1LogFile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1LogFile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1LogFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1LogFile>>
>;
export type GetApiV1LogFileQueryError = ErrorType<unknown>;

export function useGetApiV1LogFile<
  TData = Awaited<ReturnType<typeof getApiV1LogFile>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1LogFile>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1LogFile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1LogFile<
  TData = Awaited<ReturnType<typeof getApiV1LogFile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1LogFile>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1LogFile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1LogFile<
  TData = Awaited<ReturnType<typeof getApiV1LogFile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1LogFile>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1LogFile<
  TData = Awaited<ReturnType<typeof getApiV1LogFile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1LogFile>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1LogFileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1LogFileFilename = (
  filename: string,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v1/log/file/${filename}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1LogFileFilenameQueryKey = (filename: string) => {
  return [`/api/v1/log/file/${filename}`] as const;
};

export const getGetApiV1LogFileFilenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1LogFileFilenameQueryKey(filename);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1LogFileFilename>>
  > = ({ signal }) => getApiV1LogFileFilename(filename, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!filename,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1LogFileFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1LogFileFilename>>
>;
export type GetApiV1LogFileFilenameQueryError = ErrorType<unknown>;

export function useGetApiV1LogFileFilename<
  TData = Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1LogFileFilename<
  TData = Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1LogFileFilename<
  TData = Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1LogFileFilename<
  TData = Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1LogFileFilenameQueryOptions(
    filename,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Manualimport = (
  manualImportUpdateResource: ManualImportUpdateResource[]
) => {
  return apiInstance<void>({
    url: `/api/v1/manualimport`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: manualImportUpdateResource,
  });
};

export const getPostApiV1ManualimportMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Manualimport>>,
    TError,
    { data: ManualImportUpdateResource[] },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Manualimport>>,
  TError,
  { data: ManualImportUpdateResource[] },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Manualimport>>,
    { data: ManualImportUpdateResource[] }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Manualimport(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ManualimportMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Manualimport>>
>;
export type PostApiV1ManualimportMutationBody = ManualImportUpdateResource[];
export type PostApiV1ManualimportMutationError = ErrorType<unknown>;

export const usePostApiV1Manualimport = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Manualimport>>,
    TError,
    { data: ManualImportUpdateResource[] },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Manualimport>>,
  TError,
  { data: ManualImportUpdateResource[] },
  TContext
> => {
  const mutationOptions = getPostApiV1ManualimportMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Manualimport = (
  params?: GetApiV1ManualimportParams,
  signal?: AbortSignal
) => {
  return apiInstance<ManualImportResource[]>({
    url: `/api/v1/manualimport`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1ManualimportQueryKey = (
  params?: GetApiV1ManualimportParams
) => {
  return [`/api/v1/manualimport`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ManualimportQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Manualimport>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ManualimportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Manualimport>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ManualimportQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Manualimport>>
  > = ({ signal }) => getApiV1Manualimport(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Manualimport>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ManualimportQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Manualimport>>
>;
export type GetApiV1ManualimportQueryError = ErrorType<unknown>;

export function useGetApiV1Manualimport<
  TData = Awaited<ReturnType<typeof getApiV1Manualimport>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1ManualimportParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Manualimport>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Manualimport>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Manualimport<
  TData = Awaited<ReturnType<typeof getApiV1Manualimport>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ManualimportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Manualimport>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Manualimport>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Manualimport<
  TData = Awaited<ReturnType<typeof getApiV1Manualimport>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ManualimportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Manualimport>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Manualimport<
  TData = Awaited<ReturnType<typeof getApiV1Manualimport>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ManualimportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Manualimport>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ManualimportQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1MediacoverArtistArtistIdFilename = (
  artistId: number,
  filename: string,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v1/mediacover/artist/${artistId}/${filename}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1MediacoverArtistArtistIdFilenameQueryKey = (
  artistId: number,
  filename: string
) => {
  return [`/api/v1/mediacover/artist/${artistId}/${filename}`] as const;
};

export const getGetApiV1MediacoverArtistArtistIdFilenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>,
  TError = ErrorType<unknown>
>(
  artistId: number,
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1MediacoverArtistArtistIdFilenameQueryKey(artistId, filename);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>
  > = ({ signal }) =>
    getApiV1MediacoverArtistArtistIdFilename(artistId, filename, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(artistId && filename),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1MediacoverArtistArtistIdFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>
>;
export type GetApiV1MediacoverArtistArtistIdFilenameQueryError =
  ErrorType<unknown>;

export function useGetApiV1MediacoverArtistArtistIdFilename<
  TData = Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>,
  TError = ErrorType<unknown>
>(
  artistId: number,
  filename: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1MediacoverArtistArtistIdFilename<
  TData = Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>,
  TError = ErrorType<unknown>
>(
  artistId: number,
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1MediacoverArtistArtistIdFilename<
  TData = Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>,
  TError = ErrorType<unknown>
>(
  artistId: number,
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1MediacoverArtistArtistIdFilename<
  TData = Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>,
  TError = ErrorType<unknown>
>(
  artistId: number,
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverArtistArtistIdFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1MediacoverArtistArtistIdFilenameQueryOptions(
    artistId,
    filename,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1MediacoverAlbumAlbumIdFilename = (
  albumId: number,
  filename: string,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v1/mediacover/album/${albumId}/${filename}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1MediacoverAlbumAlbumIdFilenameQueryKey = (
  albumId: number,
  filename: string
) => {
  return [`/api/v1/mediacover/album/${albumId}/${filename}`] as const;
};

export const getGetApiV1MediacoverAlbumAlbumIdFilenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>,
  TError = ErrorType<unknown>
>(
  albumId: number,
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1MediacoverAlbumAlbumIdFilenameQueryKey(albumId, filename);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>
  > = ({ signal }) =>
    getApiV1MediacoverAlbumAlbumIdFilename(albumId, filename, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(albumId && filename),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1MediacoverAlbumAlbumIdFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>
>;
export type GetApiV1MediacoverAlbumAlbumIdFilenameQueryError =
  ErrorType<unknown>;

export function useGetApiV1MediacoverAlbumAlbumIdFilename<
  TData = Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>,
  TError = ErrorType<unknown>
>(
  albumId: number,
  filename: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1MediacoverAlbumAlbumIdFilename<
  TData = Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>,
  TError = ErrorType<unknown>
>(
  albumId: number,
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1MediacoverAlbumAlbumIdFilename<
  TData = Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>,
  TError = ErrorType<unknown>
>(
  albumId: number,
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1MediacoverAlbumAlbumIdFilename<
  TData = Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>,
  TError = ErrorType<unknown>
>(
  albumId: number,
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverAlbumAlbumIdFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1MediacoverAlbumAlbumIdFilenameQueryOptions(
    albumId,
    filename,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1ConfigMediamanagementId = (
  id: number,
  signal?: AbortSignal
) => {
  return apiInstance<MediaManagementConfigResource>({
    url: `/api/v1/config/mediamanagement/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigMediamanagementIdQueryKey = (id: number) => {
  return [`/api/v1/config/mediamanagement/${id}`] as const;
};

export const getGetApiV1ConfigMediamanagementIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ConfigMediamanagementIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>
  > = ({ signal }) => getApiV1ConfigMediamanagementId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigMediamanagementIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>
>;
export type GetApiV1ConfigMediamanagementIdQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigMediamanagementId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigMediamanagementId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigMediamanagementId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigMediamanagementId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigMediamanagementIdQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1ConfigMediamanagementId = (
  id: string,
  mediaManagementConfigResource: MediaManagementConfigResource
) => {
  return apiInstance<MediaManagementConfigResource>({
    url: `/api/v1/config/mediamanagement/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: mediaManagementConfigResource,
  });
};

export const getPutApiV1ConfigMediamanagementIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigMediamanagementId>>,
    TError,
    { id: string; data: MediaManagementConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigMediamanagementId>>,
  TError,
  { id: string; data: MediaManagementConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigMediamanagementId>>,
    { id: string; data: MediaManagementConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigMediamanagementId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigMediamanagementIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigMediamanagementId>>
>;
export type PutApiV1ConfigMediamanagementIdMutationBody =
  MediaManagementConfigResource;
export type PutApiV1ConfigMediamanagementIdMutationError = ErrorType<unknown>;

export const usePutApiV1ConfigMediamanagementId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigMediamanagementId>>,
    TError,
    { id: string; data: MediaManagementConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ConfigMediamanagementId>>,
  TError,
  { id: string; data: MediaManagementConfigResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV1ConfigMediamanagementIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigMediamanagement = (signal?: AbortSignal) => {
  return apiInstance<MediaManagementConfigResource>({
    url: `/api/v1/config/mediamanagement`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigMediamanagementQueryKey = () => {
  return [`/api/v1/config/mediamanagement`] as const;
};

export const getGetApiV1ConfigMediamanagementQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ConfigMediamanagementQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>
  > = ({ signal }) => getApiV1ConfigMediamanagement(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigMediamanagementQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>
>;
export type GetApiV1ConfigMediamanagementQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigMediamanagement<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigMediamanagement<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigMediamanagement<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigMediamanagement<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigMediamanagementQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1MetadataId = (id: number, signal?: AbortSignal) => {
  return apiInstance<MetadataResource>({
    url: `/api/v1/metadata/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1MetadataIdQueryKey = (id: number) => {
  return [`/api/v1/metadata/${id}`] as const;
};

export const getGetApiV1MetadataIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1MetadataIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MetadataId>>
  > = ({ signal }) => getApiV1MetadataId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MetadataId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1MetadataIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MetadataId>>
>;
export type GetApiV1MetadataIdQueryError = ErrorType<unknown>;

export function useGetApiV1MetadataId<
  TData = Awaited<ReturnType<typeof getApiV1MetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MetadataId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1MetadataId<
  TData = Awaited<ReturnType<typeof getApiV1MetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MetadataId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1MetadataId<
  TData = Awaited<ReturnType<typeof getApiV1MetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1MetadataId<
  TData = Awaited<ReturnType<typeof getApiV1MetadataId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1MetadataIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1MetadataId = (
  id: string,
  metadataResource: MetadataResource,
  params?: PutApiV1MetadataIdParams
) => {
  return apiInstance<MetadataResource>({
    url: `/api/v1/metadata/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: metadataResource,
    params,
  });
};

export const getPutApiV1MetadataIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1MetadataId>>,
    TError,
    { id: string; data: MetadataResource; params?: PutApiV1MetadataIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1MetadataId>>,
  TError,
  { id: string; data: MetadataResource; params?: PutApiV1MetadataIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1MetadataId>>,
    { id: string; data: MetadataResource; params?: PutApiV1MetadataIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV1MetadataId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1MetadataIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1MetadataId>>
>;
export type PutApiV1MetadataIdMutationBody = MetadataResource;
export type PutApiV1MetadataIdMutationError = ErrorType<unknown>;

export const usePutApiV1MetadataId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1MetadataId>>,
    TError,
    { id: string; data: MetadataResource; params?: PutApiV1MetadataIdParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1MetadataId>>,
  TError,
  { id: string; data: MetadataResource; params?: PutApiV1MetadataIdParams },
  TContext
> => {
  const mutationOptions = getPutApiV1MetadataIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1MetadataId = (id: number) => {
  return apiInstance<void>({ url: `/api/v1/metadata/${id}`, method: "DELETE" });
};

export const getDeleteApiV1MetadataIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1MetadataId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1MetadataId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1MetadataId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1MetadataId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1MetadataIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1MetadataId>>
>;

export type DeleteApiV1MetadataIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1MetadataId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1MetadataId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1MetadataId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1MetadataIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Metadata = (signal?: AbortSignal) => {
  return apiInstance<MetadataResource[]>({
    url: `/api/v1/metadata`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1MetadataQueryKey = () => {
  return [`/api/v1/metadata`] as const;
};

export const getGetApiV1MetadataQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Metadata>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Metadata>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1MetadataQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Metadata>>
  > = ({ signal }) => getApiV1Metadata(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Metadata>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1MetadataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Metadata>>
>;
export type GetApiV1MetadataQueryError = ErrorType<unknown>;

export function useGetApiV1Metadata<
  TData = Awaited<ReturnType<typeof getApiV1Metadata>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Metadata>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Metadata>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Metadata<
  TData = Awaited<ReturnType<typeof getApiV1Metadata>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Metadata>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Metadata>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Metadata<
  TData = Awaited<ReturnType<typeof getApiV1Metadata>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Metadata>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Metadata<
  TData = Awaited<ReturnType<typeof getApiV1Metadata>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Metadata>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1MetadataQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Metadata = (
  metadataResource: MetadataResource,
  params?: PostApiV1MetadataParams
) => {
  return apiInstance<MetadataResource>({
    url: `/api/v1/metadata`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: metadataResource,
    params,
  });
};

export const getPostApiV1MetadataMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Metadata>>,
    TError,
    { data: MetadataResource; params?: PostApiV1MetadataParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Metadata>>,
  TError,
  { data: MetadataResource; params?: PostApiV1MetadataParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Metadata>>,
    { data: MetadataResource; params?: PostApiV1MetadataParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1Metadata(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1MetadataMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Metadata>>
>;
export type PostApiV1MetadataMutationBody = MetadataResource;
export type PostApiV1MetadataMutationError = ErrorType<unknown>;

export const usePostApiV1Metadata = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Metadata>>,
    TError,
    { data: MetadataResource; params?: PostApiV1MetadataParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Metadata>>,
  TError,
  { data: MetadataResource; params?: PostApiV1MetadataParams },
  TContext
> => {
  const mutationOptions = getPostApiV1MetadataMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1MetadataSchema = (signal?: AbortSignal) => {
  return apiInstance<MetadataResource[]>({
    url: `/api/v1/metadata/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1MetadataSchemaQueryKey = () => {
  return [`/api/v1/metadata/schema`] as const;
};

export const getGetApiV1MetadataSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1MetadataSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MetadataSchema>>
  > = ({ signal }) => getApiV1MetadataSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1MetadataSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MetadataSchema>>
>;
export type GetApiV1MetadataSchemaQueryError = ErrorType<unknown>;

export function useGetApiV1MetadataSchema<
  TData = Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1MetadataSchema<
  TData = Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1MetadataSchema<
  TData = Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1MetadataSchema<
  TData = Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1MetadataSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1MetadataTest = (metadataResource: MetadataResource) => {
  return apiInstance<void>({
    url: `/api/v1/metadata/test`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: metadataResource,
  });
};

export const getPostApiV1MetadataTestMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MetadataTest>>,
    TError,
    { data: MetadataResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1MetadataTest>>,
  TError,
  { data: MetadataResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1MetadataTest>>,
    { data: MetadataResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1MetadataTest(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1MetadataTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1MetadataTest>>
>;
export type PostApiV1MetadataTestMutationBody = MetadataResource;
export type PostApiV1MetadataTestMutationError = ErrorType<unknown>;

export const usePostApiV1MetadataTest = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MetadataTest>>,
    TError,
    { data: MetadataResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1MetadataTest>>,
  TError,
  { data: MetadataResource },
  TContext
> => {
  const mutationOptions = getPostApiV1MetadataTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1MetadataTestall = () => {
  return apiInstance<void>({ url: `/api/v1/metadata/testall`, method: "POST" });
};

export const getPostApiV1MetadataTestallMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MetadataTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1MetadataTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1MetadataTestall>>,
    void
  > = () => {
    return postApiV1MetadataTestall();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1MetadataTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1MetadataTestall>>
>;

export type PostApiV1MetadataTestallMutationError = ErrorType<unknown>;

export const usePostApiV1MetadataTestall = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MetadataTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1MetadataTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV1MetadataTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1MetadataActionName = (
  name: string,
  metadataResource: MetadataResource
) => {
  return apiInstance<void>({
    url: `/api/v1/metadata/action/${name}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: metadataResource,
  });
};

export const getPostApiV1MetadataActionNameMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MetadataActionName>>,
    TError,
    { name: string; data: MetadataResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1MetadataActionName>>,
  TError,
  { name: string; data: MetadataResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1MetadataActionName>>,
    { name: string; data: MetadataResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV1MetadataActionName(name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1MetadataActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1MetadataActionName>>
>;
export type PostApiV1MetadataActionNameMutationBody = MetadataResource;
export type PostApiV1MetadataActionNameMutationError = ErrorType<unknown>;

export const usePostApiV1MetadataActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MetadataActionName>>,
    TError,
    { name: string; data: MetadataResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1MetadataActionName>>,
  TError,
  { name: string; data: MetadataResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV1MetadataActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1Metadataprofile = (
  metadataProfileResource: MetadataProfileResource
) => {
  return apiInstance<MetadataProfileResource>({
    url: `/api/v1/metadataprofile`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: metadataProfileResource,
  });
};

export const getPostApiV1MetadataprofileMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Metadataprofile>>,
    TError,
    { data: MetadataProfileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Metadataprofile>>,
  TError,
  { data: MetadataProfileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Metadataprofile>>,
    { data: MetadataProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Metadataprofile(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1MetadataprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Metadataprofile>>
>;
export type PostApiV1MetadataprofileMutationBody = MetadataProfileResource;
export type PostApiV1MetadataprofileMutationError = ErrorType<unknown>;

export const usePostApiV1Metadataprofile = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Metadataprofile>>,
    TError,
    { data: MetadataProfileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Metadataprofile>>,
  TError,
  { data: MetadataProfileResource },
  TContext
> => {
  const mutationOptions = getPostApiV1MetadataprofileMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Metadataprofile = (signal?: AbortSignal) => {
  return apiInstance<MetadataProfileResource[]>({
    url: `/api/v1/metadataprofile`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1MetadataprofileQueryKey = () => {
  return [`/api/v1/metadataprofile`] as const;
};

export const getGetApiV1MetadataprofileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1MetadataprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Metadataprofile>>
  > = ({ signal }) => getApiV1Metadataprofile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1MetadataprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Metadataprofile>>
>;
export type GetApiV1MetadataprofileQueryError = ErrorType<unknown>;

export function useGetApiV1Metadataprofile<
  TData = Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Metadataprofile<
  TData = Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Metadataprofile<
  TData = Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Metadataprofile<
  TData = Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1MetadataprofileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV1MetadataprofileId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/metadataprofile/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1MetadataprofileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1MetadataprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1MetadataprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1MetadataprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1MetadataprofileId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1MetadataprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1MetadataprofileId>>
>;

export type DeleteApiV1MetadataprofileIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1MetadataprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1MetadataprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1MetadataprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1MetadataprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1MetadataprofileId = (
  id: string,
  metadataProfileResource: MetadataProfileResource
) => {
  return apiInstance<MetadataProfileResource>({
    url: `/api/v1/metadataprofile/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: metadataProfileResource,
  });
};

export const getPutApiV1MetadataprofileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1MetadataprofileId>>,
    TError,
    { id: string; data: MetadataProfileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1MetadataprofileId>>,
  TError,
  { id: string; data: MetadataProfileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1MetadataprofileId>>,
    { id: string; data: MetadataProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1MetadataprofileId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1MetadataprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1MetadataprofileId>>
>;
export type PutApiV1MetadataprofileIdMutationBody = MetadataProfileResource;
export type PutApiV1MetadataprofileIdMutationError = ErrorType<unknown>;

export const usePutApiV1MetadataprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1MetadataprofileId>>,
    TError,
    { id: string; data: MetadataProfileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1MetadataprofileId>>,
  TError,
  { id: string; data: MetadataProfileResource },
  TContext
> => {
  const mutationOptions = getPutApiV1MetadataprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1MetadataprofileId = (id: number, signal?: AbortSignal) => {
  return apiInstance<MetadataProfileResource>({
    url: `/api/v1/metadataprofile/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1MetadataprofileIdQueryKey = (id: number) => {
  return [`/api/v1/metadataprofile/${id}`] as const;
};

export const getGetApiV1MetadataprofileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1MetadataprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MetadataprofileId>>
  > = ({ signal }) => getApiV1MetadataprofileId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1MetadataprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MetadataprofileId>>
>;
export type GetApiV1MetadataprofileIdQueryError = ErrorType<unknown>;

export function useGetApiV1MetadataprofileId<
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1MetadataprofileId<
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1MetadataprofileId<
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1MetadataprofileId<
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1MetadataprofileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1MetadataprofileSchema = (signal?: AbortSignal) => {
  return apiInstance<MetadataProfileResource>({
    url: `/api/v1/metadataprofile/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1MetadataprofileSchemaQueryKey = () => {
  return [`/api/v1/metadataprofile/schema`] as const;
};

export const getGetApiV1MetadataprofileSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1MetadataprofileSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>
  > = ({ signal }) => getApiV1MetadataprofileSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1MetadataprofileSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>
>;
export type GetApiV1MetadataprofileSchemaQueryError = ErrorType<unknown>;

export function useGetApiV1MetadataprofileSchema<
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1MetadataprofileSchema<
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1MetadataprofileSchema<
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1MetadataprofileSchema<
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1MetadataprofileSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1ConfigMetadataproviderId = (
  id: number,
  signal?: AbortSignal
) => {
  return apiInstance<MetadataProviderConfigResource>({
    url: `/api/v1/config/metadataprovider/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigMetadataproviderIdQueryKey = (id: number) => {
  return [`/api/v1/config/metadataprovider/${id}`] as const;
};

export const getGetApiV1ConfigMetadataproviderIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ConfigMetadataproviderIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>
  > = ({ signal }) => getApiV1ConfigMetadataproviderId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigMetadataproviderIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>
>;
export type GetApiV1ConfigMetadataproviderIdQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigMetadataproviderId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigMetadataproviderId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigMetadataproviderId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigMetadataproviderId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigMetadataproviderIdQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1ConfigMetadataproviderId = (
  id: string,
  metadataProviderConfigResource: MetadataProviderConfigResource
) => {
  return apiInstance<MetadataProviderConfigResource>({
    url: `/api/v1/config/metadataprovider/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: metadataProviderConfigResource,
  });
};

export const getPutApiV1ConfigMetadataproviderIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigMetadataproviderId>>,
    TError,
    { id: string; data: MetadataProviderConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigMetadataproviderId>>,
  TError,
  { id: string; data: MetadataProviderConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigMetadataproviderId>>,
    { id: string; data: MetadataProviderConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigMetadataproviderId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigMetadataproviderIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigMetadataproviderId>>
>;
export type PutApiV1ConfigMetadataproviderIdMutationBody =
  MetadataProviderConfigResource;
export type PutApiV1ConfigMetadataproviderIdMutationError = ErrorType<unknown>;

export const usePutApiV1ConfigMetadataproviderId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigMetadataproviderId>>,
    TError,
    { id: string; data: MetadataProviderConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ConfigMetadataproviderId>>,
  TError,
  { id: string; data: MetadataProviderConfigResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV1ConfigMetadataproviderIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigMetadataprovider = (signal?: AbortSignal) => {
  return apiInstance<MetadataProviderConfigResource>({
    url: `/api/v1/config/metadataprovider`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigMetadataproviderQueryKey = () => {
  return [`/api/v1/config/metadataprovider`] as const;
};

export const getGetApiV1ConfigMetadataproviderQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ConfigMetadataproviderQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>
  > = ({ signal }) => getApiV1ConfigMetadataprovider(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigMetadataproviderQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>
>;
export type GetApiV1ConfigMetadataproviderQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigMetadataprovider<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigMetadataprovider<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigMetadataprovider<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigMetadataprovider<
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigMetadataproviderQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1WantedMissing = (
  params?: GetApiV1WantedMissingParams,
  signal?: AbortSignal
) => {
  return apiInstance<AlbumResourcePagingResource>({
    url: `/api/v1/wanted/missing`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1WantedMissingQueryKey = (
  params?: GetApiV1WantedMissingParams
) => {
  return [`/api/v1/wanted/missing`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1WantedMissingQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1WantedMissing>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1WantedMissingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissing>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1WantedMissingQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1WantedMissing>>
  > = ({ signal }) => getApiV1WantedMissing(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1WantedMissing>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1WantedMissingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1WantedMissing>>
>;
export type GetApiV1WantedMissingQueryError = ErrorType<unknown>;

export function useGetApiV1WantedMissing<
  TData = Awaited<ReturnType<typeof getApiV1WantedMissing>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1WantedMissingParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissing>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1WantedMissing>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1WantedMissing<
  TData = Awaited<ReturnType<typeof getApiV1WantedMissing>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1WantedMissingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissing>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1WantedMissing>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1WantedMissing<
  TData = Awaited<ReturnType<typeof getApiV1WantedMissing>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1WantedMissingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissing>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1WantedMissing<
  TData = Awaited<ReturnType<typeof getApiV1WantedMissing>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1WantedMissingParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissing>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1WantedMissingQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1WantedMissingId = (id: number, signal?: AbortSignal) => {
  return apiInstance<AlbumResource>({
    url: `/api/v1/wanted/missing/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1WantedMissingIdQueryKey = (id: number) => {
  return [`/api/v1/wanted/missing/${id}`] as const;
};

export const getGetApiV1WantedMissingIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1WantedMissingIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1WantedMissingId>>
  > = ({ signal }) => getApiV1WantedMissingId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1WantedMissingIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1WantedMissingId>>
>;
export type GetApiV1WantedMissingIdQueryError = ErrorType<unknown>;

export function useGetApiV1WantedMissingId<
  TData = Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1WantedMissingId<
  TData = Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1WantedMissingId<
  TData = Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1WantedMissingId<
  TData = Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1WantedMissingIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1ConfigNamingId = (id: number, signal?: AbortSignal) => {
  return apiInstance<NamingConfigResource>({
    url: `/api/v1/config/naming/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigNamingIdQueryKey = (id: number) => {
  return [`/api/v1/config/naming/${id}`] as const;
};

export const getGetApiV1ConfigNamingIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ConfigNamingIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigNamingId>>
  > = ({ signal }) => getApiV1ConfigNamingId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigNamingIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigNamingId>>
>;
export type GetApiV1ConfigNamingIdQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigNamingId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigNamingId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigNamingId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigNamingId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigNamingIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1ConfigNamingId = (
  id: string,
  namingConfigResource: NamingConfigResource
) => {
  return apiInstance<NamingConfigResource>({
    url: `/api/v1/config/naming/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: namingConfigResource,
  });
};

export const getPutApiV1ConfigNamingIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigNamingId>>,
    TError,
    { id: string; data: NamingConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigNamingId>>,
  TError,
  { id: string; data: NamingConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigNamingId>>,
    { id: string; data: NamingConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigNamingId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigNamingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigNamingId>>
>;
export type PutApiV1ConfigNamingIdMutationBody = NamingConfigResource;
export type PutApiV1ConfigNamingIdMutationError = ErrorType<unknown>;

export const usePutApiV1ConfigNamingId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigNamingId>>,
    TError,
    { id: string; data: NamingConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ConfigNamingId>>,
  TError,
  { id: string; data: NamingConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV1ConfigNamingIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigNaming = (signal?: AbortSignal) => {
  return apiInstance<NamingConfigResource>({
    url: `/api/v1/config/naming`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigNamingQueryKey = () => {
  return [`/api/v1/config/naming`] as const;
};

export const getGetApiV1ConfigNamingQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ConfigNamingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigNaming>>
  > = ({ signal }) => getApiV1ConfigNaming(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigNamingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigNaming>>
>;
export type GetApiV1ConfigNamingQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigNaming<
  TData = Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigNaming<
  TData = Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigNaming<
  TData = Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigNaming<
  TData = Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigNamingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1ConfigNamingExamples = (
  params?: GetApiV1ConfigNamingExamplesParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v1/config/naming/examples`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1ConfigNamingExamplesQueryKey = (
  params?: GetApiV1ConfigNamingExamplesParams
) => {
  return [
    `/api/v1/config/naming/examples`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1ConfigNamingExamplesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ConfigNamingExamplesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ConfigNamingExamplesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>
  > = ({ signal }) => getApiV1ConfigNamingExamples(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigNamingExamplesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>
>;
export type GetApiV1ConfigNamingExamplesQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigNamingExamples<
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1ConfigNamingExamplesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigNamingExamples<
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ConfigNamingExamplesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigNamingExamples<
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ConfigNamingExamplesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigNamingExamples<
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ConfigNamingExamplesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigNamingExamplesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1NotificationId = (id: number, signal?: AbortSignal) => {
  return apiInstance<NotificationResource>({
    url: `/api/v1/notification/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1NotificationIdQueryKey = (id: number) => {
  return [`/api/v1/notification/${id}`] as const;
};

export const getGetApiV1NotificationIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1NotificationId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1NotificationId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1NotificationIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1NotificationId>>
  > = ({ signal }) => getApiV1NotificationId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1NotificationId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1NotificationIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1NotificationId>>
>;
export type GetApiV1NotificationIdQueryError = ErrorType<unknown>;

export function useGetApiV1NotificationId<
  TData = Awaited<ReturnType<typeof getApiV1NotificationId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1NotificationId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1NotificationId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1NotificationId<
  TData = Awaited<ReturnType<typeof getApiV1NotificationId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1NotificationId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1NotificationId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1NotificationId<
  TData = Awaited<ReturnType<typeof getApiV1NotificationId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1NotificationId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1NotificationId<
  TData = Awaited<ReturnType<typeof getApiV1NotificationId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1NotificationId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1NotificationIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1NotificationId = (
  id: string,
  notificationResource: NotificationResource,
  params?: PutApiV1NotificationIdParams
) => {
  return apiInstance<NotificationResource>({
    url: `/api/v1/notification/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: notificationResource,
    params,
  });
};

export const getPutApiV1NotificationIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1NotificationId>>,
    TError,
    {
      id: string;
      data: NotificationResource;
      params?: PutApiV1NotificationIdParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1NotificationId>>,
  TError,
  {
    id: string;
    data: NotificationResource;
    params?: PutApiV1NotificationIdParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1NotificationId>>,
    {
      id: string;
      data: NotificationResource;
      params?: PutApiV1NotificationIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV1NotificationId(id, data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1NotificationIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1NotificationId>>
>;
export type PutApiV1NotificationIdMutationBody = NotificationResource;
export type PutApiV1NotificationIdMutationError = ErrorType<unknown>;

export const usePutApiV1NotificationId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1NotificationId>>,
    TError,
    {
      id: string;
      data: NotificationResource;
      params?: PutApiV1NotificationIdParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1NotificationId>>,
  TError,
  {
    id: string;
    data: NotificationResource;
    params?: PutApiV1NotificationIdParams;
  },
  TContext
> => {
  const mutationOptions = getPutApiV1NotificationIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1NotificationId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/notification/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1NotificationIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1NotificationId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1NotificationId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1NotificationId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1NotificationId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1NotificationIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1NotificationId>>
>;

export type DeleteApiV1NotificationIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1NotificationId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1NotificationId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1NotificationId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1NotificationIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Notification = (signal?: AbortSignal) => {
  return apiInstance<NotificationResource[]>({
    url: `/api/v1/notification`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1NotificationQueryKey = () => {
  return [`/api/v1/notification`] as const;
};

export const getGetApiV1NotificationQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Notification>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Notification>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1NotificationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Notification>>
  > = ({ signal }) => getApiV1Notification(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Notification>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1NotificationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Notification>>
>;
export type GetApiV1NotificationQueryError = ErrorType<unknown>;

export function useGetApiV1Notification<
  TData = Awaited<ReturnType<typeof getApiV1Notification>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Notification>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Notification>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Notification<
  TData = Awaited<ReturnType<typeof getApiV1Notification>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Notification>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Notification>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Notification<
  TData = Awaited<ReturnType<typeof getApiV1Notification>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Notification>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Notification<
  TData = Awaited<ReturnType<typeof getApiV1Notification>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Notification>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1NotificationQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Notification = (
  notificationResource: NotificationResource,
  params?: PostApiV1NotificationParams
) => {
  return apiInstance<NotificationResource>({
    url: `/api/v1/notification`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: notificationResource,
    params,
  });
};

export const getPostApiV1NotificationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Notification>>,
    TError,
    { data: NotificationResource; params?: PostApiV1NotificationParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Notification>>,
  TError,
  { data: NotificationResource; params?: PostApiV1NotificationParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Notification>>,
    { data: NotificationResource; params?: PostApiV1NotificationParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1Notification(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1NotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Notification>>
>;
export type PostApiV1NotificationMutationBody = NotificationResource;
export type PostApiV1NotificationMutationError = ErrorType<unknown>;

export const usePostApiV1Notification = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Notification>>,
    TError,
    { data: NotificationResource; params?: PostApiV1NotificationParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Notification>>,
  TError,
  { data: NotificationResource; params?: PostApiV1NotificationParams },
  TContext
> => {
  const mutationOptions = getPostApiV1NotificationMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1NotificationSchema = (signal?: AbortSignal) => {
  return apiInstance<NotificationResource[]>({
    url: `/api/v1/notification/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1NotificationSchemaQueryKey = () => {
  return [`/api/v1/notification/schema`] as const;
};

export const getGetApiV1NotificationSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1NotificationSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1NotificationSchema>>
  > = ({ signal }) => getApiV1NotificationSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1NotificationSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1NotificationSchema>>
>;
export type GetApiV1NotificationSchemaQueryError = ErrorType<unknown>;

export function useGetApiV1NotificationSchema<
  TData = Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1NotificationSchema<
  TData = Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1NotificationSchema<
  TData = Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1NotificationSchema<
  TData = Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1NotificationSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1NotificationTest = (
  notificationResource: NotificationResource
) => {
  return apiInstance<void>({
    url: `/api/v1/notification/test`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: notificationResource,
  });
};

export const getPostApiV1NotificationTestMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1NotificationTest>>,
    TError,
    { data: NotificationResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1NotificationTest>>,
  TError,
  { data: NotificationResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1NotificationTest>>,
    { data: NotificationResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1NotificationTest(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1NotificationTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1NotificationTest>>
>;
export type PostApiV1NotificationTestMutationBody = NotificationResource;
export type PostApiV1NotificationTestMutationError = ErrorType<unknown>;

export const usePostApiV1NotificationTest = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1NotificationTest>>,
    TError,
    { data: NotificationResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1NotificationTest>>,
  TError,
  { data: NotificationResource },
  TContext
> => {
  const mutationOptions = getPostApiV1NotificationTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1NotificationTestall = () => {
  return apiInstance<void>({
    url: `/api/v1/notification/testall`,
    method: "POST",
  });
};

export const getPostApiV1NotificationTestallMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1NotificationTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1NotificationTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1NotificationTestall>>,
    void
  > = () => {
    return postApiV1NotificationTestall();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1NotificationTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1NotificationTestall>>
>;

export type PostApiV1NotificationTestallMutationError = ErrorType<unknown>;

export const usePostApiV1NotificationTestall = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1NotificationTestall>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1NotificationTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPostApiV1NotificationTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1NotificationActionName = (
  name: string,
  notificationResource: NotificationResource
) => {
  return apiInstance<void>({
    url: `/api/v1/notification/action/${name}`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: notificationResource,
  });
};

export const getPostApiV1NotificationActionNameMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1NotificationActionName>>,
    TError,
    { name: string; data: NotificationResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1NotificationActionName>>,
  TError,
  { name: string; data: NotificationResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1NotificationActionName>>,
    { name: string; data: NotificationResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV1NotificationActionName(name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1NotificationActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1NotificationActionName>>
>;
export type PostApiV1NotificationActionNameMutationBody = NotificationResource;
export type PostApiV1NotificationActionNameMutationError = ErrorType<unknown>;

export const usePostApiV1NotificationActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1NotificationActionName>>,
    TError,
    { name: string; data: NotificationResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1NotificationActionName>>,
  TError,
  { name: string; data: NotificationResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV1NotificationActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Parse = (
  params?: GetApiV1ParseParams,
  signal?: AbortSignal
) => {
  return apiInstance<ParseResource>({
    url: `/api/v1/parse`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1ParseQueryKey = (params?: GetApiV1ParseParams) => {
  return [`/api/v1/parse`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ParseQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Parse>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ParseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Parse>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ParseQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Parse>>> = ({
    signal,
  }) => getApiV1Parse(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Parse>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ParseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Parse>>
>;
export type GetApiV1ParseQueryError = ErrorType<unknown>;

export function useGetApiV1Parse<
  TData = Awaited<ReturnType<typeof getApiV1Parse>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1ParseParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Parse>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Parse>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Parse<
  TData = Awaited<ReturnType<typeof getApiV1Parse>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ParseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Parse>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Parse>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Parse<
  TData = Awaited<ReturnType<typeof getApiV1Parse>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ParseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Parse>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Parse<
  TData = Awaited<ReturnType<typeof getApiV1Parse>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ParseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Parse>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ParseQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPing = (signal?: AbortSignal) => {
  return apiInstance<PingResource>({ url: `/ping`, method: "GET", signal });
};

export const getGetPingQueryKey = () => {
  return [`/ping`] as const;
};

export const getGetPingQueryOptions = <
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPingQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPing>>> = ({
    signal,
  }) => getPing(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPing>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPing>>
>;
export type GetPingQueryError = ErrorType<unknown>;

export function useGetPing<
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPing>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPing<
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getPing>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPing<
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetPing<
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1QualitydefinitionId = (
  id: string,
  qualityDefinitionResource: QualityDefinitionResource
) => {
  return apiInstance<QualityDefinitionResource>({
    url: `/api/v1/qualitydefinition/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: qualityDefinitionResource,
  });
};

export const getPutApiV1QualitydefinitionIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1QualitydefinitionId>>,
    TError,
    { id: string; data: QualityDefinitionResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1QualitydefinitionId>>,
  TError,
  { id: string; data: QualityDefinitionResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1QualitydefinitionId>>,
    { id: string; data: QualityDefinitionResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1QualitydefinitionId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1QualitydefinitionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1QualitydefinitionId>>
>;
export type PutApiV1QualitydefinitionIdMutationBody = QualityDefinitionResource;
export type PutApiV1QualitydefinitionIdMutationError = ErrorType<unknown>;

export const usePutApiV1QualitydefinitionId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1QualitydefinitionId>>,
    TError,
    { id: string; data: QualityDefinitionResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1QualitydefinitionId>>,
  TError,
  { id: string; data: QualityDefinitionResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV1QualitydefinitionIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1QualitydefinitionId = (
  id: number,
  signal?: AbortSignal
) => {
  return apiInstance<QualityDefinitionResource>({
    url: `/api/v1/qualitydefinition/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1QualitydefinitionIdQueryKey = (id: number) => {
  return [`/api/v1/qualitydefinition/${id}`] as const;
};

export const getGetApiV1QualitydefinitionIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1QualitydefinitionIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>
  > = ({ signal }) => getApiV1QualitydefinitionId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1QualitydefinitionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>
>;
export type GetApiV1QualitydefinitionIdQueryError = ErrorType<unknown>;

export function useGetApiV1QualitydefinitionId<
  TData = Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1QualitydefinitionId<
  TData = Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1QualitydefinitionId<
  TData = Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1QualitydefinitionId<
  TData = Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1QualitydefinitionIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1Qualitydefinition = (signal?: AbortSignal) => {
  return apiInstance<QualityDefinitionResource[]>({
    url: `/api/v1/qualitydefinition`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1QualitydefinitionQueryKey = () => {
  return [`/api/v1/qualitydefinition`] as const;
};

export const getGetApiV1QualitydefinitionQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1QualitydefinitionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Qualitydefinition>>
  > = ({ signal }) => getApiV1Qualitydefinition(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1QualitydefinitionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Qualitydefinition>>
>;
export type GetApiV1QualitydefinitionQueryError = ErrorType<unknown>;

export function useGetApiV1Qualitydefinition<
  TData = Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Qualitydefinition<
  TData = Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Qualitydefinition<
  TData = Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Qualitydefinition<
  TData = Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1QualitydefinitionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1QualitydefinitionUpdate = (
  qualityDefinitionResource: QualityDefinitionResource[]
) => {
  return apiInstance<void>({
    url: `/api/v1/qualitydefinition/update`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: qualityDefinitionResource,
  });
};

export const getPutApiV1QualitydefinitionUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1QualitydefinitionUpdate>>,
    TError,
    { data: QualityDefinitionResource[] },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1QualitydefinitionUpdate>>,
  TError,
  { data: QualityDefinitionResource[] },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1QualitydefinitionUpdate>>,
    { data: QualityDefinitionResource[] }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1QualitydefinitionUpdate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1QualitydefinitionUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1QualitydefinitionUpdate>>
>;
export type PutApiV1QualitydefinitionUpdateMutationBody =
  QualityDefinitionResource[];
export type PutApiV1QualitydefinitionUpdateMutationError = ErrorType<unknown>;

export const usePutApiV1QualitydefinitionUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1QualitydefinitionUpdate>>,
    TError,
    { data: QualityDefinitionResource[] },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1QualitydefinitionUpdate>>,
  TError,
  { data: QualityDefinitionResource[] },
  TContext
> => {
  const mutationOptions =
    getPutApiV1QualitydefinitionUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1Qualityprofile = (
  qualityProfileResource: QualityProfileResource
) => {
  return apiInstance<QualityProfileResource>({
    url: `/api/v1/qualityprofile`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: qualityProfileResource,
  });
};

export const getPostApiV1QualityprofileMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Qualityprofile>>,
    TError,
    { data: QualityProfileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Qualityprofile>>,
  TError,
  { data: QualityProfileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Qualityprofile>>,
    { data: QualityProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Qualityprofile(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1QualityprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Qualityprofile>>
>;
export type PostApiV1QualityprofileMutationBody = QualityProfileResource;
export type PostApiV1QualityprofileMutationError = ErrorType<unknown>;

export const usePostApiV1Qualityprofile = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Qualityprofile>>,
    TError,
    { data: QualityProfileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Qualityprofile>>,
  TError,
  { data: QualityProfileResource },
  TContext
> => {
  const mutationOptions = getPostApiV1QualityprofileMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Qualityprofile = (signal?: AbortSignal) => {
  return apiInstance<QualityProfileResource[]>({
    url: `/api/v1/qualityprofile`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1QualityprofileQueryKey = () => {
  return [`/api/v1/qualityprofile`] as const;
};

export const getGetApiV1QualityprofileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1QualityprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Qualityprofile>>
  > = ({ signal }) => getApiV1Qualityprofile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1QualityprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Qualityprofile>>
>;
export type GetApiV1QualityprofileQueryError = ErrorType<unknown>;

export function useGetApiV1Qualityprofile<
  TData = Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Qualityprofile<
  TData = Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Qualityprofile<
  TData = Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Qualityprofile<
  TData = Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1QualityprofileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV1QualityprofileId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/qualityprofile/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1QualityprofileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1QualityprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1QualityprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1QualityprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1QualityprofileId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1QualityprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1QualityprofileId>>
>;

export type DeleteApiV1QualityprofileIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1QualityprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1QualityprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1QualityprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1QualityprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1QualityprofileId = (
  id: string,
  qualityProfileResource: QualityProfileResource
) => {
  return apiInstance<QualityProfileResource>({
    url: `/api/v1/qualityprofile/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: qualityProfileResource,
  });
};

export const getPutApiV1QualityprofileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1QualityprofileId>>,
    TError,
    { id: string; data: QualityProfileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1QualityprofileId>>,
  TError,
  { id: string; data: QualityProfileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1QualityprofileId>>,
    { id: string; data: QualityProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1QualityprofileId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1QualityprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1QualityprofileId>>
>;
export type PutApiV1QualityprofileIdMutationBody = QualityProfileResource;
export type PutApiV1QualityprofileIdMutationError = ErrorType<unknown>;

export const usePutApiV1QualityprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1QualityprofileId>>,
    TError,
    { id: string; data: QualityProfileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1QualityprofileId>>,
  TError,
  { id: string; data: QualityProfileResource },
  TContext
> => {
  const mutationOptions = getPutApiV1QualityprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1QualityprofileId = (id: number, signal?: AbortSignal) => {
  return apiInstance<QualityProfileResource>({
    url: `/api/v1/qualityprofile/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1QualityprofileIdQueryKey = (id: number) => {
  return [`/api/v1/qualityprofile/${id}`] as const;
};

export const getGetApiV1QualityprofileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1QualityprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1QualityprofileId>>
  > = ({ signal }) => getApiV1QualityprofileId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1QualityprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1QualityprofileId>>
>;
export type GetApiV1QualityprofileIdQueryError = ErrorType<unknown>;

export function useGetApiV1QualityprofileId<
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1QualityprofileId<
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1QualityprofileId<
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1QualityprofileId<
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1QualityprofileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1QualityprofileSchema = (signal?: AbortSignal) => {
  return apiInstance<QualityProfileResource>({
    url: `/api/v1/qualityprofile/schema`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1QualityprofileSchemaQueryKey = () => {
  return [`/api/v1/qualityprofile/schema`] as const;
};

export const getGetApiV1QualityprofileSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1QualityprofileSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>
  > = ({ signal }) => getApiV1QualityprofileSchema(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1QualityprofileSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>
>;
export type GetApiV1QualityprofileSchemaQueryError = ErrorType<unknown>;

export function useGetApiV1QualityprofileSchema<
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1QualityprofileSchema<
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1QualityprofileSchema<
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1QualityprofileSchema<
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1QualityprofileSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV1QueueId = (
  id: number,
  params?: DeleteApiV1QueueIdParams
) => {
  return apiInstance<void>({
    url: `/api/v1/queue/${id}`,
    method: "DELETE",
    params,
  });
};

export const getDeleteApiV1QueueIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1QueueId>>,
    TError,
    { id: number; params?: DeleteApiV1QueueIdParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1QueueId>>,
  TError,
  { id: number; params?: DeleteApiV1QueueIdParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1QueueId>>,
    { id: number; params?: DeleteApiV1QueueIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteApiV1QueueId(id, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1QueueIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1QueueId>>
>;

export type DeleteApiV1QueueIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1QueueId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1QueueId>>,
    TError,
    { id: number; params?: DeleteApiV1QueueIdParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1QueueId>>,
  TError,
  { id: number; params?: DeleteApiV1QueueIdParams },
  TContext
> => {
  const mutationOptions = getDeleteApiV1QueueIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1QueueBulk = (
  queueBulkResource: QueueBulkResource,
  params?: DeleteApiV1QueueBulkParams
) => {
  return apiInstance<void>({
    url: `/api/v1/queue/bulk`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: queueBulkResource,
    params,
  });
};

export const getDeleteApiV1QueueBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1QueueBulk>>,
    TError,
    { data: QueueBulkResource; params?: DeleteApiV1QueueBulkParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1QueueBulk>>,
  TError,
  { data: QueueBulkResource; params?: DeleteApiV1QueueBulkParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1QueueBulk>>,
    { data: QueueBulkResource; params?: DeleteApiV1QueueBulkParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return deleteApiV1QueueBulk(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1QueueBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1QueueBulk>>
>;
export type DeleteApiV1QueueBulkMutationBody = QueueBulkResource;
export type DeleteApiV1QueueBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV1QueueBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1QueueBulk>>,
    TError,
    { data: QueueBulkResource; params?: DeleteApiV1QueueBulkParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1QueueBulk>>,
  TError,
  { data: QueueBulkResource; params?: DeleteApiV1QueueBulkParams },
  TContext
> => {
  const mutationOptions = getDeleteApiV1QueueBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Queue = (
  params?: GetApiV1QueueParams,
  signal?: AbortSignal
) => {
  return apiInstance<QueueResourcePagingResource>({
    url: `/api/v1/queue`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1QueueQueryKey = (params?: GetApiV1QueueParams) => {
  return [`/api/v1/queue`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1QueueQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Queue>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1QueueParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Queue>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1QueueQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Queue>>> = ({
    signal,
  }) => getApiV1Queue(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Queue>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1QueueQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Queue>>
>;
export type GetApiV1QueueQueryError = ErrorType<unknown>;

export function useGetApiV1Queue<
  TData = Awaited<ReturnType<typeof getApiV1Queue>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1QueueParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Queue>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Queue>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Queue<
  TData = Awaited<ReturnType<typeof getApiV1Queue>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1QueueParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Queue>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Queue>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Queue<
  TData = Awaited<ReturnType<typeof getApiV1Queue>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1QueueParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Queue>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Queue<
  TData = Awaited<ReturnType<typeof getApiV1Queue>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1QueueParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Queue>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1QueueQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1QueueGrabId = (id: number) => {
  return apiInstance<void>({ url: `/api/v1/queue/grab/${id}`, method: "POST" });
};

export const getPostApiV1QueueGrabIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1QueueGrabId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1QueueGrabId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1QueueGrabId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postApiV1QueueGrabId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1QueueGrabIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1QueueGrabId>>
>;

export type PostApiV1QueueGrabIdMutationError = ErrorType<unknown>;

export const usePostApiV1QueueGrabId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1QueueGrabId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1QueueGrabId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPostApiV1QueueGrabIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1QueueGrabBulk = (
  queueBulkResource: QueueBulkResource
) => {
  return apiInstance<void>({
    url: `/api/v1/queue/grab/bulk`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: queueBulkResource,
  });
};

export const getPostApiV1QueueGrabBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1QueueGrabBulk>>,
    TError,
    { data: QueueBulkResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1QueueGrabBulk>>,
  TError,
  { data: QueueBulkResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1QueueGrabBulk>>,
    { data: QueueBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1QueueGrabBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1QueueGrabBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1QueueGrabBulk>>
>;
export type PostApiV1QueueGrabBulkMutationBody = QueueBulkResource;
export type PostApiV1QueueGrabBulkMutationError = ErrorType<unknown>;

export const usePostApiV1QueueGrabBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1QueueGrabBulk>>,
    TError,
    { data: QueueBulkResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1QueueGrabBulk>>,
  TError,
  { data: QueueBulkResource },
  TContext
> => {
  const mutationOptions = getPostApiV1QueueGrabBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1QueueDetails = (
  params?: GetApiV1QueueDetailsParams,
  signal?: AbortSignal
) => {
  return apiInstance<QueueResource[]>({
    url: `/api/v1/queue/details`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1QueueDetailsQueryKey = (
  params?: GetApiV1QueueDetailsParams
) => {
  return [`/api/v1/queue/details`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1QueueDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1QueueDetails>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1QueueDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QueueDetails>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1QueueDetailsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1QueueDetails>>
  > = ({ signal }) => getApiV1QueueDetails(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1QueueDetails>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1QueueDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1QueueDetails>>
>;
export type GetApiV1QueueDetailsQueryError = ErrorType<unknown>;

export function useGetApiV1QueueDetails<
  TData = Awaited<ReturnType<typeof getApiV1QueueDetails>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1QueueDetailsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QueueDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1QueueDetails>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1QueueDetails<
  TData = Awaited<ReturnType<typeof getApiV1QueueDetails>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1QueueDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QueueDetails>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1QueueDetails>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1QueueDetails<
  TData = Awaited<ReturnType<typeof getApiV1QueueDetails>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1QueueDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QueueDetails>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1QueueDetails<
  TData = Awaited<ReturnType<typeof getApiV1QueueDetails>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1QueueDetailsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QueueDetails>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1QueueDetailsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1QueueStatus = (signal?: AbortSignal) => {
  return apiInstance<QueueStatusResource>({
    url: `/api/v1/queue/status`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1QueueStatusQueryKey = () => {
  return [`/api/v1/queue/status`] as const;
};

export const getGetApiV1QueueStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1QueueStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QueueStatus>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1QueueStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1QueueStatus>>
  > = ({ signal }) => getApiV1QueueStatus(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1QueueStatus>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1QueueStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1QueueStatus>>
>;
export type GetApiV1QueueStatusQueryError = ErrorType<unknown>;

export function useGetApiV1QueueStatus<
  TData = Awaited<ReturnType<typeof getApiV1QueueStatus>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QueueStatus>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1QueueStatus>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1QueueStatus<
  TData = Awaited<ReturnType<typeof getApiV1QueueStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QueueStatus>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1QueueStatus>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1QueueStatus<
  TData = Awaited<ReturnType<typeof getApiV1QueueStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QueueStatus>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1QueueStatus<
  TData = Awaited<ReturnType<typeof getApiV1QueueStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QueueStatus>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1QueueStatusQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Release = (releaseResource: ReleaseResource) => {
  return apiInstance<ReleaseResource>({
    url: `/api/v1/release`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: releaseResource,
  });
};

export const getPostApiV1ReleaseMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Release>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Release>>,
  TError,
  { data: ReleaseResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Release>>,
    { data: ReleaseResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Release(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ReleaseMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Release>>
>;
export type PostApiV1ReleaseMutationBody = ReleaseResource;
export type PostApiV1ReleaseMutationError = ErrorType<unknown>;

export const usePostApiV1Release = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Release>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Release>>,
  TError,
  { data: ReleaseResource },
  TContext
> => {
  const mutationOptions = getPostApiV1ReleaseMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Release = (
  params?: GetApiV1ReleaseParams,
  signal?: AbortSignal
) => {
  return apiInstance<ReleaseResource[]>({
    url: `/api/v1/release`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1ReleaseQueryKey = (params?: GetApiV1ReleaseParams) => {
  return [`/api/v1/release`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1ReleaseQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Release>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ReleaseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Release>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ReleaseQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Release>>> = ({
    signal,
  }) => getApiV1Release(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Release>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ReleaseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Release>>
>;
export type GetApiV1ReleaseQueryError = ErrorType<unknown>;

export function useGetApiV1Release<
  TData = Awaited<ReturnType<typeof getApiV1Release>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1ReleaseParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Release>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Release>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Release<
  TData = Awaited<ReturnType<typeof getApiV1Release>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ReleaseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Release>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Release>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Release<
  TData = Awaited<ReturnType<typeof getApiV1Release>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ReleaseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Release>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Release<
  TData = Awaited<ReturnType<typeof getApiV1Release>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1ReleaseParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Release>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ReleaseQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1ReleaseprofileId = (id: number, signal?: AbortSignal) => {
  return apiInstance<ReleaseProfileResource>({
    url: `/api/v1/releaseprofile/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ReleaseprofileIdQueryKey = (id: number) => {
  return [`/api/v1/releaseprofile/${id}`] as const;
};

export const getGetApiV1ReleaseprofileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ReleaseprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>
  > = ({ signal }) => getApiV1ReleaseprofileId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ReleaseprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>
>;
export type GetApiV1ReleaseprofileIdQueryError = ErrorType<unknown>;

export function useGetApiV1ReleaseprofileId<
  TData = Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ReleaseprofileId<
  TData = Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ReleaseprofileId<
  TData = Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ReleaseprofileId<
  TData = Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ReleaseprofileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1ReleaseprofileId = (
  id: string,
  releaseProfileResource: ReleaseProfileResource
) => {
  return apiInstance<ReleaseProfileResource>({
    url: `/api/v1/releaseprofile/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: releaseProfileResource,
  });
};

export const getPutApiV1ReleaseprofileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ReleaseprofileId>>,
    TError,
    { id: string; data: ReleaseProfileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ReleaseprofileId>>,
  TError,
  { id: string; data: ReleaseProfileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ReleaseprofileId>>,
    { id: string; data: ReleaseProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ReleaseprofileId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ReleaseprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ReleaseprofileId>>
>;
export type PutApiV1ReleaseprofileIdMutationBody = ReleaseProfileResource;
export type PutApiV1ReleaseprofileIdMutationError = ErrorType<unknown>;

export const usePutApiV1ReleaseprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ReleaseprofileId>>,
    TError,
    { id: string; data: ReleaseProfileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ReleaseprofileId>>,
  TError,
  { id: string; data: ReleaseProfileResource },
  TContext
> => {
  const mutationOptions = getPutApiV1ReleaseprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1ReleaseprofileId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/releaseprofile/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1ReleaseprofileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ReleaseprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ReleaseprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ReleaseprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1ReleaseprofileId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ReleaseprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ReleaseprofileId>>
>;

export type DeleteApiV1ReleaseprofileIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1ReleaseprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ReleaseprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1ReleaseprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1ReleaseprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Releaseprofile = (signal?: AbortSignal) => {
  return apiInstance<ReleaseProfileResource[]>({
    url: `/api/v1/releaseprofile`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ReleaseprofileQueryKey = () => {
  return [`/api/v1/releaseprofile`] as const;
};

export const getGetApiV1ReleaseprofileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1ReleaseprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Releaseprofile>>
  > = ({ signal }) => getApiV1Releaseprofile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ReleaseprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Releaseprofile>>
>;
export type GetApiV1ReleaseprofileQueryError = ErrorType<unknown>;

export function useGetApiV1Releaseprofile<
  TData = Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Releaseprofile<
  TData = Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Releaseprofile<
  TData = Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Releaseprofile<
  TData = Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ReleaseprofileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Releaseprofile = (
  releaseProfileResource: ReleaseProfileResource
) => {
  return apiInstance<ReleaseProfileResource>({
    url: `/api/v1/releaseprofile`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: releaseProfileResource,
  });
};

export const getPostApiV1ReleaseprofileMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Releaseprofile>>,
    TError,
    { data: ReleaseProfileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Releaseprofile>>,
  TError,
  { data: ReleaseProfileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Releaseprofile>>,
    { data: ReleaseProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Releaseprofile(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ReleaseprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Releaseprofile>>
>;
export type PostApiV1ReleaseprofileMutationBody = ReleaseProfileResource;
export type PostApiV1ReleaseprofileMutationError = ErrorType<unknown>;

export const usePostApiV1Releaseprofile = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Releaseprofile>>,
    TError,
    { data: ReleaseProfileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Releaseprofile>>,
  TError,
  { data: ReleaseProfileResource },
  TContext
> => {
  const mutationOptions = getPostApiV1ReleaseprofileMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1ReleasePush = (releaseResource: ReleaseResource) => {
  return apiInstance<ReleaseResource>({
    url: `/api/v1/release/push`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: releaseResource,
  });
};

export const getPostApiV1ReleasePushMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ReleasePush>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ReleasePush>>,
  TError,
  { data: ReleaseResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ReleasePush>>,
    { data: ReleaseResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1ReleasePush(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ReleasePushMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ReleasePush>>
>;
export type PostApiV1ReleasePushMutationBody = ReleaseResource;
export type PostApiV1ReleasePushMutationError = ErrorType<unknown>;

export const usePostApiV1ReleasePush = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ReleasePush>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1ReleasePush>>,
  TError,
  { data: ReleaseResource },
  TContext
> => {
  const mutationOptions = getPostApiV1ReleasePushMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1RemotepathmappingId = (
  id: number,
  signal?: AbortSignal
) => {
  return apiInstance<RemotePathMappingResource>({
    url: `/api/v1/remotepathmapping/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1RemotepathmappingIdQueryKey = (id: number) => {
  return [`/api/v1/remotepathmapping/${id}`] as const;
};

export const getGetApiV1RemotepathmappingIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1RemotepathmappingIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>
  > = ({ signal }) => getApiV1RemotepathmappingId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1RemotepathmappingIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>
>;
export type GetApiV1RemotepathmappingIdQueryError = ErrorType<unknown>;

export function useGetApiV1RemotepathmappingId<
  TData = Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1RemotepathmappingId<
  TData = Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1RemotepathmappingId<
  TData = Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1RemotepathmappingId<
  TData = Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1RemotepathmappingIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteApiV1RemotepathmappingId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/remotepathmapping/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1RemotepathmappingIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1RemotepathmappingId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1RemotepathmappingId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1RemotepathmappingId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1RemotepathmappingId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1RemotepathmappingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1RemotepathmappingId>>
>;

export type DeleteApiV1RemotepathmappingIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1RemotepathmappingId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1RemotepathmappingId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1RemotepathmappingId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1RemotepathmappingIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1RemotepathmappingId = (
  id: string,
  remotePathMappingResource: RemotePathMappingResource
) => {
  return apiInstance<RemotePathMappingResource>({
    url: `/api/v1/remotepathmapping/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: remotePathMappingResource,
  });
};

export const getPutApiV1RemotepathmappingIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1RemotepathmappingId>>,
    TError,
    { id: string; data: RemotePathMappingResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1RemotepathmappingId>>,
  TError,
  { id: string; data: RemotePathMappingResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1RemotepathmappingId>>,
    { id: string; data: RemotePathMappingResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1RemotepathmappingId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1RemotepathmappingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1RemotepathmappingId>>
>;
export type PutApiV1RemotepathmappingIdMutationBody = RemotePathMappingResource;
export type PutApiV1RemotepathmappingIdMutationError = ErrorType<unknown>;

export const usePutApiV1RemotepathmappingId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1RemotepathmappingId>>,
    TError,
    { id: string; data: RemotePathMappingResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1RemotepathmappingId>>,
  TError,
  { id: string; data: RemotePathMappingResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV1RemotepathmappingIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1Remotepathmapping = (
  remotePathMappingResource: RemotePathMappingResource
) => {
  return apiInstance<RemotePathMappingResource>({
    url: `/api/v1/remotepathmapping`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: remotePathMappingResource,
  });
};

export const getPostApiV1RemotepathmappingMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Remotepathmapping>>,
    TError,
    { data: RemotePathMappingResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Remotepathmapping>>,
  TError,
  { data: RemotePathMappingResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Remotepathmapping>>,
    { data: RemotePathMappingResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Remotepathmapping(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1RemotepathmappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Remotepathmapping>>
>;
export type PostApiV1RemotepathmappingMutationBody = RemotePathMappingResource;
export type PostApiV1RemotepathmappingMutationError = ErrorType<unknown>;

export const usePostApiV1Remotepathmapping = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Remotepathmapping>>,
    TError,
    { data: RemotePathMappingResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Remotepathmapping>>,
  TError,
  { data: RemotePathMappingResource },
  TContext
> => {
  const mutationOptions = getPostApiV1RemotepathmappingMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Remotepathmapping = (signal?: AbortSignal) => {
  return apiInstance<RemotePathMappingResource[]>({
    url: `/api/v1/remotepathmapping`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1RemotepathmappingQueryKey = () => {
  return [`/api/v1/remotepathmapping`] as const;
};

export const getGetApiV1RemotepathmappingQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1RemotepathmappingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Remotepathmapping>>
  > = ({ signal }) => getApiV1Remotepathmapping(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1RemotepathmappingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Remotepathmapping>>
>;
export type GetApiV1RemotepathmappingQueryError = ErrorType<unknown>;

export function useGetApiV1Remotepathmapping<
  TData = Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Remotepathmapping<
  TData = Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Remotepathmapping<
  TData = Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Remotepathmapping<
  TData = Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1RemotepathmappingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1Rename = (
  params?: GetApiV1RenameParams,
  signal?: AbortSignal
) => {
  return apiInstance<RenameTrackResource[]>({
    url: `/api/v1/rename`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1RenameQueryKey = (params?: GetApiV1RenameParams) => {
  return [`/api/v1/rename`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1RenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Rename>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1RenameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Rename>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1RenameQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Rename>>> = ({
    signal,
  }) => getApiV1Rename(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Rename>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1RenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Rename>>
>;
export type GetApiV1RenameQueryError = ErrorType<unknown>;

export function useGetApiV1Rename<
  TData = Awaited<ReturnType<typeof getApiV1Rename>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1RenameParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Rename>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Rename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Rename<
  TData = Awaited<ReturnType<typeof getApiV1Rename>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1RenameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Rename>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Rename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Rename<
  TData = Awaited<ReturnType<typeof getApiV1Rename>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1RenameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Rename>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Rename<
  TData = Awaited<ReturnType<typeof getApiV1Rename>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1RenameParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Rename>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1RenameQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1Retag = (
  params?: GetApiV1RetagParams,
  signal?: AbortSignal
) => {
  return apiInstance<RetagTrackResource[]>({
    url: `/api/v1/retag`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1RetagQueryKey = (params?: GetApiV1RetagParams) => {
  return [`/api/v1/retag`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1RetagQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Retag>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1RetagParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Retag>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1RetagQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Retag>>> = ({
    signal,
  }) => getApiV1Retag(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Retag>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1RetagQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Retag>>
>;
export type GetApiV1RetagQueryError = ErrorType<unknown>;

export function useGetApiV1Retag<
  TData = Awaited<ReturnType<typeof getApiV1Retag>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1RetagParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Retag>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Retag>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Retag<
  TData = Awaited<ReturnType<typeof getApiV1Retag>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1RetagParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Retag>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Retag>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Retag<
  TData = Awaited<ReturnType<typeof getApiV1Retag>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1RetagParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Retag>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Retag<
  TData = Awaited<ReturnType<typeof getApiV1Retag>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1RetagParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Retag>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1RetagQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1RootfolderId = (id: number, signal?: AbortSignal) => {
  return apiInstance<RootFolderResource>({
    url: `/api/v1/rootfolder/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1RootfolderIdQueryKey = (id: number) => {
  return [`/api/v1/rootfolder/${id}`] as const;
};

export const getGetApiV1RootfolderIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1RootfolderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RootfolderId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1RootfolderIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1RootfolderId>>
  > = ({ signal }) => getApiV1RootfolderId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1RootfolderId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1RootfolderIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1RootfolderId>>
>;
export type GetApiV1RootfolderIdQueryError = ErrorType<unknown>;

export function useGetApiV1RootfolderId<
  TData = Awaited<ReturnType<typeof getApiV1RootfolderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RootfolderId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RootfolderId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1RootfolderId<
  TData = Awaited<ReturnType<typeof getApiV1RootfolderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RootfolderId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1RootfolderId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1RootfolderId<
  TData = Awaited<ReturnType<typeof getApiV1RootfolderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RootfolderId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1RootfolderId<
  TData = Awaited<ReturnType<typeof getApiV1RootfolderId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RootfolderId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1RootfolderIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1RootfolderId = (
  id: string,
  rootFolderResource: RootFolderResource
) => {
  return apiInstance<RootFolderResource>({
    url: `/api/v1/rootfolder/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: rootFolderResource,
  });
};

export const getPutApiV1RootfolderIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1RootfolderId>>,
    TError,
    { id: string; data: RootFolderResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1RootfolderId>>,
  TError,
  { id: string; data: RootFolderResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1RootfolderId>>,
    { id: string; data: RootFolderResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1RootfolderId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1RootfolderIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1RootfolderId>>
>;
export type PutApiV1RootfolderIdMutationBody = RootFolderResource;
export type PutApiV1RootfolderIdMutationError = ErrorType<unknown>;

export const usePutApiV1RootfolderId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1RootfolderId>>,
    TError,
    { id: string; data: RootFolderResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1RootfolderId>>,
  TError,
  { id: string; data: RootFolderResource },
  TContext
> => {
  const mutationOptions = getPutApiV1RootfolderIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1RootfolderId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/rootfolder/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1RootfolderIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1RootfolderId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1RootfolderId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1RootfolderId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1RootfolderId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1RootfolderIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1RootfolderId>>
>;

export type DeleteApiV1RootfolderIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1RootfolderId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1RootfolderId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1RootfolderId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1RootfolderIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1Rootfolder = (rootFolderResource: RootFolderResource) => {
  return apiInstance<RootFolderResource>({
    url: `/api/v1/rootfolder`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: rootFolderResource,
  });
};

export const getPostApiV1RootfolderMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Rootfolder>>,
    TError,
    { data: RootFolderResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Rootfolder>>,
  TError,
  { data: RootFolderResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Rootfolder>>,
    { data: RootFolderResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Rootfolder(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1RootfolderMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Rootfolder>>
>;
export type PostApiV1RootfolderMutationBody = RootFolderResource;
export type PostApiV1RootfolderMutationError = ErrorType<unknown>;

export const usePostApiV1Rootfolder = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Rootfolder>>,
    TError,
    { data: RootFolderResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Rootfolder>>,
  TError,
  { data: RootFolderResource },
  TContext
> => {
  const mutationOptions = getPostApiV1RootfolderMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Rootfolder = (signal?: AbortSignal) => {
  return apiInstance<RootFolderResource[]>({
    url: `/api/v1/rootfolder`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1RootfolderQueryKey = () => {
  return [`/api/v1/rootfolder`] as const;
};

export const getGetApiV1RootfolderQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Rootfolder>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Rootfolder>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1RootfolderQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Rootfolder>>
  > = ({ signal }) => getApiV1Rootfolder(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Rootfolder>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1RootfolderQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Rootfolder>>
>;
export type GetApiV1RootfolderQueryError = ErrorType<unknown>;

export function useGetApiV1Rootfolder<
  TData = Awaited<ReturnType<typeof getApiV1Rootfolder>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Rootfolder>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Rootfolder>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Rootfolder<
  TData = Awaited<ReturnType<typeof getApiV1Rootfolder>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Rootfolder>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Rootfolder>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Rootfolder<
  TData = Awaited<ReturnType<typeof getApiV1Rootfolder>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Rootfolder>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Rootfolder<
  TData = Awaited<ReturnType<typeof getApiV1Rootfolder>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Rootfolder>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1RootfolderQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1Search = (
  params?: GetApiV1SearchParams,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v1/search`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1SearchQueryKey = (params?: GetApiV1SearchParams) => {
  return [`/api/v1/search`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1SearchQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Search>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1SearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Search>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1SearchQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Search>>> = ({
    signal,
  }) => getApiV1Search(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Search>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1SearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Search>>
>;
export type GetApiV1SearchQueryError = ErrorType<unknown>;

export function useGetApiV1Search<
  TData = Awaited<ReturnType<typeof getApiV1Search>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1SearchParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Search>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Search>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Search<
  TData = Awaited<ReturnType<typeof getApiV1Search>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1SearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Search>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Search>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Search<
  TData = Awaited<ReturnType<typeof getApiV1Search>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1SearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Search>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Search<
  TData = Awaited<ReturnType<typeof getApiV1Search>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1SearchParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Search>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1SearchQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getContentPath = (path: string, signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/content/${path}`, method: "GET", signal });
};

export const getGetContentPathQueryKey = (path: string) => {
  return [`/content/${path}`] as const;
};

export const getGetContentPathQueryOptions = <
  TData = Awaited<ReturnType<typeof getContentPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentPath>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetContentPathQueryKey(path);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentPath>>> = ({
    signal,
  }) => getContentPath(path, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!path,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getContentPath>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetContentPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContentPath>>
>;
export type GetContentPathQueryError = ErrorType<unknown>;

export function useGetContentPath<
  TData = Awaited<ReturnType<typeof getContentPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentPath>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentPath>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetContentPath<
  TData = Awaited<ReturnType<typeof getContentPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentPath>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getContentPath>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetContentPath<
  TData = Awaited<ReturnType<typeof getContentPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentPath>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetContentPath<
  TData = Awaited<ReturnType<typeof getContentPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentPath>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetContentPathQueryOptions(path, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const get = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/`, method: "GET", signal });
};

export const getGetQueryKey = () => {
  return [`/`] as const;
};

export const getGetQueryOptions = <
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({
    signal,
  }) => get(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof get>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>;
export type GetQueryError = ErrorType<unknown>;

export function useGet<
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof get>>, TError, TData>,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGet<
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof get>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGet<
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGet<
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getPath = (path: string, signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/${path}`, method: "GET", signal });
};

export const getGetPathQueryKey = (path: string) => {
  return [`/${path}`] as const;
};

export const getGetPathQueryOptions = <
  TData = Awaited<ReturnType<typeof getPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPathQueryKey(path);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPath>>> = ({
    signal,
  }) => getPath(path, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!path,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPath>>
>;
export type GetPathQueryError = ErrorType<unknown>;

export function useGetPath<
  TData = Awaited<ReturnType<typeof getPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPath>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPath<
  TData = Awaited<ReturnType<typeof getPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPath>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetPath<
  TData = Awaited<ReturnType<typeof getPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetPath<
  TData = Awaited<ReturnType<typeof getPath>>,
  TError = ErrorType<unknown>
>(
  path: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetPathQueryOptions(path, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1SystemStatus = (signal?: AbortSignal) => {
  return apiInstance<SystemResource>({
    url: `/api/v1/system/status`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1SystemStatusQueryKey = () => {
  return [`/api/v1/system/status`] as const;
};

export const getGetApiV1SystemStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SystemStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemStatus>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1SystemStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SystemStatus>>
  > = ({ signal }) => getApiV1SystemStatus(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SystemStatus>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1SystemStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SystemStatus>>
>;
export type GetApiV1SystemStatusQueryError = ErrorType<unknown>;

export function useGetApiV1SystemStatus<
  TData = Awaited<ReturnType<typeof getApiV1SystemStatus>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemStatus>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1SystemStatus>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1SystemStatus<
  TData = Awaited<ReturnType<typeof getApiV1SystemStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemStatus>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1SystemStatus>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1SystemStatus<
  TData = Awaited<ReturnType<typeof getApiV1SystemStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemStatus>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1SystemStatus<
  TData = Awaited<ReturnType<typeof getApiV1SystemStatus>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemStatus>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1SystemStatusQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1SystemRoutes = (signal?: AbortSignal) => {
  return apiInstance<void>({
    url: `/api/v1/system/routes`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1SystemRoutesQueryKey = () => {
  return [`/api/v1/system/routes`] as const;
};

export const getGetApiV1SystemRoutesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1SystemRoutesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SystemRoutes>>
  > = ({ signal }) => getApiV1SystemRoutes(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1SystemRoutesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SystemRoutes>>
>;
export type GetApiV1SystemRoutesQueryError = ErrorType<unknown>;

export function useGetApiV1SystemRoutes<
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1SystemRoutes<
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1SystemRoutes<
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1SystemRoutes<
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1SystemRoutesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1SystemRoutesDuplicate = (signal?: AbortSignal) => {
  return apiInstance<void>({
    url: `/api/v1/system/routes/duplicate`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1SystemRoutesDuplicateQueryKey = () => {
  return [`/api/v1/system/routes/duplicate`] as const;
};

export const getGetApiV1SystemRoutesDuplicateQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1SystemRoutesDuplicateQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>
  > = ({ signal }) => getApiV1SystemRoutesDuplicate(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1SystemRoutesDuplicateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>
>;
export type GetApiV1SystemRoutesDuplicateQueryError = ErrorType<unknown>;

export function useGetApiV1SystemRoutesDuplicate<
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1SystemRoutesDuplicate<
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1SystemRoutesDuplicate<
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1SystemRoutesDuplicate<
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1SystemRoutesDuplicateQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1SystemShutdown = () => {
  return apiInstance<void>({ url: `/api/v1/system/shutdown`, method: "POST" });
};

export const getPostApiV1SystemShutdownMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemShutdown>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1SystemShutdown>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1SystemShutdown>>,
    void
  > = () => {
    return postApiV1SystemShutdown();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1SystemShutdownMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1SystemShutdown>>
>;

export type PostApiV1SystemShutdownMutationError = ErrorType<unknown>;

export const usePostApiV1SystemShutdown = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemShutdown>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1SystemShutdown>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV1SystemShutdownMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1SystemRestart = () => {
  return apiInstance<void>({ url: `/api/v1/system/restart`, method: "POST" });
};

export const getPostApiV1SystemRestartMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemRestart>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1SystemRestart>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1SystemRestart>>,
    void
  > = () => {
    return postApiV1SystemRestart();
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1SystemRestartMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1SystemRestart>>
>;

export type PostApiV1SystemRestartMutationError = ErrorType<unknown>;

export const usePostApiV1SystemRestart = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemRestart>>,
    TError,
    void,
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1SystemRestart>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV1SystemRestartMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1TagId = (id: number, signal?: AbortSignal) => {
  return apiInstance<TagResource>({
    url: `/api/v1/tag/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1TagIdQueryKey = (id: number) => {
  return [`/api/v1/tag/${id}`] as const;
};

export const getGetApiV1TagIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1TagId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1TagId>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1TagIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1TagId>>> = ({
    signal,
  }) => getApiV1TagId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1TagId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1TagIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1TagId>>
>;
export type GetApiV1TagIdQueryError = ErrorType<unknown>;

export function useGetApiV1TagId<
  TData = Awaited<ReturnType<typeof getApiV1TagId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1TagId>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1TagId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1TagId<
  TData = Awaited<ReturnType<typeof getApiV1TagId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1TagId>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1TagId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1TagId<
  TData = Awaited<ReturnType<typeof getApiV1TagId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1TagId>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1TagId<
  TData = Awaited<ReturnType<typeof getApiV1TagId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1TagId>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1TagIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1TagId = (id: string, tagResource: TagResource) => {
  return apiInstance<TagResource>({
    url: `/api/v1/tag/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: tagResource,
  });
};

export const getPutApiV1TagIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1TagId>>,
    TError,
    { id: string; data: TagResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1TagId>>,
  TError,
  { id: string; data: TagResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1TagId>>,
    { id: string; data: TagResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1TagId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1TagIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1TagId>>
>;
export type PutApiV1TagIdMutationBody = TagResource;
export type PutApiV1TagIdMutationError = ErrorType<unknown>;

export const usePutApiV1TagId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1TagId>>,
    TError,
    { id: string; data: TagResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1TagId>>,
  TError,
  { id: string; data: TagResource },
  TContext
> => {
  const mutationOptions = getPutApiV1TagIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1TagId = (id: number) => {
  return apiInstance<void>({ url: `/api/v1/tag/${id}`, method: "DELETE" });
};

export const getDeleteApiV1TagIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1TagId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1TagId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1TagId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1TagId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1TagIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1TagId>>
>;

export type DeleteApiV1TagIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1TagId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1TagId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1TagId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1TagIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Tag = (signal?: AbortSignal) => {
  return apiInstance<TagResource[]>({
    url: `/api/v1/tag`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1TagQueryKey = () => {
  return [`/api/v1/tag`] as const;
};

export const getGetApiV1TagQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Tag>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Tag>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1TagQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Tag>>> = ({
    signal,
  }) => getApiV1Tag(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Tag>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1TagQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Tag>>
>;
export type GetApiV1TagQueryError = ErrorType<unknown>;

export function useGetApiV1Tag<
  TData = Awaited<ReturnType<typeof getApiV1Tag>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Tag>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Tag>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Tag<
  TData = Awaited<ReturnType<typeof getApiV1Tag>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Tag>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Tag>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Tag<
  TData = Awaited<ReturnType<typeof getApiV1Tag>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Tag>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Tag<
  TData = Awaited<ReturnType<typeof getApiV1Tag>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Tag>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1TagQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const postApiV1Tag = (tagResource: TagResource) => {
  return apiInstance<TagResource>({
    url: `/api/v1/tag`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: tagResource,
  });
};

export const getPostApiV1TagMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Tag>>,
    TError,
    { data: TagResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Tag>>,
  TError,
  { data: TagResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Tag>>,
    { data: TagResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Tag(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1TagMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Tag>>
>;
export type PostApiV1TagMutationBody = TagResource;
export type PostApiV1TagMutationError = ErrorType<unknown>;

export const usePostApiV1Tag = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Tag>>,
    TError,
    { data: TagResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Tag>>,
  TError,
  { data: TagResource },
  TContext
> => {
  const mutationOptions = getPostApiV1TagMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1TagDetailId = (id: number, signal?: AbortSignal) => {
  return apiInstance<TagDetailsResource>({
    url: `/api/v1/tag/detail/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1TagDetailIdQueryKey = (id: number) => {
  return [`/api/v1/tag/detail/${id}`] as const;
};

export const getGetApiV1TagDetailIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1TagDetailId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TagDetailId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1TagDetailIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1TagDetailId>>
  > = ({ signal }) => getApiV1TagDetailId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1TagDetailId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1TagDetailIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1TagDetailId>>
>;
export type GetApiV1TagDetailIdQueryError = ErrorType<unknown>;

export function useGetApiV1TagDetailId<
  TData = Awaited<ReturnType<typeof getApiV1TagDetailId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TagDetailId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1TagDetailId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1TagDetailId<
  TData = Awaited<ReturnType<typeof getApiV1TagDetailId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TagDetailId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1TagDetailId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1TagDetailId<
  TData = Awaited<ReturnType<typeof getApiV1TagDetailId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TagDetailId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1TagDetailId<
  TData = Awaited<ReturnType<typeof getApiV1TagDetailId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TagDetailId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1TagDetailIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1TagDetail = (signal?: AbortSignal) => {
  return apiInstance<TagDetailsResource[]>({
    url: `/api/v1/tag/detail`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1TagDetailQueryKey = () => {
  return [`/api/v1/tag/detail`] as const;
};

export const getGetApiV1TagDetailQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1TagDetail>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1TagDetail>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1TagDetailQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1TagDetail>>
  > = ({ signal }) => getApiV1TagDetail(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1TagDetail>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1TagDetailQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1TagDetail>>
>;
export type GetApiV1TagDetailQueryError = ErrorType<unknown>;

export function useGetApiV1TagDetail<
  TData = Awaited<ReturnType<typeof getApiV1TagDetail>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1TagDetail>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1TagDetail>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1TagDetail<
  TData = Awaited<ReturnType<typeof getApiV1TagDetail>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1TagDetail>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1TagDetail>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1TagDetail<
  TData = Awaited<ReturnType<typeof getApiV1TagDetail>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1TagDetail>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1TagDetail<
  TData = Awaited<ReturnType<typeof getApiV1TagDetail>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1TagDetail>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1TagDetailQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1SystemTask = (signal?: AbortSignal) => {
  return apiInstance<TaskResource[]>({
    url: `/api/v1/system/task`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1SystemTaskQueryKey = () => {
  return [`/api/v1/system/task`] as const;
};

export const getGetApiV1SystemTaskQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SystemTask>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemTask>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1SystemTaskQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SystemTask>>
  > = ({ signal }) => getApiV1SystemTask(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SystemTask>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1SystemTaskQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SystemTask>>
>;
export type GetApiV1SystemTaskQueryError = ErrorType<unknown>;

export function useGetApiV1SystemTask<
  TData = Awaited<ReturnType<typeof getApiV1SystemTask>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemTask>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1SystemTask>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1SystemTask<
  TData = Awaited<ReturnType<typeof getApiV1SystemTask>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemTask>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1SystemTask>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1SystemTask<
  TData = Awaited<ReturnType<typeof getApiV1SystemTask>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemTask>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1SystemTask<
  TData = Awaited<ReturnType<typeof getApiV1SystemTask>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemTask>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1SystemTaskQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1SystemTaskId = (id: number, signal?: AbortSignal) => {
  return apiInstance<TaskResource>({
    url: `/api/v1/system/task/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1SystemTaskIdQueryKey = (id: number) => {
  return [`/api/v1/system/task/${id}`] as const;
};

export const getGetApiV1SystemTaskIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1SystemTaskIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SystemTaskId>>
  > = ({ signal }) => getApiV1SystemTaskId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1SystemTaskIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SystemTaskId>>
>;
export type GetApiV1SystemTaskIdQueryError = ErrorType<unknown>;

export function useGetApiV1SystemTaskId<
  TData = Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1SystemTaskId<
  TData = Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1SystemTaskId<
  TData = Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1SystemTaskId<
  TData = Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1SystemTaskIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1Track = (
  params?: GetApiV1TrackParams,
  signal?: AbortSignal
) => {
  return apiInstance<TrackResource[]>({
    url: `/api/v1/track`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1TrackQueryKey = (params?: GetApiV1TrackParams) => {
  return [`/api/v1/track`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1TrackQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Track>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1TrackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Track>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1TrackQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Track>>> = ({
    signal,
  }) => getApiV1Track(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Track>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1TrackQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Track>>
>;
export type GetApiV1TrackQueryError = ErrorType<unknown>;

export function useGetApiV1Track<
  TData = Awaited<ReturnType<typeof getApiV1Track>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1TrackParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Track>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Track>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Track<
  TData = Awaited<ReturnType<typeof getApiV1Track>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1TrackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Track>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Track>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Track<
  TData = Awaited<ReturnType<typeof getApiV1Track>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1TrackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Track>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Track<
  TData = Awaited<ReturnType<typeof getApiV1Track>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1TrackParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Track>>, TError, TData>
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1TrackQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1TrackId = (id: number, signal?: AbortSignal) => {
  return apiInstance<TrackResource>({
    url: `/api/v1/track/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1TrackIdQueryKey = (id: number) => {
  return [`/api/v1/track/${id}`] as const;
};

export const getGetApiV1TrackIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1TrackId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TrackId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1TrackIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1TrackId>>> = ({
    signal,
  }) => getApiV1TrackId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1TrackId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1TrackIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1TrackId>>
>;
export type GetApiV1TrackIdQueryError = ErrorType<unknown>;

export function useGetApiV1TrackId<
  TData = Awaited<ReturnType<typeof getApiV1TrackId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TrackId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1TrackId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1TrackId<
  TData = Awaited<ReturnType<typeof getApiV1TrackId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TrackId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1TrackId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1TrackId<
  TData = Awaited<ReturnType<typeof getApiV1TrackId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TrackId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1TrackId<
  TData = Awaited<ReturnType<typeof getApiV1TrackId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TrackId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1TrackIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1TrackfileId = (id: number, signal?: AbortSignal) => {
  return apiInstance<TrackFileResource>({
    url: `/api/v1/trackfile/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1TrackfileIdQueryKey = (id: number) => {
  return [`/api/v1/trackfile/${id}`] as const;
};

export const getGetApiV1TrackfileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1TrackfileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TrackfileId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1TrackfileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1TrackfileId>>
  > = ({ signal }) => getApiV1TrackfileId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1TrackfileId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1TrackfileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1TrackfileId>>
>;
export type GetApiV1TrackfileIdQueryError = ErrorType<unknown>;

export function useGetApiV1TrackfileId<
  TData = Awaited<ReturnType<typeof getApiV1TrackfileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TrackfileId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1TrackfileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1TrackfileId<
  TData = Awaited<ReturnType<typeof getApiV1TrackfileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TrackfileId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1TrackfileId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1TrackfileId<
  TData = Awaited<ReturnType<typeof getApiV1TrackfileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TrackfileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1TrackfileId<
  TData = Awaited<ReturnType<typeof getApiV1TrackfileId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TrackfileId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1TrackfileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1TrackfileId = (
  id: string,
  trackFileResource: TrackFileResource
) => {
  return apiInstance<TrackFileResource>({
    url: `/api/v1/trackfile/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: trackFileResource,
  });
};

export const getPutApiV1TrackfileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1TrackfileId>>,
    TError,
    { id: string; data: TrackFileResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1TrackfileId>>,
  TError,
  { id: string; data: TrackFileResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1TrackfileId>>,
    { id: string; data: TrackFileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1TrackfileId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1TrackfileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1TrackfileId>>
>;
export type PutApiV1TrackfileIdMutationBody = TrackFileResource;
export type PutApiV1TrackfileIdMutationError = ErrorType<unknown>;

export const usePutApiV1TrackfileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1TrackfileId>>,
    TError,
    { id: string; data: TrackFileResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1TrackfileId>>,
  TError,
  { id: string; data: TrackFileResource },
  TContext
> => {
  const mutationOptions = getPutApiV1TrackfileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1TrackfileId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v1/trackfile/${id}`,
    method: "DELETE",
  });
};

export const getDeleteApiV1TrackfileIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1TrackfileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1TrackfileId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1TrackfileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1TrackfileId(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1TrackfileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1TrackfileId>>
>;

export type DeleteApiV1TrackfileIdMutationError = ErrorType<unknown>;

export const useDeleteApiV1TrackfileId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1TrackfileId>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1TrackfileId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1TrackfileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Trackfile = (
  params?: GetApiV1TrackfileParams,
  signal?: AbortSignal
) => {
  return apiInstance<TrackFileResource[]>({
    url: `/api/v1/trackfile`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetApiV1TrackfileQueryKey = (
  params?: GetApiV1TrackfileParams
) => {
  return [`/api/v1/trackfile`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1TrackfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Trackfile>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1TrackfileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Trackfile>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV1TrackfileQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Trackfile>>
  > = ({ signal }) => getApiV1Trackfile(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Trackfile>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1TrackfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Trackfile>>
>;
export type GetApiV1TrackfileQueryError = ErrorType<unknown>;

export function useGetApiV1Trackfile<
  TData = Awaited<ReturnType<typeof getApiV1Trackfile>>,
  TError = ErrorType<unknown>
>(
  params: undefined | GetApiV1TrackfileParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Trackfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Trackfile>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Trackfile<
  TData = Awaited<ReturnType<typeof getApiV1Trackfile>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1TrackfileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Trackfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Trackfile>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Trackfile<
  TData = Awaited<ReturnType<typeof getApiV1Trackfile>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1TrackfileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Trackfile>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Trackfile<
  TData = Awaited<ReturnType<typeof getApiV1Trackfile>>,
  TError = ErrorType<unknown>
>(
  params?: GetApiV1TrackfileParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Trackfile>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1TrackfileQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const putApiV1TrackfileEditor = (
  trackFileListResource: TrackFileListResource
) => {
  return apiInstance<void>({
    url: `/api/v1/trackfile/editor`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: trackFileListResource,
  });
};

export const getPutApiV1TrackfileEditorMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1TrackfileEditor>>,
    TError,
    { data: TrackFileListResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1TrackfileEditor>>,
  TError,
  { data: TrackFileListResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1TrackfileEditor>>,
    { data: TrackFileListResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1TrackfileEditor(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1TrackfileEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1TrackfileEditor>>
>;
export type PutApiV1TrackfileEditorMutationBody = TrackFileListResource;
export type PutApiV1TrackfileEditorMutationError = ErrorType<unknown>;

export const usePutApiV1TrackfileEditor = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1TrackfileEditor>>,
    TError,
    { data: TrackFileListResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1TrackfileEditor>>,
  TError,
  { data: TrackFileListResource },
  TContext
> => {
  const mutationOptions = getPutApiV1TrackfileEditorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1TrackfileBulk = (
  trackFileListResource: TrackFileListResource
) => {
  return apiInstance<void>({
    url: `/api/v1/trackfile/bulk`,
    method: "DELETE",
    headers: { "Content-Type": "application/json" },
    data: trackFileListResource,
  });
};

export const getDeleteApiV1TrackfileBulkMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1TrackfileBulk>>,
    TError,
    { data: TrackFileListResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1TrackfileBulk>>,
  TError,
  { data: TrackFileListResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1TrackfileBulk>>,
    { data: TrackFileListResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV1TrackfileBulk(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1TrackfileBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1TrackfileBulk>>
>;
export type DeleteApiV1TrackfileBulkMutationBody = TrackFileListResource;
export type DeleteApiV1TrackfileBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV1TrackfileBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1TrackfileBulk>>,
    TError,
    { data: TrackFileListResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiV1TrackfileBulk>>,
  TError,
  { data: TrackFileListResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV1TrackfileBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1ConfigUiId = (
  id: string,
  uiConfigResource: UiConfigResource
) => {
  return apiInstance<UiConfigResource>({
    url: `/api/v1/config/ui/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: uiConfigResource,
  });
};

export const getPutApiV1ConfigUiIdMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigUiId>>,
    TError,
    { id: string; data: UiConfigResource },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigUiId>>,
  TError,
  { id: string; data: UiConfigResource },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigUiId>>,
    { id: string; data: UiConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigUiId(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigUiIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigUiId>>
>;
export type PutApiV1ConfigUiIdMutationBody = UiConfigResource;
export type PutApiV1ConfigUiIdMutationError = ErrorType<unknown>;

export const usePutApiV1ConfigUiId = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigUiId>>,
    TError,
    { id: string; data: UiConfigResource },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1ConfigUiId>>,
  TError,
  { id: string; data: UiConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV1ConfigUiIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigUiId = (id: number, signal?: AbortSignal) => {
  return apiInstance<UiConfigResource>({
    url: `/api/v1/config/ui/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigUiIdQueryKey = (id: number) => {
  return [`/api/v1/config/ui/${id}`] as const;
};

export const getGetApiV1ConfigUiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ConfigUiIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigUiId>>
  > = ({ signal }) => getApiV1ConfigUiId(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigUiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigUiId>>
>;
export type GetApiV1ConfigUiIdQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigUiId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigUiId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigUiId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigUiId<
  TData = Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
  TError = ErrorType<unknown>
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigUiIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1ConfigUi = (signal?: AbortSignal) => {
  return apiInstance<UiConfigResource>({
    url: `/api/v1/config/ui`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1ConfigUiQueryKey = () => {
  return [`/api/v1/config/ui`] as const;
};

export const getGetApiV1ConfigUiQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigUi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1ConfigUi>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1ConfigUiQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigUi>>
  > = ({ signal }) => getApiV1ConfigUi(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigUi>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1ConfigUiQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigUi>>
>;
export type GetApiV1ConfigUiQueryError = ErrorType<unknown>;

export function useGetApiV1ConfigUi<
  TData = Awaited<ReturnType<typeof getApiV1ConfigUi>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1ConfigUi>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigUi>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigUi<
  TData = Awaited<ReturnType<typeof getApiV1ConfigUi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1ConfigUi>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1ConfigUi>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1ConfigUi<
  TData = Awaited<ReturnType<typeof getApiV1ConfigUi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1ConfigUi>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1ConfigUi<
  TData = Awaited<ReturnType<typeof getApiV1ConfigUi>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1ConfigUi>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1ConfigUiQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1Update = (signal?: AbortSignal) => {
  return apiInstance<UpdateResource[]>({
    url: `/api/v1/update`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1UpdateQueryKey = () => {
  return [`/api/v1/update`] as const;
};

export const getGetApiV1UpdateQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Update>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Update>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1UpdateQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Update>>> = ({
    signal,
  }) => getApiV1Update(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Update>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1UpdateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Update>>
>;
export type GetApiV1UpdateQueryError = ErrorType<unknown>;

export function useGetApiV1Update<
  TData = Awaited<ReturnType<typeof getApiV1Update>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Update>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Update>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Update<
  TData = Awaited<ReturnType<typeof getApiV1Update>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Update>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1Update>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1Update<
  TData = Awaited<ReturnType<typeof getApiV1Update>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Update>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1Update<
  TData = Awaited<ReturnType<typeof getApiV1Update>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Update>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1UpdateQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1LogFileUpdate = (signal?: AbortSignal) => {
  return apiInstance<LogFileResource[]>({
    url: `/api/v1/log/file/update`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1LogFileUpdateQueryKey = () => {
  return [`/api/v1/log/file/update`] as const;
};

export const getGetApiV1LogFileUpdateQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV1LogFileUpdateQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1LogFileUpdate>>
  > = ({ signal }) => getApiV1LogFileUpdate(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1LogFileUpdateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1LogFileUpdate>>
>;
export type GetApiV1LogFileUpdateQueryError = ErrorType<unknown>;

export function useGetApiV1LogFileUpdate<
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
  TError = ErrorType<unknown>
>(options: {
  query: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
      TError,
      TData
    >
  > &
    Pick<
      DefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1LogFileUpdate<
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
      TError,
      TData
    >
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
        TError,
        TData
      >,
      "initialData"
    >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1LogFileUpdate<
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1LogFileUpdate<
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1LogFileUpdateQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getApiV1LogFileUpdateFilename = (
  filename: string,
  signal?: AbortSignal
) => {
  return apiInstance<void>({
    url: `/api/v1/log/file/update/${filename}`,
    method: "GET",
    signal,
  });
};

export const getGetApiV1LogFileUpdateFilenameQueryKey = (filename: string) => {
  return [`/api/v1/log/file/update/${filename}`] as const;
};

export const getGetApiV1LogFileUpdateFilenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV1LogFileUpdateFilenameQueryKey(filename);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>
  > = ({ signal }) => getApiV1LogFileUpdateFilename(filename, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!filename,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetApiV1LogFileUpdateFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>
>;
export type GetApiV1LogFileUpdateFilenameQueryError = ErrorType<unknown>;

export function useGetApiV1LogFileUpdateFilename<
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1LogFileUpdateFilename<
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
          TError,
          TData
        >,
        "initialData"
      >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1LogFileUpdateFilename<
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1LogFileUpdateFilename<
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
  TError = ErrorType<unknown>
>(
  filename: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
        TError,
        TData
      >
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetApiV1LogFileUpdateFilenameQueryOptions(
    filename,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
