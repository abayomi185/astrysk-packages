/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Jellyfin API
 * OpenAPI spec version: 10.8.8
 */
import type { ItemFields } from "./itemFields";
import type { BaseItemKind } from "./baseItemKind";
import type { ItemFilter } from "./itemFilter";
import type { ImageType } from "./imageType";
import type { SortOrder } from "./sortOrder";

export type GetArtistsParams = {
  /**
   * Optional filter by minimum community rating.
   */
  minCommunityRating?: number;
  /**
   * Optional. The record index to start at. All items with a lower index will be dropped from the results.
   */
  startIndex?: number;
  /**
   * Optional. The maximum number of records to return.
   */
  limit?: number;
  /**
   * Optional. Search term.
   */
  searchTerm?: string;
  /**
   * Specify this to localize the search to a specific item or folder. Omit to use the root.
   */
  parentId?: string;
  /**
   * Optional. Specify additional fields of information to return in the output.
   */
  fields?: ItemFields[];
  /**
   * Optional. If specified, results will be filtered out based on item type. This allows multiple, comma delimited.
   */
  excludeItemTypes?: BaseItemKind[];
  /**
   * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
   */
  includeItemTypes?: BaseItemKind[];
  /**
   * Optional. Specify additional filters to apply.
   */
  filters?: ItemFilter[];
  /**
   * Optional filter by items that are marked as favorite, or not.
   */
  isFavorite?: boolean;
  /**
   * Optional filter by MediaType. Allows multiple, comma delimited.
   */
  mediaTypes?: string[];
  /**
   * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
   */
  genres?: string[];
  /**
   * Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
   */
  genreIds?: string[];
  /**
   * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
   */
  officialRatings?: string[];
  /**
   * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
   */
  tags?: string[];
  /**
   * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
   */
  years?: number[];
  /**
   * Optional, include user data.
   */
  enableUserData?: boolean;
  /**
   * Optional, the max number of images to return, per image type.
   */
  imageTypeLimit?: number;
  /**
   * Optional. The image types to include in the output.
   */
  enableImageTypes?: ImageType[];
  /**
   * Optional. If specified, results will be filtered to include only those containing the specified person.
   */
  person?: string;
  /**
   * Optional. If specified, results will be filtered to include only those containing the specified person ids.
   */
  personIds?: string[];
  /**
   * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
   */
  personTypes?: string[];
  /**
   * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
   */
  studios?: string[];
  /**
   * Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
   */
  studioIds?: string[];
  /**
   * User id.
   */
  userId?: string;
  /**
   * Optional filter by items whose name is sorted equally or greater than a given input string.
   */
  nameStartsWithOrGreater?: string;
  /**
   * Optional filter by items whose name is sorted equally than a given input string.
   */
  nameStartsWith?: string;
  /**
   * Optional filter by items whose name is equally or lesser than a given input string.
   */
  nameLessThan?: string;
  /**
   * Optional. Specify one or more sort orders, comma delimited.
   */
  sortBy?: string[];
  /**
   * Sort Order - Ascending,Descending.
   */
  sortOrder?: SortOrder[];
  /**
   * Optional, include image information in output.
   */
  enableImages?: boolean;
  /**
   * Total record count.
   */
  enableTotalRecordCount?: boolean;
};
