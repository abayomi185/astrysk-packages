/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Jellyfin API
 * OpenAPI spec version: 10.8.8
 */
import type { LocationType } from "./locationType";
import type { SortOrder } from "./sortOrder";
import type { ItemFields } from "./itemFields";
import type { BaseItemKind } from "./baseItemKind";
import type { ItemFilter } from "./itemFilter";
import type { ImageType } from "./imageType";
import type { VideoType } from "./videoType";
import type { SeriesStatus } from "./seriesStatus";

export type GetItemsByUserIdParams = {
  /**
   * Optional filter by maximum official rating (PG, PG-13, TV-MA, etc).
   */
  maxOfficialRating?: string;
  /**
   * Optional filter by items with theme songs.
   */
  hasThemeSong?: boolean;
  /**
   * Optional filter by items with theme videos.
   */
  hasThemeVideo?: boolean;
  /**
   * Optional filter by items with subtitles.
   */
  hasSubtitles?: boolean;
  /**
   * Optional filter by items with special features.
   */
  hasSpecialFeature?: boolean;
  /**
   * Optional filter by items with trailers.
   */
  hasTrailer?: boolean;
  /**
   * Optional. Return items that are siblings of a supplied item.
   */
  adjacentTo?: string;
  /**
   * Optional filter by parent index number.
   */
  parentIndexNumber?: number;
  /**
   * Optional filter by items that have or do not have a parental rating.
   */
  hasParentalRating?: boolean;
  /**
   * Optional filter by items that are HD or not.
   */
  isHd?: boolean;
  /**
   * Optional filter by items that are 4K or not.
   */
  is4K?: boolean;
  /**
   * Optional. If specified, results will be filtered based on LocationType. This allows multiple, comma delimited.
   */
  locationTypes?: LocationType[];
  /**
   * Optional. If specified, results will be filtered based on the LocationType. This allows multiple, comma delimited.
   */
  excludeLocationTypes?: LocationType[];
  /**
   * Optional filter by items that are missing episodes or not.
   */
  isMissing?: boolean;
  /**
   * Optional filter by items that are unaired episodes or not.
   */
  isUnaired?: boolean;
  /**
   * Optional filter by minimum community rating.
   */
  minCommunityRating?: number;
  /**
   * Optional filter by minimum critic rating.
   */
  minCriticRating?: number;
  /**
   * Optional. The minimum premiere date. Format = ISO.
   */
  minPremiereDate?: string;
  /**
   * Optional. The minimum last saved date. Format = ISO.
   */
  minDateLastSaved?: string;
  /**
   * Optional. The minimum last saved date for the current user. Format = ISO.
   */
  minDateLastSavedForUser?: string;
  /**
   * Optional. The maximum premiere date. Format = ISO.
   */
  maxPremiereDate?: string;
  /**
   * Optional filter by items that have an overview or not.
   */
  hasOverview?: boolean;
  /**
   * Optional filter by items that have an imdb id or not.
   */
  hasImdbId?: boolean;
  /**
   * Optional filter by items that have a tmdb id or not.
   */
  hasTmdbId?: boolean;
  /**
   * Optional filter by items that have a tvdb id or not.
   */
  hasTvdbId?: boolean;
  /**
   * Optional filter for live tv movies.
   */
  isMovie?: boolean;
  /**
   * Optional filter for live tv series.
   */
  isSeries?: boolean;
  /**
   * Optional filter for live tv news.
   */
  isNews?: boolean;
  /**
   * Optional filter for live tv kids.
   */
  isKids?: boolean;
  /**
   * Optional filter for live tv sports.
   */
  isSports?: boolean;
  /**
   * Optional. If specified, results will be filtered by excluding item ids. This allows multiple, comma delimited.
   */
  excludeItemIds?: string[];
  /**
   * Optional. The record index to start at. All items with a lower index will be dropped from the results.
   */
  startIndex?: number;
  /**
   * Optional. The maximum number of records to return.
   */
  limit?: number;
  /**
   * When searching within folders, this determines whether or not the search will be recursive. true/false.
   */
  recursive?: boolean;
  /**
   * Optional. Filter based on a search term.
   */
  searchTerm?: string;
  /**
   * Sort Order - Ascending,Descending.
   */
  sortOrder?: SortOrder[];
  /**
   * Specify this to localize the search to a specific item or folder. Omit to use the root.
   */
  parentId?: string;
  /**
   * Optional. Specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.
   */
  fields?: ItemFields[];
  /**
   * Optional. If specified, results will be filtered based on item type. This allows multiple, comma delimited.
   */
  excludeItemTypes?: BaseItemKind[];
  /**
   * Optional. If specified, results will be filtered based on the item type. This allows multiple, comma delimited.
   */
  includeItemTypes?: BaseItemKind[];
  /**
   * Optional. Specify additional filters to apply. This allows multiple, comma delimited. Options: IsFolder, IsNotFolder, IsUnplayed, IsPlayed, IsFavorite, IsResumable, Likes, Dislikes.
   */
  filters?: ItemFilter[];
  /**
   * Optional filter by items that are marked as favorite, or not.
   */
  isFavorite?: boolean;
  /**
   * Optional filter by MediaType. Allows multiple, comma delimited.
   */
  mediaTypes?: string[];
  /**
   * Optional. If specified, results will be filtered based on those containing image types. This allows multiple, comma delimited.
   */
  imageTypes?: ImageType[];
  /**
   * Optional. Specify one or more sort orders, comma delimited. Options: Album, AlbumArtist, Artist, Budget, CommunityRating, CriticRating, DateCreated, DatePlayed, PlayCount, PremiereDate, ProductionYear, SortName, Random, Revenue, Runtime.
   */
  sortBy?: string[];
  /**
   * Optional filter by items that are played, or not.
   */
  isPlayed?: boolean;
  /**
   * Optional. If specified, results will be filtered based on genre. This allows multiple, pipe delimited.
   */
  genres?: string[];
  /**
   * Optional. If specified, results will be filtered based on OfficialRating. This allows multiple, pipe delimited.
   */
  officialRatings?: string[];
  /**
   * Optional. If specified, results will be filtered based on tag. This allows multiple, pipe delimited.
   */
  tags?: string[];
  /**
   * Optional. If specified, results will be filtered based on production year. This allows multiple, comma delimited.
   */
  years?: number[];
  /**
   * Optional, include user data.
   */
  enableUserData?: boolean;
  /**
   * Optional, the max number of images to return, per image type.
   */
  imageTypeLimit?: number;
  /**
   * Optional. The image types to include in the output.
   */
  enableImageTypes?: ImageType[];
  /**
   * Optional. If specified, results will be filtered to include only those containing the specified person.
   */
  person?: string;
  /**
   * Optional. If specified, results will be filtered to include only those containing the specified person id.
   */
  personIds?: string[];
  /**
   * Optional. If specified, along with Person, results will be filtered to include only those containing the specified person and PersonType. Allows multiple, comma-delimited.
   */
  personTypes?: string[];
  /**
   * Optional. If specified, results will be filtered based on studio. This allows multiple, pipe delimited.
   */
  studios?: string[];
  /**
   * Optional. If specified, results will be filtered based on artists. This allows multiple, pipe delimited.
   */
  artists?: string[];
  /**
   * Optional. If specified, results will be filtered based on artist id. This allows multiple, pipe delimited.
   */
  excludeArtistIds?: string[];
  /**
   * Optional. If specified, results will be filtered to include only those containing the specified artist id.
   */
  artistIds?: string[];
  /**
   * Optional. If specified, results will be filtered to include only those containing the specified album artist id.
   */
  albumArtistIds?: string[];
  /**
   * Optional. If specified, results will be filtered to include only those containing the specified contributing artist id.
   */
  contributingArtistIds?: string[];
  /**
   * Optional. If specified, results will be filtered based on album. This allows multiple, pipe delimited.
   */
  albums?: string[];
  /**
   * Optional. If specified, results will be filtered based on album id. This allows multiple, pipe delimited.
   */
  albumIds?: string[];
  /**
   * Optional. If specific items are needed, specify a list of item id's to retrieve. This allows multiple, comma delimited.
   */
  ids?: string[];
  /**
   * Optional filter by VideoType (videofile, dvd, bluray, iso). Allows multiple, comma delimited.
   */
  videoTypes?: VideoType[];
  /**
   * Optional filter by minimum official rating (PG, PG-13, TV-MA, etc).
   */
  minOfficialRating?: string;
  /**
   * Optional filter by items that are locked.
   */
  isLocked?: boolean;
  /**
   * Optional filter by items that are placeholders.
   */
  isPlaceHolder?: boolean;
  /**
   * Optional filter by items that have official ratings.
   */
  hasOfficialRating?: boolean;
  /**
   * Whether or not to hide items behind their boxsets.
   */
  collapseBoxSetItems?: boolean;
  /**
   * Optional. Filter by the minimum width of the item.
   */
  minWidth?: number;
  /**
   * Optional. Filter by the minimum height of the item.
   */
  minHeight?: number;
  /**
   * Optional. Filter by the maximum width of the item.
   */
  maxWidth?: number;
  /**
   * Optional. Filter by the maximum height of the item.
   */
  maxHeight?: number;
  /**
   * Optional filter by items that are 3D, or not.
   */
  is3D?: boolean;
  /**
   * Optional filter by Series Status. Allows multiple, comma delimited.
   */
  seriesStatus?: SeriesStatus[];
  /**
   * Optional filter by items whose name is sorted equally or greater than a given input string.
   */
  nameStartsWithOrGreater?: string;
  /**
   * Optional filter by items whose name is sorted equally than a given input string.
   */
  nameStartsWith?: string;
  /**
   * Optional filter by items whose name is equally or lesser than a given input string.
   */
  nameLessThan?: string;
  /**
   * Optional. If specified, results will be filtered based on studio id. This allows multiple, pipe delimited.
   */
  studioIds?: string[];
  /**
   * Optional. If specified, results will be filtered based on genre id. This allows multiple, pipe delimited.
   */
  genreIds?: string[];
  /**
   * Optional. Enable the total record count.
   */
  enableTotalRecordCount?: boolean;
  /**
   * Optional, include image information in output.
   */
  enableImages?: boolean;
};
