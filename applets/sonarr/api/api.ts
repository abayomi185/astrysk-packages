/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * Sonarr
 * Sonarr API docs
 * OpenAPI spec version: 3.0.0
 */
import { useQuery, useMutation } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  PostLoginBody,
  PostLoginParams,
  AutoTaggingResource,
  BackupResource,
  BlocklistResourcePagingResource,
  BlocklistBulkResource,
  EpisodeResource,
  GetApiV3CalendarParams,
  GetFeedV3CalendarSonarrIcsParams,
  CommandResource,
  CustomFilterResource,
  CustomFormatResource,
  EpisodeResourcePagingResource,
  GetApiV3WantedCutoffParams,
  DelayProfileResource,
  PutApiV3DelayprofileReorderIdParams,
  DiskSpaceResource,
  DownloadClientResource,
  PostApiV3DownloadclientParams,
  PutApiV3DownloadclientIdParams,
  DownloadClientBulkResource,
  DownloadClientConfigResource,
  GetApiV3EpisodeParams,
  EpisodesMonitoredResource,
  PutApiV3EpisodeMonitorParams,
  EpisodeFileResource,
  GetApiV3EpisodefileParams,
  EpisodeFileListResource,
  GetApiV3FilesystemParams,
  GetApiV3FilesystemTypeParams,
  GetApiV3FilesystemMediafilesParams,
  HealthResource,
  HistoryResourcePagingResource,
  GetApiV3HistoryParams,
  HistoryResource,
  GetApiV3HistorySinceParams,
  GetApiV3HistorySeriesParams,
  HostConfigResource,
  ImportListResource,
  PostApiV3ImportlistParams,
  PutApiV3ImportlistIdParams,
  ImportListBulkResource,
  ImportListExclusionResource,
  IndexerResource,
  PostApiV3IndexerParams,
  PutApiV3IndexerIdParams,
  IndexerBulkResource,
  IndexerConfigResource,
  LanguageResource,
  LanguageProfileResource,
  LocalizationResource,
  LocalizationLanguageResource,
  LogResourcePagingResource,
  LogFileResource,
  ManualImportResource,
  GetApiV3ManualimportParams,
  ManualImportReprocessResource,
  MediaManagementConfigResource,
  MetadataResource,
  PostApiV3MetadataParams,
  PutApiV3MetadataIdParams,
  MetadataBulkResource,
  GetApiV3WantedMissingParams,
  NamingConfigResource,
  GetApiV3ConfigNamingExamplesParams,
  NotificationResource,
  PostApiV3NotificationParams,
  PutApiV3NotificationIdParams,
  NotificationBulkResource,
  ParseResource,
  GetApiV3ParseParams,
  PingResource,
  QualityDefinitionResource,
  QualityProfileResource,
  DeleteApiV3QueueIdParams,
  QueueBulkResource,
  DeleteApiV3QueueBulkParams,
  QueueResourcePagingResource,
  GetApiV3QueueParams,
  QueueResource,
  GetApiV3QueueDetailsParams,
  QueueStatusResource,
  ReleaseResource,
  GetApiV3ReleaseParams,
  ReleaseProfileResource,
  RemotePathMappingResource,
  RenameEpisodeResource,
  GetApiV3RenameParams,
  RootFolderResource,
  SeasonPassResource,
  SeriesResource,
  GetApiV3SeriesParams,
  PutApiV3SeriesIdParams,
  DeleteApiV3SeriesIdParams,
  SeriesEditorResource,
  GetApiV3SeriesLookupParams,
  SystemResource,
  TagResource,
  TagDetailsResource,
  TaskResource,
  UiConfigResource,
  UpdateResource,
} from "./model";
import { apiInstance } from "../../../api/apiInstance";
import type { ErrorType } from "../../../api/apiInstance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const getApi = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/api`, method: "get", signal });
};

export const getGetApiQueryKey = () => [`/api`];

export type GetApiQueryResult = NonNullable<Awaited<ReturnType<typeof getApi>>>;
export type GetApiQueryError = ErrorType<unknown>;

export const useGetApi = <
  TData = Awaited<ReturnType<typeof getApi>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getApi>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApi>>> = ({
    signal,
  }) => getApi(signal);

  const query = useQuery<Awaited<ReturnType<typeof getApi>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const postLogin = (
  postLoginBody: PostLoginBody,
  params?: PostLoginParams,
) => {
  const formData = new FormData();
  if (postLoginBody.Username !== undefined) {
    formData.append("Username", postLoginBody.Username);
  }
  if (postLoginBody.Password !== undefined) {
    formData.append("Password", postLoginBody.Password);
  }
  if (postLoginBody.RememberMe !== undefined) {
    formData.append("RememberMe", postLoginBody.RememberMe);
  }

  return apiInstance<void>({
    url: `/login`,
    method: "post",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
    params,
  });
};

export type PostLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLogin>>
>;
export type PostLoginMutationBody = PostLoginBody;
export type PostLoginMutationError = ErrorType<unknown>;

export const usePostLogin = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    { data: PostLoginBody; params?: PostLoginParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLogin>>,
    { data: PostLoginBody; params?: PostLoginParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postLogin(data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    { data: PostLoginBody; params?: PostLoginParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const getLogin = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/login`, method: "get", signal });
};

export const getGetLoginQueryKey = () => [`/login`];

export type GetLoginQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLogin>>
>;
export type GetLoginQueryError = ErrorType<unknown>;

export const useGetLogin = <
  TData = Awaited<ReturnType<typeof getLogin>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getLogin>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLoginQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLogin>>> = ({
    signal,
  }) => getLogin(signal);

  const query = useQuery<Awaited<ReturnType<typeof getLogin>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getLogout = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/logout`, method: "get", signal });
};

export const getGetLogoutQueryKey = () => [`/logout`];

export type GetLogoutQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLogout>>
>;
export type GetLogoutQueryError = ErrorType<unknown>;

export const useGetLogout = <
  TData = Awaited<ReturnType<typeof getLogout>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetLogoutQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLogout>>> = ({
    signal,
  }) => getLogout(signal);

  const query = useQuery<Awaited<ReturnType<typeof getLogout>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Autotagging = (
  autoTaggingResource: AutoTaggingResource,
) => {
  return apiInstance<AutoTaggingResource>({
    url: `/api/v3/autotagging`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: autoTaggingResource,
  });
};

export type PostApiV3AutotaggingMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Autotagging>>
>;
export type PostApiV3AutotaggingMutationBody = AutoTaggingResource;
export type PostApiV3AutotaggingMutationError = ErrorType<unknown>;

export const usePostApiV3Autotagging = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Autotagging>>,
    TError,
    { data: AutoTaggingResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Autotagging>>,
    { data: AutoTaggingResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Autotagging(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Autotagging>>,
    TError,
    { data: AutoTaggingResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Autotagging = (signal?: AbortSignal) => {
  return apiInstance<AutoTaggingResource[]>({
    url: `/api/v3/autotagging`,
    method: "get",
    signal,
  });
};

export const getGetApiV3AutotaggingQueryKey = () => [`/api/v3/autotagging`];

export type GetApiV3AutotaggingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Autotagging>>
>;
export type GetApiV3AutotaggingQueryError = ErrorType<unknown>;

export const useGetApiV3Autotagging = <
  TData = Awaited<ReturnType<typeof getApiV3Autotagging>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Autotagging>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3AutotaggingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Autotagging>>
  > = ({ signal }) => getApiV3Autotagging(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Autotagging>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3AutotaggingId = (
  id: string,
  autoTaggingResource: AutoTaggingResource,
) => {
  return apiInstance<AutoTaggingResource>({
    url: `/api/v3/autotagging/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: autoTaggingResource,
  });
};

export type PutApiV3AutotaggingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3AutotaggingId>>
>;
export type PutApiV3AutotaggingIdMutationBody = AutoTaggingResource;
export type PutApiV3AutotaggingIdMutationError = ErrorType<unknown>;

export const usePutApiV3AutotaggingId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3AutotaggingId>>,
    TError,
    { id: string; data: AutoTaggingResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3AutotaggingId>>,
    { id: string; data: AutoTaggingResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3AutotaggingId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3AutotaggingId>>,
    TError,
    { id: string; data: AutoTaggingResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3AutotaggingId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/autotagging/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3AutotaggingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3AutotaggingId>>
>;

export type DeleteApiV3AutotaggingIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3AutotaggingId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3AutotaggingId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3AutotaggingId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3AutotaggingId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3AutotaggingId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3AutotaggingId = (id: number, signal?: AbortSignal) => {
  return apiInstance<AutoTaggingResource>({
    url: `/api/v3/autotagging/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3AutotaggingIdQueryKey = (id: number) => [
  `/api/v3/autotagging/${id}`,
];

export type GetApiV3AutotaggingIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3AutotaggingId>>
>;
export type GetApiV3AutotaggingIdQueryError = ErrorType<unknown>;

export const useGetApiV3AutotaggingId = <
  TData = Awaited<ReturnType<typeof getApiV3AutotaggingId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3AutotaggingId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3AutotaggingIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3AutotaggingId>>
  > = ({ signal }) => getApiV3AutotaggingId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3AutotaggingId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3AutotaggingSchema = (signal?: AbortSignal) => {
  return apiInstance<void>({
    url: `/api/v3/autotagging/schema`,
    method: "get",
    signal,
  });
};

export const getGetApiV3AutotaggingSchemaQueryKey = () => [
  `/api/v3/autotagging/schema`,
];

export type GetApiV3AutotaggingSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3AutotaggingSchema>>
>;
export type GetApiV3AutotaggingSchemaQueryError = ErrorType<unknown>;

export const useGetApiV3AutotaggingSchema = <
  TData = Awaited<ReturnType<typeof getApiV3AutotaggingSchema>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3AutotaggingSchema>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3AutotaggingSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3AutotaggingSchema>>
  > = ({ signal }) => getApiV3AutotaggingSchema(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3AutotaggingSchema>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3SystemBackup = (signal?: AbortSignal) => {
  return apiInstance<BackupResource[]>({
    url: `/api/v3/system/backup`,
    method: "get",
    signal,
  });
};

export const getGetApiV3SystemBackupQueryKey = () => [`/api/v3/system/backup`];

export type GetApiV3SystemBackupQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SystemBackup>>
>;
export type GetApiV3SystemBackupQueryError = ErrorType<unknown>;

export const useGetApiV3SystemBackup = <
  TData = Awaited<ReturnType<typeof getApiV3SystemBackup>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3SystemBackup>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3SystemBackupQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SystemBackup>>
  > = ({ signal }) => getApiV3SystemBackup(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3SystemBackup>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const deleteApiV3SystemBackupId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/system/backup/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3SystemBackupIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3SystemBackupId>>
>;

export type DeleteApiV3SystemBackupIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3SystemBackupId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3SystemBackupId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3SystemBackupId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3SystemBackupId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3SystemBackupId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3SystemBackupRestoreId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/system/backup/restore/${id}`,
    method: "post",
  });
};

export type PostApiV3SystemBackupRestoreIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3SystemBackupRestoreId>>
>;

export type PostApiV3SystemBackupRestoreIdMutationError = ErrorType<unknown>;

export const usePostApiV3SystemBackupRestoreId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3SystemBackupRestoreId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3SystemBackupRestoreId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postApiV3SystemBackupRestoreId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3SystemBackupRestoreId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3SystemBackupRestoreUpload = () => {
  return apiInstance<void>({
    url: `/api/v3/system/backup/restore/upload`,
    method: "post",
  });
};

export type PostApiV3SystemBackupRestoreUploadMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3SystemBackupRestoreUpload>>
>;

export type PostApiV3SystemBackupRestoreUploadMutationError =
  ErrorType<unknown>;

export const usePostApiV3SystemBackupRestoreUpload = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3SystemBackupRestoreUpload>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3SystemBackupRestoreUpload>>,
    TVariables
  > = () => {
    return postApiV3SystemBackupRestoreUpload();
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3SystemBackupRestoreUpload>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Blocklist = (signal?: AbortSignal) => {
  return apiInstance<BlocklistResourcePagingResource>({
    url: `/api/v3/blocklist`,
    method: "get",
    signal,
  });
};

export const getGetApiV3BlocklistQueryKey = () => [`/api/v3/blocklist`];

export type GetApiV3BlocklistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Blocklist>>
>;
export type GetApiV3BlocklistQueryError = ErrorType<unknown>;

export const useGetApiV3Blocklist = <
  TData = Awaited<ReturnType<typeof getApiV3Blocklist>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Blocklist>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3BlocklistQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Blocklist>>
  > = ({ signal }) => getApiV3Blocklist(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Blocklist>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const deleteApiV3BlocklistId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/blocklist/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3BlocklistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3BlocklistId>>
>;

export type DeleteApiV3BlocklistIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3BlocklistId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3BlocklistId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3BlocklistId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3BlocklistId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3BlocklistId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3BlocklistBulk = (
  blocklistBulkResource: BlocklistBulkResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/blocklist/bulk`,
    method: "delete",
    headers: { "Content-Type": "application/json" },
    data: blocklistBulkResource,
  });
};

export type DeleteApiV3BlocklistBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3BlocklistBulk>>
>;
export type DeleteApiV3BlocklistBulkMutationBody = BlocklistBulkResource;
export type DeleteApiV3BlocklistBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3BlocklistBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3BlocklistBulk>>,
    TError,
    { data: BlocklistBulkResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3BlocklistBulk>>,
    { data: BlocklistBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3BlocklistBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3BlocklistBulk>>,
    TError,
    { data: BlocklistBulkResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Calendar = (
  params?: GetApiV3CalendarParams,
  signal?: AbortSignal,
) => {
  return apiInstance<EpisodeResource[]>({
    url: `/api/v3/calendar`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3CalendarQueryKey = (
  params?: GetApiV3CalendarParams,
) => [`/api/v3/calendar`, ...(params ? [params] : [])];

export type GetApiV3CalendarQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Calendar>>
>;
export type GetApiV3CalendarQueryError = ErrorType<unknown>;

export const useGetApiV3Calendar = <
  TData = Awaited<ReturnType<typeof getApiV3Calendar>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3CalendarParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Calendar>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3CalendarQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Calendar>>
  > = ({ signal }) => getApiV3Calendar(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Calendar>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3CalendarId = (id: number, signal?: AbortSignal) => {
  return apiInstance<EpisodeResource>({
    url: `/api/v3/calendar/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3CalendarIdQueryKey = (id: number) => [
  `/api/v3/calendar/${id}`,
];

export type GetApiV3CalendarIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3CalendarId>>
>;
export type GetApiV3CalendarIdQueryError = ErrorType<unknown>;

export const useGetApiV3CalendarId = <
  TData = Awaited<ReturnType<typeof getApiV3CalendarId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3CalendarId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3CalendarIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3CalendarId>>
  > = ({ signal }) => getApiV3CalendarId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3CalendarId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getFeedV3CalendarSonarrIcs = (
  params?: GetFeedV3CalendarSonarrIcsParams,
  signal?: AbortSignal,
) => {
  return apiInstance<void>({
    url: `/feed/v3/calendar/sonarr.ics`,
    method: "get",
    params,
    signal,
  });
};

export const getGetFeedV3CalendarSonarrIcsQueryKey = (
  params?: GetFeedV3CalendarSonarrIcsParams,
) => [`/feed/v3/calendar/sonarr.ics`, ...(params ? [params] : [])];

export type GetFeedV3CalendarSonarrIcsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFeedV3CalendarSonarrIcs>>
>;
export type GetFeedV3CalendarSonarrIcsQueryError = ErrorType<unknown>;

export const useGetFeedV3CalendarSonarrIcs = <
  TData = Awaited<ReturnType<typeof getFeedV3CalendarSonarrIcs>>,
  TError = ErrorType<unknown>,
>(
  params?: GetFeedV3CalendarSonarrIcsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getFeedV3CalendarSonarrIcs>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetFeedV3CalendarSonarrIcsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getFeedV3CalendarSonarrIcs>>
  > = ({ signal }) => getFeedV3CalendarSonarrIcs(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getFeedV3CalendarSonarrIcs>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Command = (commandResource: CommandResource) => {
  return apiInstance<CommandResource>({
    url: `/api/v3/command`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: commandResource,
  });
};

export type PostApiV3CommandMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Command>>
>;
export type PostApiV3CommandMutationBody = CommandResource;
export type PostApiV3CommandMutationError = ErrorType<unknown>;

export const usePostApiV3Command = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Command>>,
    TError,
    { data: CommandResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Command>>,
    { data: CommandResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Command(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Command>>,
    TError,
    { data: CommandResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Command = (signal?: AbortSignal) => {
  return apiInstance<CommandResource[]>({
    url: `/api/v3/command`,
    method: "get",
    signal,
  });
};

export const getGetApiV3CommandQueryKey = () => [`/api/v3/command`];

export type GetApiV3CommandQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Command>>
>;
export type GetApiV3CommandQueryError = ErrorType<unknown>;

export const useGetApiV3Command = <
  TData = Awaited<ReturnType<typeof getApiV3Command>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Command>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3CommandQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Command>>> = ({
    signal,
  }) => getApiV3Command(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Command>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const deleteApiV3CommandId = (id: number) => {
  return apiInstance<void>({ url: `/api/v3/command/${id}`, method: "delete" });
};

export type DeleteApiV3CommandIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3CommandId>>
>;

export type DeleteApiV3CommandIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3CommandId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3CommandId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3CommandId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3CommandId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3CommandId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3CommandId = (id: number, signal?: AbortSignal) => {
  return apiInstance<CommandResource>({
    url: `/api/v3/command/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3CommandIdQueryKey = (id: number) => [
  `/api/v3/command/${id}`,
];

export type GetApiV3CommandIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3CommandId>>
>;
export type GetApiV3CommandIdQueryError = ErrorType<unknown>;

export const useGetApiV3CommandId = <
  TData = Awaited<ReturnType<typeof getApiV3CommandId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3CommandId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3CommandIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3CommandId>>
  > = ({ signal }) => getApiV3CommandId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3CommandId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Customfilter = (signal?: AbortSignal) => {
  return apiInstance<CustomFilterResource[]>({
    url: `/api/v3/customfilter`,
    method: "get",
    signal,
  });
};

export const getGetApiV3CustomfilterQueryKey = () => [`/api/v3/customfilter`];

export type GetApiV3CustomfilterQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Customfilter>>
>;
export type GetApiV3CustomfilterQueryError = ErrorType<unknown>;

export const useGetApiV3Customfilter = <
  TData = Awaited<ReturnType<typeof getApiV3Customfilter>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Customfilter>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3CustomfilterQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Customfilter>>
  > = ({ signal }) => getApiV3Customfilter(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Customfilter>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Customfilter = (
  customFilterResource: CustomFilterResource,
) => {
  return apiInstance<CustomFilterResource>({
    url: `/api/v3/customfilter`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: customFilterResource,
  });
};

export type PostApiV3CustomfilterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Customfilter>>
>;
export type PostApiV3CustomfilterMutationBody = CustomFilterResource;
export type PostApiV3CustomfilterMutationError = ErrorType<unknown>;

export const usePostApiV3Customfilter = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Customfilter>>,
    TError,
    { data: CustomFilterResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Customfilter>>,
    { data: CustomFilterResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Customfilter(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Customfilter>>,
    TError,
    { data: CustomFilterResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3CustomfilterId = (
  id: string,
  customFilterResource: CustomFilterResource,
) => {
  return apiInstance<CustomFilterResource>({
    url: `/api/v3/customfilter/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: customFilterResource,
  });
};

export type PutApiV3CustomfilterIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3CustomfilterId>>
>;
export type PutApiV3CustomfilterIdMutationBody = CustomFilterResource;
export type PutApiV3CustomfilterIdMutationError = ErrorType<unknown>;

export const usePutApiV3CustomfilterId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3CustomfilterId>>,
    TError,
    { id: string; data: CustomFilterResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3CustomfilterId>>,
    { id: string; data: CustomFilterResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3CustomfilterId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3CustomfilterId>>,
    TError,
    { id: string; data: CustomFilterResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3CustomfilterId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/customfilter/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3CustomfilterIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3CustomfilterId>>
>;

export type DeleteApiV3CustomfilterIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3CustomfilterId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3CustomfilterId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3CustomfilterId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3CustomfilterId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3CustomfilterId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3CustomfilterId = (id: number, signal?: AbortSignal) => {
  return apiInstance<CustomFilterResource>({
    url: `/api/v3/customfilter/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3CustomfilterIdQueryKey = (id: number) => [
  `/api/v3/customfilter/${id}`,
];

export type GetApiV3CustomfilterIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3CustomfilterId>>
>;
export type GetApiV3CustomfilterIdQueryError = ErrorType<unknown>;

export const useGetApiV3CustomfilterId = <
  TData = Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3CustomfilterIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3CustomfilterId>>
  > = ({ signal }) => getApiV3CustomfilterId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3CustomfilterId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Customformat = (
  customFormatResource: CustomFormatResource,
) => {
  return apiInstance<CustomFormatResource>({
    url: `/api/v3/customformat`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: customFormatResource,
  });
};

export type PostApiV3CustomformatMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Customformat>>
>;
export type PostApiV3CustomformatMutationBody = CustomFormatResource;
export type PostApiV3CustomformatMutationError = ErrorType<unknown>;

export const usePostApiV3Customformat = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Customformat>>,
    TError,
    { data: CustomFormatResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Customformat>>,
    { data: CustomFormatResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Customformat(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Customformat>>,
    TError,
    { data: CustomFormatResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Customformat = (signal?: AbortSignal) => {
  return apiInstance<CustomFormatResource[]>({
    url: `/api/v3/customformat`,
    method: "get",
    signal,
  });
};

export const getGetApiV3CustomformatQueryKey = () => [`/api/v3/customformat`];

export type GetApiV3CustomformatQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Customformat>>
>;
export type GetApiV3CustomformatQueryError = ErrorType<unknown>;

export const useGetApiV3Customformat = <
  TData = Awaited<ReturnType<typeof getApiV3Customformat>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Customformat>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3CustomformatQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Customformat>>
  > = ({ signal }) => getApiV3Customformat(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Customformat>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3CustomformatId = (
  id: string,
  customFormatResource: CustomFormatResource,
) => {
  return apiInstance<CustomFormatResource>({
    url: `/api/v3/customformat/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: customFormatResource,
  });
};

export type PutApiV3CustomformatIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3CustomformatId>>
>;
export type PutApiV3CustomformatIdMutationBody = CustomFormatResource;
export type PutApiV3CustomformatIdMutationError = ErrorType<unknown>;

export const usePutApiV3CustomformatId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3CustomformatId>>,
    TError,
    { id: string; data: CustomFormatResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3CustomformatId>>,
    { id: string; data: CustomFormatResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3CustomformatId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3CustomformatId>>,
    TError,
    { id: string; data: CustomFormatResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3CustomformatId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/customformat/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3CustomformatIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3CustomformatId>>
>;

export type DeleteApiV3CustomformatIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3CustomformatId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3CustomformatId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3CustomformatId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3CustomformatId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3CustomformatId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3CustomformatId = (id: number, signal?: AbortSignal) => {
  return apiInstance<CustomFormatResource>({
    url: `/api/v3/customformat/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3CustomformatIdQueryKey = (id: number) => [
  `/api/v3/customformat/${id}`,
];

export type GetApiV3CustomformatIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3CustomformatId>>
>;
export type GetApiV3CustomformatIdQueryError = ErrorType<unknown>;

export const useGetApiV3CustomformatId = <
  TData = Awaited<ReturnType<typeof getApiV3CustomformatId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3CustomformatId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3CustomformatIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3CustomformatId>>
  > = ({ signal }) => getApiV3CustomformatId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3CustomformatId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3CustomformatSchema = (signal?: AbortSignal) => {
  return apiInstance<void>({
    url: `/api/v3/customformat/schema`,
    method: "get",
    signal,
  });
};

export const getGetApiV3CustomformatSchemaQueryKey = () => [
  `/api/v3/customformat/schema`,
];

export type GetApiV3CustomformatSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3CustomformatSchema>>
>;
export type GetApiV3CustomformatSchemaQueryError = ErrorType<unknown>;

export const useGetApiV3CustomformatSchema = <
  TData = Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3CustomformatSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3CustomformatSchema>>
  > = ({ signal }) => getApiV3CustomformatSchema(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3CustomformatSchema>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3WantedCutoff = (
  params?: GetApiV3WantedCutoffParams,
  signal?: AbortSignal,
) => {
  return apiInstance<EpisodeResourcePagingResource>({
    url: `/api/v3/wanted/cutoff`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3WantedCutoffQueryKey = (
  params?: GetApiV3WantedCutoffParams,
) => [`/api/v3/wanted/cutoff`, ...(params ? [params] : [])];

export type GetApiV3WantedCutoffQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3WantedCutoff>>
>;
export type GetApiV3WantedCutoffQueryError = ErrorType<unknown>;

export const useGetApiV3WantedCutoff = <
  TData = Awaited<ReturnType<typeof getApiV3WantedCutoff>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3WantedCutoffParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3WantedCutoff>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3WantedCutoffQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3WantedCutoff>>
  > = ({ signal }) => getApiV3WantedCutoff(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3WantedCutoff>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3WantedCutoffId = (id: number, signal?: AbortSignal) => {
  return apiInstance<EpisodeResource>({
    url: `/api/v3/wanted/cutoff/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3WantedCutoffIdQueryKey = (id: number) => [
  `/api/v3/wanted/cutoff/${id}`,
];

export type GetApiV3WantedCutoffIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3WantedCutoffId>>
>;
export type GetApiV3WantedCutoffIdQueryError = ErrorType<unknown>;

export const useGetApiV3WantedCutoffId = <
  TData = Awaited<ReturnType<typeof getApiV3WantedCutoffId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3WantedCutoffId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3WantedCutoffIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3WantedCutoffId>>
  > = ({ signal }) => getApiV3WantedCutoffId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3WantedCutoffId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Delayprofile = (
  delayProfileResource: DelayProfileResource,
) => {
  return apiInstance<DelayProfileResource>({
    url: `/api/v3/delayprofile`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: delayProfileResource,
  });
};

export type PostApiV3DelayprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Delayprofile>>
>;
export type PostApiV3DelayprofileMutationBody = DelayProfileResource;
export type PostApiV3DelayprofileMutationError = ErrorType<unknown>;

export const usePostApiV3Delayprofile = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Delayprofile>>,
    TError,
    { data: DelayProfileResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Delayprofile>>,
    { data: DelayProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Delayprofile(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Delayprofile>>,
    TError,
    { data: DelayProfileResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Delayprofile = (signal?: AbortSignal) => {
  return apiInstance<DelayProfileResource[]>({
    url: `/api/v3/delayprofile`,
    method: "get",
    signal,
  });
};

export const getGetApiV3DelayprofileQueryKey = () => [`/api/v3/delayprofile`];

export type GetApiV3DelayprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Delayprofile>>
>;
export type GetApiV3DelayprofileQueryError = ErrorType<unknown>;

export const useGetApiV3Delayprofile = <
  TData = Awaited<ReturnType<typeof getApiV3Delayprofile>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Delayprofile>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3DelayprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Delayprofile>>
  > = ({ signal }) => getApiV3Delayprofile(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Delayprofile>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const deleteApiV3DelayprofileId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/delayprofile/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3DelayprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3DelayprofileId>>
>;

export type DeleteApiV3DelayprofileIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3DelayprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3DelayprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3DelayprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3DelayprofileId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3DelayprofileId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3DelayprofileId = (
  id: string,
  delayProfileResource: DelayProfileResource,
) => {
  return apiInstance<DelayProfileResource>({
    url: `/api/v3/delayprofile/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: delayProfileResource,
  });
};

export type PutApiV3DelayprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3DelayprofileId>>
>;
export type PutApiV3DelayprofileIdMutationBody = DelayProfileResource;
export type PutApiV3DelayprofileIdMutationError = ErrorType<unknown>;

export const usePutApiV3DelayprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3DelayprofileId>>,
    TError,
    { id: string; data: DelayProfileResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3DelayprofileId>>,
    { id: string; data: DelayProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3DelayprofileId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3DelayprofileId>>,
    TError,
    { id: string; data: DelayProfileResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3DelayprofileId = (id: number, signal?: AbortSignal) => {
  return apiInstance<DelayProfileResource>({
    url: `/api/v3/delayprofile/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3DelayprofileIdQueryKey = (id: number) => [
  `/api/v3/delayprofile/${id}`,
];

export type GetApiV3DelayprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3DelayprofileId>>
>;
export type GetApiV3DelayprofileIdQueryError = ErrorType<unknown>;

export const useGetApiV3DelayprofileId = <
  TData = Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3DelayprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3DelayprofileId>>
  > = ({ signal }) => getApiV3DelayprofileId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3DelayprofileId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3DelayprofileReorderId = (
  id: number,
  params?: PutApiV3DelayprofileReorderIdParams,
) => {
  return apiInstance<DelayProfileResource[]>({
    url: `/api/v3/delayprofile/reorder/${id}`,
    method: "put",
    params,
  });
};

export type PutApiV3DelayprofileReorderIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3DelayprofileReorderId>>
>;

export type PutApiV3DelayprofileReorderIdMutationError = ErrorType<unknown>;

export const usePutApiV3DelayprofileReorderId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3DelayprofileReorderId>>,
    TError,
    { id: number; params?: PutApiV3DelayprofileReorderIdParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3DelayprofileReorderId>>,
    { id: number; params?: PutApiV3DelayprofileReorderIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return putApiV3DelayprofileReorderId(id, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3DelayprofileReorderId>>,
    TError,
    { id: number; params?: PutApiV3DelayprofileReorderIdParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Diskspace = (signal?: AbortSignal) => {
  return apiInstance<DiskSpaceResource[]>({
    url: `/api/v3/diskspace`,
    method: "get",
    signal,
  });
};

export const getGetApiV3DiskspaceQueryKey = () => [`/api/v3/diskspace`];

export type GetApiV3DiskspaceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Diskspace>>
>;
export type GetApiV3DiskspaceQueryError = ErrorType<unknown>;

export const useGetApiV3Diskspace = <
  TData = Awaited<ReturnType<typeof getApiV3Diskspace>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Diskspace>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3DiskspaceQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Diskspace>>
  > = ({ signal }) => getApiV3Diskspace(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Diskspace>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Downloadclient = (signal?: AbortSignal) => {
  return apiInstance<DownloadClientResource[]>({
    url: `/api/v3/downloadclient`,
    method: "get",
    signal,
  });
};

export const getGetApiV3DownloadclientQueryKey = () => [
  `/api/v3/downloadclient`,
];

export type GetApiV3DownloadclientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Downloadclient>>
>;
export type GetApiV3DownloadclientQueryError = ErrorType<unknown>;

export const useGetApiV3Downloadclient = <
  TData = Awaited<ReturnType<typeof getApiV3Downloadclient>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Downloadclient>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3DownloadclientQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Downloadclient>>
  > = ({ signal }) => getApiV3Downloadclient(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Downloadclient>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Downloadclient = (
  downloadClientResource: DownloadClientResource,
  params?: PostApiV3DownloadclientParams,
) => {
  return apiInstance<DownloadClientResource>({
    url: `/api/v3/downloadclient`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: downloadClientResource,
    params,
  });
};

export type PostApiV3DownloadclientMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Downloadclient>>
>;
export type PostApiV3DownloadclientMutationBody = DownloadClientResource;
export type PostApiV3DownloadclientMutationError = ErrorType<unknown>;

export const usePostApiV3Downloadclient = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Downloadclient>>,
    TError,
    { data: DownloadClientResource; params?: PostApiV3DownloadclientParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Downloadclient>>,
    { data: DownloadClientResource; params?: PostApiV3DownloadclientParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV3Downloadclient(data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Downloadclient>>,
    TError,
    { data: DownloadClientResource; params?: PostApiV3DownloadclientParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3DownloadclientId = (
  id: string,
  downloadClientResource: DownloadClientResource,
  params?: PutApiV3DownloadclientIdParams,
) => {
  return apiInstance<DownloadClientResource>({
    url: `/api/v3/downloadclient/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: downloadClientResource,
    params,
  });
};

export type PutApiV3DownloadclientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3DownloadclientId>>
>;
export type PutApiV3DownloadclientIdMutationBody = DownloadClientResource;
export type PutApiV3DownloadclientIdMutationError = ErrorType<unknown>;

export const usePutApiV3DownloadclientId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3DownloadclientId>>,
    TError,
    {
      id: string;
      data: DownloadClientResource;
      params?: PutApiV3DownloadclientIdParams;
    },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3DownloadclientId>>,
    {
      id: string;
      data: DownloadClientResource;
      params?: PutApiV3DownloadclientIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV3DownloadclientId(id, data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3DownloadclientId>>,
    TError,
    {
      id: string;
      data: DownloadClientResource;
      params?: PutApiV3DownloadclientIdParams;
    },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3DownloadclientId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/downloadclient/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3DownloadclientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3DownloadclientId>>
>;

export type DeleteApiV3DownloadclientIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3DownloadclientId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3DownloadclientId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3DownloadclientId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3DownloadclientId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3DownloadclientId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3DownloadclientId = (id: number, signal?: AbortSignal) => {
  return apiInstance<DownloadClientResource>({
    url: `/api/v3/downloadclient/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3DownloadclientIdQueryKey = (id: number) => [
  `/api/v3/downloadclient/${id}`,
];

export type GetApiV3DownloadclientIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3DownloadclientId>>
>;
export type GetApiV3DownloadclientIdQueryError = ErrorType<unknown>;

export const useGetApiV3DownloadclientId = <
  TData = Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3DownloadclientIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3DownloadclientId>>
  > = ({ signal }) => getApiV3DownloadclientId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3DownloadclientId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3DownloadclientBulk = (
  downloadClientBulkResource: DownloadClientBulkResource,
) => {
  return apiInstance<DownloadClientResource>({
    url: `/api/v3/downloadclient/bulk`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: downloadClientBulkResource,
  });
};

export type PutApiV3DownloadclientBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3DownloadclientBulk>>
>;
export type PutApiV3DownloadclientBulkMutationBody = DownloadClientBulkResource;
export type PutApiV3DownloadclientBulkMutationError = ErrorType<unknown>;

export const usePutApiV3DownloadclientBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3DownloadclientBulk>>,
    { data: DownloadClientBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3DownloadclientBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3DownloadclientBulk = (
  downloadClientBulkResource: DownloadClientBulkResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/downloadclient/bulk`,
    method: "delete",
    headers: { "Content-Type": "application/json" },
    data: downloadClientBulkResource,
  });
};

export type DeleteApiV3DownloadclientBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3DownloadclientBulk>>
>;
export type DeleteApiV3DownloadclientBulkMutationBody =
  DownloadClientBulkResource;
export type DeleteApiV3DownloadclientBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3DownloadclientBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3DownloadclientBulk>>,
    { data: DownloadClientBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3DownloadclientBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3DownloadclientSchema = (signal?: AbortSignal) => {
  return apiInstance<DownloadClientResource[]>({
    url: `/api/v3/downloadclient/schema`,
    method: "get",
    signal,
  });
};

export const getGetApiV3DownloadclientSchemaQueryKey = () => [
  `/api/v3/downloadclient/schema`,
];

export type GetApiV3DownloadclientSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>
>;
export type GetApiV3DownloadclientSchemaQueryError = ErrorType<unknown>;

export const useGetApiV3DownloadclientSchema = <
  TData = Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3DownloadclientSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>
  > = ({ signal }) => getApiV3DownloadclientSchema(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3DownloadclientSchema>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3DownloadclientTest = (
  downloadClientResource: DownloadClientResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/downloadclient/test`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: downloadClientResource,
  });
};

export type PostApiV3DownloadclientTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3DownloadclientTest>>
>;
export type PostApiV3DownloadclientTestMutationBody = DownloadClientResource;
export type PostApiV3DownloadclientTestMutationError = ErrorType<unknown>;

export const usePostApiV3DownloadclientTest = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3DownloadclientTest>>,
    TError,
    { data: DownloadClientResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3DownloadclientTest>>,
    { data: DownloadClientResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3DownloadclientTest(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3DownloadclientTest>>,
    TError,
    { data: DownloadClientResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3DownloadclientTestall = () => {
  return apiInstance<void>({
    url: `/api/v3/downloadclient/testall`,
    method: "post",
  });
};

export type PostApiV3DownloadclientTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3DownloadclientTestall>>
>;

export type PostApiV3DownloadclientTestallMutationError = ErrorType<unknown>;

export const usePostApiV3DownloadclientTestall = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3DownloadclientTestall>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3DownloadclientTestall>>,
    TVariables
  > = () => {
    return postApiV3DownloadclientTestall();
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3DownloadclientTestall>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3DownloadclientActionName = (
  name: string,
  downloadClientResource: DownloadClientResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/downloadclient/action/${name}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: downloadClientResource,
  });
};

export type PostApiV3DownloadclientActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3DownloadclientActionName>>
>;
export type PostApiV3DownloadclientActionNameMutationBody =
  DownloadClientResource;
export type PostApiV3DownloadclientActionNameMutationError = ErrorType<unknown>;

export const usePostApiV3DownloadclientActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3DownloadclientActionName>>,
    TError,
    { name: string; data: DownloadClientResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3DownloadclientActionName>>,
    { name: string; data: DownloadClientResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV3DownloadclientActionName(name, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3DownloadclientActionName>>,
    TError,
    { name: string; data: DownloadClientResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3ConfigDownloadclient = (signal?: AbortSignal) => {
  return apiInstance<DownloadClientConfigResource>({
    url: `/api/v3/config/downloadclient`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ConfigDownloadclientQueryKey = () => [
  `/api/v3/config/downloadclient`,
];

export type GetApiV3ConfigDownloadclientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>
>;
export type GetApiV3ConfigDownloadclientQueryError = ErrorType<unknown>;

export const useGetApiV3ConfigDownloadclient = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigDownloadclientQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>
  > = ({ signal }) => getApiV3ConfigDownloadclient(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ConfigDownloadclient>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3ConfigDownloadclientId = (
  id: string,
  downloadClientConfigResource: DownloadClientConfigResource,
) => {
  return apiInstance<DownloadClientConfigResource>({
    url: `/api/v3/config/downloadclient/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: downloadClientConfigResource,
  });
};

export type PutApiV3ConfigDownloadclientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigDownloadclientId>>
>;
export type PutApiV3ConfigDownloadclientIdMutationBody =
  DownloadClientConfigResource;
export type PutApiV3ConfigDownloadclientIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigDownloadclientId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigDownloadclientId>>,
    TError,
    { id: string; data: DownloadClientConfigResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigDownloadclientId>>,
    { id: string; data: DownloadClientConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigDownloadclientId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3ConfigDownloadclientId>>,
    TError,
    { id: string; data: DownloadClientConfigResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3ConfigDownloadclientId = (
  id: number,
  signal?: AbortSignal,
) => {
  return apiInstance<DownloadClientConfigResource>({
    url: `/api/v3/config/downloadclient/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ConfigDownloadclientIdQueryKey = (id: number) => [
  `/api/v3/config/downloadclient/${id}`,
];

export type GetApiV3ConfigDownloadclientIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>
>;
export type GetApiV3ConfigDownloadclientIdQueryError = ErrorType<unknown>;

export const useGetApiV3ConfigDownloadclientId = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigDownloadclientIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>
  > = ({ signal }) => getApiV3ConfigDownloadclientId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ConfigDownloadclientId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Episode = (
  params?: GetApiV3EpisodeParams,
  signal?: AbortSignal,
) => {
  return apiInstance<EpisodeResource[]>({
    url: `/api/v3/episode`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3EpisodeQueryKey = (params?: GetApiV3EpisodeParams) => [
  `/api/v3/episode`,
  ...(params ? [params] : []),
];

export type GetApiV3EpisodeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Episode>>
>;
export type GetApiV3EpisodeQueryError = ErrorType<unknown>;

export const useGetApiV3Episode = <
  TData = Awaited<ReturnType<typeof getApiV3Episode>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3EpisodeParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Episode>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3EpisodeQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Episode>>> = ({
    signal,
  }) => getApiV3Episode(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Episode>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3EpisodeId = (
  id: number,
  episodeResource: EpisodeResource,
) => {
  return apiInstance<EpisodeResource>({
    url: `/api/v3/episode/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: episodeResource,
  });
};

export type PutApiV3EpisodeIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3EpisodeId>>
>;
export type PutApiV3EpisodeIdMutationBody = EpisodeResource;
export type PutApiV3EpisodeIdMutationError = ErrorType<unknown>;

export const usePutApiV3EpisodeId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3EpisodeId>>,
    TError,
    { id: number; data: EpisodeResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3EpisodeId>>,
    { id: number; data: EpisodeResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3EpisodeId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3EpisodeId>>,
    TError,
    { id: number; data: EpisodeResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3EpisodeId = (id: number, signal?: AbortSignal) => {
  return apiInstance<EpisodeResource>({
    url: `/api/v3/episode/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3EpisodeIdQueryKey = (id: number) => [
  `/api/v3/episode/${id}`,
];

export type GetApiV3EpisodeIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3EpisodeId>>
>;
export type GetApiV3EpisodeIdQueryError = ErrorType<unknown>;

export const useGetApiV3EpisodeId = <
  TData = Awaited<ReturnType<typeof getApiV3EpisodeId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3EpisodeId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3EpisodeIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3EpisodeId>>
  > = ({ signal }) => getApiV3EpisodeId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3EpisodeId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3EpisodeMonitor = (
  episodesMonitoredResource: EpisodesMonitoredResource,
  params?: PutApiV3EpisodeMonitorParams,
) => {
  return apiInstance<void>({
    url: `/api/v3/episode/monitor`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: episodesMonitoredResource,
    params,
  });
};

export type PutApiV3EpisodeMonitorMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3EpisodeMonitor>>
>;
export type PutApiV3EpisodeMonitorMutationBody = EpisodesMonitoredResource;
export type PutApiV3EpisodeMonitorMutationError = ErrorType<unknown>;

export const usePutApiV3EpisodeMonitor = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3EpisodeMonitor>>,
    TError,
    { data: EpisodesMonitoredResource; params?: PutApiV3EpisodeMonitorParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3EpisodeMonitor>>,
    { data: EpisodesMonitoredResource; params?: PutApiV3EpisodeMonitorParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return putApiV3EpisodeMonitor(data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3EpisodeMonitor>>,
    TError,
    { data: EpisodesMonitoredResource; params?: PutApiV3EpisodeMonitorParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Episodefile = (
  params?: GetApiV3EpisodefileParams,
  signal?: AbortSignal,
) => {
  return apiInstance<EpisodeFileResource[]>({
    url: `/api/v3/episodefile`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3EpisodefileQueryKey = (
  params?: GetApiV3EpisodefileParams,
) => [`/api/v3/episodefile`, ...(params ? [params] : [])];

export type GetApiV3EpisodefileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Episodefile>>
>;
export type GetApiV3EpisodefileQueryError = ErrorType<unknown>;

export const useGetApiV3Episodefile = <
  TData = Awaited<ReturnType<typeof getApiV3Episodefile>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3EpisodefileParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Episodefile>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3EpisodefileQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Episodefile>>
  > = ({ signal }) => getApiV3Episodefile(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Episodefile>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3EpisodefileId = (
  id: string,
  episodeFileResource: EpisodeFileResource,
) => {
  return apiInstance<EpisodeFileResource>({
    url: `/api/v3/episodefile/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: episodeFileResource,
  });
};

export type PutApiV3EpisodefileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3EpisodefileId>>
>;
export type PutApiV3EpisodefileIdMutationBody = EpisodeFileResource;
export type PutApiV3EpisodefileIdMutationError = ErrorType<unknown>;

export const usePutApiV3EpisodefileId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3EpisodefileId>>,
    TError,
    { id: string; data: EpisodeFileResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3EpisodefileId>>,
    { id: string; data: EpisodeFileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3EpisodefileId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3EpisodefileId>>,
    TError,
    { id: string; data: EpisodeFileResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3EpisodefileId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/episodefile/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3EpisodefileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3EpisodefileId>>
>;

export type DeleteApiV3EpisodefileIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3EpisodefileId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3EpisodefileId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3EpisodefileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3EpisodefileId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3EpisodefileId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3EpisodefileId = (id: number, signal?: AbortSignal) => {
  return apiInstance<EpisodeFileResource>({
    url: `/api/v3/episodefile/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3EpisodefileIdQueryKey = (id: number) => [
  `/api/v3/episodefile/${id}`,
];

export type GetApiV3EpisodefileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3EpisodefileId>>
>;
export type GetApiV3EpisodefileIdQueryError = ErrorType<unknown>;

export const useGetApiV3EpisodefileId = <
  TData = Awaited<ReturnType<typeof getApiV3EpisodefileId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3EpisodefileId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3EpisodefileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3EpisodefileId>>
  > = ({ signal }) => getApiV3EpisodefileId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3EpisodefileId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3EpisodefileEditor = (
  episodeFileListResource: EpisodeFileListResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/episodefile/editor`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: episodeFileListResource,
  });
};

export type PutApiV3EpisodefileEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3EpisodefileEditor>>
>;
export type PutApiV3EpisodefileEditorMutationBody = EpisodeFileListResource;
export type PutApiV3EpisodefileEditorMutationError = ErrorType<unknown>;

export const usePutApiV3EpisodefileEditor = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3EpisodefileEditor>>,
    TError,
    { data: EpisodeFileListResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3EpisodefileEditor>>,
    { data: EpisodeFileListResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3EpisodefileEditor(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3EpisodefileEditor>>,
    TError,
    { data: EpisodeFileListResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3EpisodefileBulk = (
  episodeFileListResource: EpisodeFileListResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/episodefile/bulk`,
    method: "delete",
    headers: { "Content-Type": "application/json" },
    data: episodeFileListResource,
  });
};

export type DeleteApiV3EpisodefileBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3EpisodefileBulk>>
>;
export type DeleteApiV3EpisodefileBulkMutationBody = EpisodeFileListResource;
export type DeleteApiV3EpisodefileBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3EpisodefileBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3EpisodefileBulk>>,
    TError,
    { data: EpisodeFileListResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3EpisodefileBulk>>,
    { data: EpisodeFileListResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3EpisodefileBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3EpisodefileBulk>>,
    TError,
    { data: EpisodeFileListResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3EpisodefileBulk = (
  episodeFileResource: EpisodeFileResource[],
) => {
  return apiInstance<void>({
    url: `/api/v3/episodefile/bulk`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: episodeFileResource,
  });
};

export type PutApiV3EpisodefileBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3EpisodefileBulk>>
>;
export type PutApiV3EpisodefileBulkMutationBody = EpisodeFileResource[];
export type PutApiV3EpisodefileBulkMutationError = ErrorType<unknown>;

export const usePutApiV3EpisodefileBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3EpisodefileBulk>>,
    TError,
    { data: EpisodeFileResource[] },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3EpisodefileBulk>>,
    { data: EpisodeFileResource[] }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3EpisodefileBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3EpisodefileBulk>>,
    TError,
    { data: EpisodeFileResource[] },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Filesystem = (
  params?: GetApiV3FilesystemParams,
  signal?: AbortSignal,
) => {
  return apiInstance<void>({
    url: `/api/v3/filesystem`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3FilesystemQueryKey = (
  params?: GetApiV3FilesystemParams,
) => [`/api/v3/filesystem`, ...(params ? [params] : [])];

export type GetApiV3FilesystemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Filesystem>>
>;
export type GetApiV3FilesystemQueryError = ErrorType<unknown>;

export const useGetApiV3Filesystem = <
  TData = Awaited<ReturnType<typeof getApiV3Filesystem>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3FilesystemParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Filesystem>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3FilesystemQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Filesystem>>
  > = ({ signal }) => getApiV3Filesystem(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Filesystem>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3FilesystemType = (
  params?: GetApiV3FilesystemTypeParams,
  signal?: AbortSignal,
) => {
  return apiInstance<void>({
    url: `/api/v3/filesystem/type`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3FilesystemTypeQueryKey = (
  params?: GetApiV3FilesystemTypeParams,
) => [`/api/v3/filesystem/type`, ...(params ? [params] : [])];

export type GetApiV3FilesystemTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3FilesystemType>>
>;
export type GetApiV3FilesystemTypeQueryError = ErrorType<unknown>;

export const useGetApiV3FilesystemType = <
  TData = Awaited<ReturnType<typeof getApiV3FilesystemType>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3FilesystemTypeParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3FilesystemType>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3FilesystemTypeQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3FilesystemType>>
  > = ({ signal }) => getApiV3FilesystemType(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3FilesystemType>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3FilesystemMediafiles = (
  params?: GetApiV3FilesystemMediafilesParams,
  signal?: AbortSignal,
) => {
  return apiInstance<void>({
    url: `/api/v3/filesystem/mediafiles`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3FilesystemMediafilesQueryKey = (
  params?: GetApiV3FilesystemMediafilesParams,
) => [`/api/v3/filesystem/mediafiles`, ...(params ? [params] : [])];

export type GetApiV3FilesystemMediafilesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>
>;
export type GetApiV3FilesystemMediafilesQueryError = ErrorType<unknown>;

export const useGetApiV3FilesystemMediafiles = <
  TData = Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3FilesystemMediafilesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3FilesystemMediafilesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>
  > = ({ signal }) => getApiV3FilesystemMediafiles(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3FilesystemMediafiles>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Health = (signal?: AbortSignal) => {
  return apiInstance<HealthResource[]>({
    url: `/api/v3/health`,
    method: "get",
    signal,
  });
};

export const getGetApiV3HealthQueryKey = () => [`/api/v3/health`];

export type GetApiV3HealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Health>>
>;
export type GetApiV3HealthQueryError = ErrorType<unknown>;

export const useGetApiV3Health = <
  TData = Awaited<ReturnType<typeof getApiV3Health>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Health>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3HealthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Health>>> = ({
    signal,
  }) => getApiV3Health(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Health>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3History = (
  params?: GetApiV3HistoryParams,
  signal?: AbortSignal,
) => {
  return apiInstance<HistoryResourcePagingResource>({
    url: `/api/v3/history`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3HistoryQueryKey = (params?: GetApiV3HistoryParams) => [
  `/api/v3/history`,
  ...(params ? [params] : []),
];

export type GetApiV3HistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3History>>
>;
export type GetApiV3HistoryQueryError = ErrorType<unknown>;

export const useGetApiV3History = <
  TData = Awaited<ReturnType<typeof getApiV3History>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3HistoryParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3History>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3HistoryQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3History>>> = ({
    signal,
  }) => getApiV3History(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3History>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3HistorySince = (
  params?: GetApiV3HistorySinceParams,
  signal?: AbortSignal,
) => {
  return apiInstance<HistoryResource[]>({
    url: `/api/v3/history/since`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3HistorySinceQueryKey = (
  params?: GetApiV3HistorySinceParams,
) => [`/api/v3/history/since`, ...(params ? [params] : [])];

export type GetApiV3HistorySinceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3HistorySince>>
>;
export type GetApiV3HistorySinceQueryError = ErrorType<unknown>;

export const useGetApiV3HistorySince = <
  TData = Awaited<ReturnType<typeof getApiV3HistorySince>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3HistorySinceParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3HistorySince>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3HistorySinceQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3HistorySince>>
  > = ({ signal }) => getApiV3HistorySince(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3HistorySince>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3HistorySeries = (
  params?: GetApiV3HistorySeriesParams,
  signal?: AbortSignal,
) => {
  return apiInstance<HistoryResource[]>({
    url: `/api/v3/history/series`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3HistorySeriesQueryKey = (
  params?: GetApiV3HistorySeriesParams,
) => [`/api/v3/history/series`, ...(params ? [params] : [])];

export type GetApiV3HistorySeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3HistorySeries>>
>;
export type GetApiV3HistorySeriesQueryError = ErrorType<unknown>;

export const useGetApiV3HistorySeries = <
  TData = Awaited<ReturnType<typeof getApiV3HistorySeries>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3HistorySeriesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3HistorySeries>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3HistorySeriesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3HistorySeries>>
  > = ({ signal }) => getApiV3HistorySeries(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3HistorySeries>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3HistoryFailedId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/history/failed/${id}`,
    method: "post",
  });
};

export type PostApiV3HistoryFailedIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3HistoryFailedId>>
>;

export type PostApiV3HistoryFailedIdMutationError = ErrorType<unknown>;

export const usePostApiV3HistoryFailedId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3HistoryFailedId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3HistoryFailedId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postApiV3HistoryFailedId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3HistoryFailedId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3ConfigHost = (signal?: AbortSignal) => {
  return apiInstance<HostConfigResource>({
    url: `/api/v3/config/host`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ConfigHostQueryKey = () => [`/api/v3/config/host`];

export type GetApiV3ConfigHostQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigHost>>
>;
export type GetApiV3ConfigHostQueryError = ErrorType<unknown>;

export const useGetApiV3ConfigHost = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigHost>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigHost>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ConfigHostQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigHost>>
  > = ({ signal }) => getApiV3ConfigHost(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ConfigHost>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3ConfigHostId = (
  id: string,
  hostConfigResource: HostConfigResource,
) => {
  return apiInstance<HostConfigResource>({
    url: `/api/v3/config/host/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: hostConfigResource,
  });
};

export type PutApiV3ConfigHostIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigHostId>>
>;
export type PutApiV3ConfigHostIdMutationBody = HostConfigResource;
export type PutApiV3ConfigHostIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigHostId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigHostId>>,
    TError,
    { id: string; data: HostConfigResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigHostId>>,
    { id: string; data: HostConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigHostId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3ConfigHostId>>,
    TError,
    { id: string; data: HostConfigResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3ConfigHostId = (id: number, signal?: AbortSignal) => {
  return apiInstance<HostConfigResource>({
    url: `/api/v3/config/host/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ConfigHostIdQueryKey = (id: number) => [
  `/api/v3/config/host/${id}`,
];

export type GetApiV3ConfigHostIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigHostId>>
>;
export type GetApiV3ConfigHostIdQueryError = ErrorType<unknown>;

export const useGetApiV3ConfigHostId = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigHostIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigHostId>>
  > = ({ signal }) => getApiV3ConfigHostId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ConfigHostId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Importlist = (signal?: AbortSignal) => {
  return apiInstance<ImportListResource[]>({
    url: `/api/v3/importlist`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ImportlistQueryKey = () => [`/api/v3/importlist`];

export type GetApiV3ImportlistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Importlist>>
>;
export type GetApiV3ImportlistQueryError = ErrorType<unknown>;

export const useGetApiV3Importlist = <
  TData = Awaited<ReturnType<typeof getApiV3Importlist>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Importlist>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ImportlistQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Importlist>>
  > = ({ signal }) => getApiV3Importlist(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Importlist>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Importlist = (
  importListResource: ImportListResource,
  params?: PostApiV3ImportlistParams,
) => {
  return apiInstance<ImportListResource>({
    url: `/api/v3/importlist`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: importListResource,
    params,
  });
};

export type PostApiV3ImportlistMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Importlist>>
>;
export type PostApiV3ImportlistMutationBody = ImportListResource;
export type PostApiV3ImportlistMutationError = ErrorType<unknown>;

export const usePostApiV3Importlist = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Importlist>>,
    TError,
    { data: ImportListResource; params?: PostApiV3ImportlistParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Importlist>>,
    { data: ImportListResource; params?: PostApiV3ImportlistParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV3Importlist(data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Importlist>>,
    TError,
    { data: ImportListResource; params?: PostApiV3ImportlistParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3ImportlistId = (
  id: string,
  importListResource: ImportListResource,
  params?: PutApiV3ImportlistIdParams,
) => {
  return apiInstance<ImportListResource>({
    url: `/api/v3/importlist/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: importListResource,
    params,
  });
};

export type PutApiV3ImportlistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ImportlistId>>
>;
export type PutApiV3ImportlistIdMutationBody = ImportListResource;
export type PutApiV3ImportlistIdMutationError = ErrorType<unknown>;

export const usePutApiV3ImportlistId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ImportlistId>>,
    TError,
    {
      id: string;
      data: ImportListResource;
      params?: PutApiV3ImportlistIdParams;
    },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ImportlistId>>,
    {
      id: string;
      data: ImportListResource;
      params?: PutApiV3ImportlistIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV3ImportlistId(id, data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3ImportlistId>>,
    TError,
    {
      id: string;
      data: ImportListResource;
      params?: PutApiV3ImportlistIdParams;
    },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3ImportlistId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/importlist/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3ImportlistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3ImportlistId>>
>;

export type DeleteApiV3ImportlistIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3ImportlistId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3ImportlistId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3ImportlistId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3ImportlistId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3ImportlistId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3ImportlistId = (id: number, signal?: AbortSignal) => {
  return apiInstance<ImportListResource>({
    url: `/api/v3/importlist/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ImportlistIdQueryKey = (id: number) => [
  `/api/v3/importlist/${id}`,
];

export type GetApiV3ImportlistIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ImportlistId>>
>;
export type GetApiV3ImportlistIdQueryError = ErrorType<unknown>;

export const useGetApiV3ImportlistId = <
  TData = Awaited<ReturnType<typeof getApiV3ImportlistId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ImportlistId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ImportlistIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ImportlistId>>
  > = ({ signal }) => getApiV3ImportlistId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ImportlistId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3ImportlistBulk = (
  importListBulkResource: ImportListBulkResource,
) => {
  return apiInstance<ImportListResource>({
    url: `/api/v3/importlist/bulk`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: importListBulkResource,
  });
};

export type PutApiV3ImportlistBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ImportlistBulk>>
>;
export type PutApiV3ImportlistBulkMutationBody = ImportListBulkResource;
export type PutApiV3ImportlistBulkMutationError = ErrorType<unknown>;

export const usePutApiV3ImportlistBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ImportlistBulk>>,
    { data: ImportListBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3ImportlistBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3ImportlistBulk = (
  importListBulkResource: ImportListBulkResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/importlist/bulk`,
    method: "delete",
    headers: { "Content-Type": "application/json" },
    data: importListBulkResource,
  });
};

export type DeleteApiV3ImportlistBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3ImportlistBulk>>
>;
export type DeleteApiV3ImportlistBulkMutationBody = ImportListBulkResource;
export type DeleteApiV3ImportlistBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3ImportlistBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3ImportlistBulk>>,
    { data: ImportListBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3ImportlistBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3ImportlistSchema = (signal?: AbortSignal) => {
  return apiInstance<ImportListResource[]>({
    url: `/api/v3/importlist/schema`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ImportlistSchemaQueryKey = () => [
  `/api/v3/importlist/schema`,
];

export type GetApiV3ImportlistSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ImportlistSchema>>
>;
export type GetApiV3ImportlistSchemaQueryError = ErrorType<unknown>;

export const useGetApiV3ImportlistSchema = <
  TData = Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ImportlistSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ImportlistSchema>>
  > = ({ signal }) => getApiV3ImportlistSchema(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ImportlistSchema>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3ImportlistTest = (
  importListResource: ImportListResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/importlist/test`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: importListResource,
  });
};

export type PostApiV3ImportlistTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3ImportlistTest>>
>;
export type PostApiV3ImportlistTestMutationBody = ImportListResource;
export type PostApiV3ImportlistTestMutationError = ErrorType<unknown>;

export const usePostApiV3ImportlistTest = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ImportlistTest>>,
    TError,
    { data: ImportListResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3ImportlistTest>>,
    { data: ImportListResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3ImportlistTest(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3ImportlistTest>>,
    TError,
    { data: ImportListResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3ImportlistTestall = () => {
  return apiInstance<void>({
    url: `/api/v3/importlist/testall`,
    method: "post",
  });
};

export type PostApiV3ImportlistTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3ImportlistTestall>>
>;

export type PostApiV3ImportlistTestallMutationError = ErrorType<unknown>;

export const usePostApiV3ImportlistTestall = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ImportlistTestall>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3ImportlistTestall>>,
    TVariables
  > = () => {
    return postApiV3ImportlistTestall();
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3ImportlistTestall>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3ImportlistActionName = (
  name: string,
  importListResource: ImportListResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/importlist/action/${name}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: importListResource,
  });
};

export type PostApiV3ImportlistActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3ImportlistActionName>>
>;
export type PostApiV3ImportlistActionNameMutationBody = ImportListResource;
export type PostApiV3ImportlistActionNameMutationError = ErrorType<unknown>;

export const usePostApiV3ImportlistActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ImportlistActionName>>,
    TError,
    { name: string; data: ImportListResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3ImportlistActionName>>,
    { name: string; data: ImportListResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV3ImportlistActionName(name, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3ImportlistActionName>>,
    TError,
    { name: string; data: ImportListResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Importlistexclusion = (signal?: AbortSignal) => {
  return apiInstance<ImportListExclusionResource[]>({
    url: `/api/v3/importlistexclusion`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ImportlistexclusionQueryKey = () => [
  `/api/v3/importlistexclusion`,
];

export type GetApiV3ImportlistexclusionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Importlistexclusion>>
>;
export type GetApiV3ImportlistexclusionQueryError = ErrorType<unknown>;

export const useGetApiV3Importlistexclusion = <
  TData = Awaited<ReturnType<typeof getApiV3Importlistexclusion>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Importlistexclusion>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ImportlistexclusionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Importlistexclusion>>
  > = ({ signal }) => getApiV3Importlistexclusion(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Importlistexclusion>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Importlistexclusion = (
  importListExclusionResource: ImportListExclusionResource,
) => {
  return apiInstance<ImportListExclusionResource>({
    url: `/api/v3/importlistexclusion`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: importListExclusionResource,
  });
};

export type PostApiV3ImportlistexclusionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Importlistexclusion>>
>;
export type PostApiV3ImportlistexclusionMutationBody =
  ImportListExclusionResource;
export type PostApiV3ImportlistexclusionMutationError = ErrorType<unknown>;

export const usePostApiV3Importlistexclusion = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Importlistexclusion>>,
    TError,
    { data: ImportListExclusionResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Importlistexclusion>>,
    { data: ImportListExclusionResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Importlistexclusion(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Importlistexclusion>>,
    TError,
    { data: ImportListExclusionResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3ImportlistexclusionId = (
  id: string,
  importListExclusionResource: ImportListExclusionResource,
) => {
  return apiInstance<ImportListExclusionResource>({
    url: `/api/v3/importlistexclusion/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: importListExclusionResource,
  });
};

export type PutApiV3ImportlistexclusionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ImportlistexclusionId>>
>;
export type PutApiV3ImportlistexclusionIdMutationBody =
  ImportListExclusionResource;
export type PutApiV3ImportlistexclusionIdMutationError = ErrorType<unknown>;

export const usePutApiV3ImportlistexclusionId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ImportlistexclusionId>>,
    TError,
    { id: string; data: ImportListExclusionResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ImportlistexclusionId>>,
    { id: string; data: ImportListExclusionResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ImportlistexclusionId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3ImportlistexclusionId>>,
    TError,
    { id: string; data: ImportListExclusionResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3ImportlistexclusionId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/importlistexclusion/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3ImportlistexclusionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3ImportlistexclusionId>>
>;

export type DeleteApiV3ImportlistexclusionIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3ImportlistexclusionId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3ImportlistexclusionId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3ImportlistexclusionId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3ImportlistexclusionId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3ImportlistexclusionId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3ImportlistexclusionId = (
  id: number,
  signal?: AbortSignal,
) => {
  return apiInstance<ImportListExclusionResource>({
    url: `/api/v3/importlistexclusion/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ImportlistexclusionIdQueryKey = (id: number) => [
  `/api/v3/importlistexclusion/${id}`,
];

export type GetApiV3ImportlistexclusionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ImportlistexclusionId>>
>;
export type GetApiV3ImportlistexclusionIdQueryError = ErrorType<unknown>;

export const useGetApiV3ImportlistexclusionId = <
  TData = Awaited<ReturnType<typeof getApiV3ImportlistexclusionId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ImportlistexclusionId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ImportlistexclusionIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ImportlistexclusionId>>
  > = ({ signal }) => getApiV3ImportlistexclusionId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ImportlistexclusionId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Indexer = (signal?: AbortSignal) => {
  return apiInstance<IndexerResource[]>({
    url: `/api/v3/indexer`,
    method: "get",
    signal,
  });
};

export const getGetApiV3IndexerQueryKey = () => [`/api/v3/indexer`];

export type GetApiV3IndexerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Indexer>>
>;
export type GetApiV3IndexerQueryError = ErrorType<unknown>;

export const useGetApiV3Indexer = <
  TData = Awaited<ReturnType<typeof getApiV3Indexer>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Indexer>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3IndexerQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Indexer>>> = ({
    signal,
  }) => getApiV3Indexer(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Indexer>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Indexer = (
  indexerResource: IndexerResource,
  params?: PostApiV3IndexerParams,
) => {
  return apiInstance<IndexerResource>({
    url: `/api/v3/indexer`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: indexerResource,
    params,
  });
};

export type PostApiV3IndexerMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Indexer>>
>;
export type PostApiV3IndexerMutationBody = IndexerResource;
export type PostApiV3IndexerMutationError = ErrorType<unknown>;

export const usePostApiV3Indexer = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Indexer>>,
    TError,
    { data: IndexerResource; params?: PostApiV3IndexerParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Indexer>>,
    { data: IndexerResource; params?: PostApiV3IndexerParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV3Indexer(data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Indexer>>,
    TError,
    { data: IndexerResource; params?: PostApiV3IndexerParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3IndexerId = (
  id: string,
  indexerResource: IndexerResource,
  params?: PutApiV3IndexerIdParams,
) => {
  return apiInstance<IndexerResource>({
    url: `/api/v3/indexer/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: indexerResource,
    params,
  });
};

export type PutApiV3IndexerIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3IndexerId>>
>;
export type PutApiV3IndexerIdMutationBody = IndexerResource;
export type PutApiV3IndexerIdMutationError = ErrorType<unknown>;

export const usePutApiV3IndexerId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3IndexerId>>,
    TError,
    { id: string; data: IndexerResource; params?: PutApiV3IndexerIdParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3IndexerId>>,
    { id: string; data: IndexerResource; params?: PutApiV3IndexerIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV3IndexerId(id, data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3IndexerId>>,
    TError,
    { id: string; data: IndexerResource; params?: PutApiV3IndexerIdParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3IndexerId = (id: number) => {
  return apiInstance<void>({ url: `/api/v3/indexer/${id}`, method: "delete" });
};

export type DeleteApiV3IndexerIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3IndexerId>>
>;

export type DeleteApiV3IndexerIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3IndexerId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3IndexerId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3IndexerId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3IndexerId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3IndexerId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3IndexerId = (id: number, signal?: AbortSignal) => {
  return apiInstance<IndexerResource>({
    url: `/api/v3/indexer/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3IndexerIdQueryKey = (id: number) => [
  `/api/v3/indexer/${id}`,
];

export type GetApiV3IndexerIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3IndexerId>>
>;
export type GetApiV3IndexerIdQueryError = ErrorType<unknown>;

export const useGetApiV3IndexerId = <
  TData = Awaited<ReturnType<typeof getApiV3IndexerId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3IndexerId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3IndexerIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3IndexerId>>
  > = ({ signal }) => getApiV3IndexerId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3IndexerId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3IndexerBulk = (
  indexerBulkResource: IndexerBulkResource,
) => {
  return apiInstance<IndexerResource>({
    url: `/api/v3/indexer/bulk`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: indexerBulkResource,
  });
};

export type PutApiV3IndexerBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3IndexerBulk>>
>;
export type PutApiV3IndexerBulkMutationBody = IndexerBulkResource;
export type PutApiV3IndexerBulkMutationError = ErrorType<unknown>;

export const usePutApiV3IndexerBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3IndexerBulk>>,
    { data: IndexerBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3IndexerBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3IndexerBulk = (
  indexerBulkResource: IndexerBulkResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/indexer/bulk`,
    method: "delete",
    headers: { "Content-Type": "application/json" },
    data: indexerBulkResource,
  });
};

export type DeleteApiV3IndexerBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3IndexerBulk>>
>;
export type DeleteApiV3IndexerBulkMutationBody = IndexerBulkResource;
export type DeleteApiV3IndexerBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3IndexerBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3IndexerBulk>>,
    { data: IndexerBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3IndexerBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3IndexerSchema = (signal?: AbortSignal) => {
  return apiInstance<IndexerResource[]>({
    url: `/api/v3/indexer/schema`,
    method: "get",
    signal,
  });
};

export const getGetApiV3IndexerSchemaQueryKey = () => [
  `/api/v3/indexer/schema`,
];

export type GetApiV3IndexerSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3IndexerSchema>>
>;
export type GetApiV3IndexerSchemaQueryError = ErrorType<unknown>;

export const useGetApiV3IndexerSchema = <
  TData = Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3IndexerSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3IndexerSchema>>
  > = ({ signal }) => getApiV3IndexerSchema(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3IndexerSchema>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3IndexerTest = (indexerResource: IndexerResource) => {
  return apiInstance<void>({
    url: `/api/v3/indexer/test`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: indexerResource,
  });
};

export type PostApiV3IndexerTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3IndexerTest>>
>;
export type PostApiV3IndexerTestMutationBody = IndexerResource;
export type PostApiV3IndexerTestMutationError = ErrorType<unknown>;

export const usePostApiV3IndexerTest = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3IndexerTest>>,
    TError,
    { data: IndexerResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3IndexerTest>>,
    { data: IndexerResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3IndexerTest(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3IndexerTest>>,
    TError,
    { data: IndexerResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3IndexerTestall = () => {
  return apiInstance<void>({ url: `/api/v3/indexer/testall`, method: "post" });
};

export type PostApiV3IndexerTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3IndexerTestall>>
>;

export type PostApiV3IndexerTestallMutationError = ErrorType<unknown>;

export const usePostApiV3IndexerTestall = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3IndexerTestall>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3IndexerTestall>>,
    TVariables
  > = () => {
    return postApiV3IndexerTestall();
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3IndexerTestall>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3IndexerActionName = (
  name: string,
  indexerResource: IndexerResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/indexer/action/${name}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: indexerResource,
  });
};

export type PostApiV3IndexerActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3IndexerActionName>>
>;
export type PostApiV3IndexerActionNameMutationBody = IndexerResource;
export type PostApiV3IndexerActionNameMutationError = ErrorType<unknown>;

export const usePostApiV3IndexerActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3IndexerActionName>>,
    TError,
    { name: string; data: IndexerResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3IndexerActionName>>,
    { name: string; data: IndexerResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV3IndexerActionName(name, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3IndexerActionName>>,
    TError,
    { name: string; data: IndexerResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3ConfigIndexer = (signal?: AbortSignal) => {
  return apiInstance<IndexerConfigResource>({
    url: `/api/v3/config/indexer`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ConfigIndexerQueryKey = () => [
  `/api/v3/config/indexer`,
];

export type GetApiV3ConfigIndexerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigIndexer>>
>;
export type GetApiV3ConfigIndexerQueryError = ErrorType<unknown>;

export const useGetApiV3ConfigIndexer = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ConfigIndexerQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigIndexer>>
  > = ({ signal }) => getApiV3ConfigIndexer(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ConfigIndexer>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3ConfigIndexerId = (
  id: string,
  indexerConfigResource: IndexerConfigResource,
) => {
  return apiInstance<IndexerConfigResource>({
    url: `/api/v3/config/indexer/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: indexerConfigResource,
  });
};

export type PutApiV3ConfigIndexerIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigIndexerId>>
>;
export type PutApiV3ConfigIndexerIdMutationBody = IndexerConfigResource;
export type PutApiV3ConfigIndexerIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigIndexerId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigIndexerId>>,
    TError,
    { id: string; data: IndexerConfigResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigIndexerId>>,
    { id: string; data: IndexerConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigIndexerId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3ConfigIndexerId>>,
    TError,
    { id: string; data: IndexerConfigResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3ConfigIndexerId = (id: number, signal?: AbortSignal) => {
  return apiInstance<IndexerConfigResource>({
    url: `/api/v3/config/indexer/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ConfigIndexerIdQueryKey = (id: number) => [
  `/api/v3/config/indexer/${id}`,
];

export type GetApiV3ConfigIndexerIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>
>;
export type GetApiV3ConfigIndexerIdQueryError = ErrorType<unknown>;

export const useGetApiV3ConfigIndexerId = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigIndexerIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>
  > = ({ signal }) => getApiV3ConfigIndexerId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ConfigIndexerId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getInitializeJs = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/initialize.js`, method: "get", signal });
};

export const getGetInitializeJsQueryKey = () => [`/initialize.js`];

export type GetInitializeJsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInitializeJs>>
>;
export type GetInitializeJsQueryError = ErrorType<unknown>;

export const useGetInitializeJs = <
  TData = Awaited<ReturnType<typeof getInitializeJs>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getInitializeJs>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInitializeJsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInitializeJs>>> = ({
    signal,
  }) => getInitializeJs(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getInitializeJs>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Language = (signal?: AbortSignal) => {
  return apiInstance<LanguageResource[]>({
    url: `/api/v3/language`,
    method: "get",
    signal,
  });
};

export const getGetApiV3LanguageQueryKey = () => [`/api/v3/language`];

export type GetApiV3LanguageQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Language>>
>;
export type GetApiV3LanguageQueryError = ErrorType<unknown>;

export const useGetApiV3Language = <
  TData = Awaited<ReturnType<typeof getApiV3Language>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Language>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3LanguageQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Language>>
  > = ({ signal }) => getApiV3Language(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Language>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3LanguageId = (id: number, signal?: AbortSignal) => {
  return apiInstance<LanguageResource>({
    url: `/api/v3/language/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3LanguageIdQueryKey = (id: number) => [
  `/api/v3/language/${id}`,
];

export type GetApiV3LanguageIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LanguageId>>
>;
export type GetApiV3LanguageIdQueryError = ErrorType<unknown>;

export const useGetApiV3LanguageId = <
  TData = Awaited<ReturnType<typeof getApiV3LanguageId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3LanguageId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3LanguageIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3LanguageId>>
  > = ({ signal }) => getApiV3LanguageId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3LanguageId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @deprecated
 */
export const postApiV3Languageprofile = (
  languageProfileResource: LanguageProfileResource,
) => {
  return apiInstance<LanguageProfileResource>({
    url: `/api/v3/languageprofile`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: languageProfileResource,
  });
};

export type PostApiV3LanguageprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Languageprofile>>
>;
export type PostApiV3LanguageprofileMutationBody = LanguageProfileResource;
export type PostApiV3LanguageprofileMutationError = ErrorType<unknown>;

export const usePostApiV3Languageprofile = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Languageprofile>>,
    TError,
    { data: LanguageProfileResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Languageprofile>>,
    { data: LanguageProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Languageprofile(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Languageprofile>>,
    TError,
    { data: LanguageProfileResource },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @deprecated
 */
export const getApiV3Languageprofile = (signal?: AbortSignal) => {
  return apiInstance<LanguageProfileResource[]>({
    url: `/api/v3/languageprofile`,
    method: "get",
    signal,
  });
};

export const getGetApiV3LanguageprofileQueryKey = () => [
  `/api/v3/languageprofile`,
];

export type GetApiV3LanguageprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Languageprofile>>
>;
export type GetApiV3LanguageprofileQueryError = ErrorType<unknown>;

export const useGetApiV3Languageprofile = <
  TData = Awaited<ReturnType<typeof getApiV3Languageprofile>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Languageprofile>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3LanguageprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Languageprofile>>
  > = ({ signal }) => getApiV3Languageprofile(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Languageprofile>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

/**
 * @deprecated
 */
export const deleteApiV3LanguageprofileId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/languageprofile/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3LanguageprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3LanguageprofileId>>
>;

export type DeleteApiV3LanguageprofileIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3LanguageprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3LanguageprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3LanguageprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3LanguageprofileId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3LanguageprofileId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @deprecated
 */
export const putApiV3LanguageprofileId = (
  id: string,
  languageProfileResource: LanguageProfileResource,
) => {
  return apiInstance<LanguageProfileResource>({
    url: `/api/v3/languageprofile/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: languageProfileResource,
  });
};

export type PutApiV3LanguageprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3LanguageprofileId>>
>;
export type PutApiV3LanguageprofileIdMutationBody = LanguageProfileResource;
export type PutApiV3LanguageprofileIdMutationError = ErrorType<unknown>;

export const usePutApiV3LanguageprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3LanguageprofileId>>,
    TError,
    { id: string; data: LanguageProfileResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3LanguageprofileId>>,
    { id: string; data: LanguageProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3LanguageprofileId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3LanguageprofileId>>,
    TError,
    { id: string; data: LanguageProfileResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3LanguageprofileId = (id: number, signal?: AbortSignal) => {
  return apiInstance<LanguageProfileResource>({
    url: `/api/v3/languageprofile/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3LanguageprofileIdQueryKey = (id: number) => [
  `/api/v3/languageprofile/${id}`,
];

export type GetApiV3LanguageprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LanguageprofileId>>
>;
export type GetApiV3LanguageprofileIdQueryError = ErrorType<unknown>;

export const useGetApiV3LanguageprofileId = <
  TData = Awaited<ReturnType<typeof getApiV3LanguageprofileId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3LanguageprofileId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3LanguageprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3LanguageprofileId>>
  > = ({ signal }) => getApiV3LanguageprofileId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3LanguageprofileId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @deprecated
 */
export const getApiV3LanguageprofileSchema = (signal?: AbortSignal) => {
  return apiInstance<LanguageProfileResource>({
    url: `/api/v3/languageprofile/schema`,
    method: "get",
    signal,
  });
};

export const getGetApiV3LanguageprofileSchemaQueryKey = () => [
  `/api/v3/languageprofile/schema`,
];

export type GetApiV3LanguageprofileSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LanguageprofileSchema>>
>;
export type GetApiV3LanguageprofileSchemaQueryError = ErrorType<unknown>;

export const useGetApiV3LanguageprofileSchema = <
  TData = Awaited<ReturnType<typeof getApiV3LanguageprofileSchema>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3LanguageprofileSchema>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3LanguageprofileSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3LanguageprofileSchema>>
  > = ({ signal }) => getApiV3LanguageprofileSchema(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3LanguageprofileSchema>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Localization = (signal?: AbortSignal) => {
  return apiInstance<LocalizationResource>({
    url: `/api/v3/localization`,
    method: "get",
    signal,
  });
};

export const getGetApiV3LocalizationQueryKey = () => [`/api/v3/localization`];

export type GetApiV3LocalizationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Localization>>
>;
export type GetApiV3LocalizationQueryError = ErrorType<unknown>;

export const useGetApiV3Localization = <
  TData = Awaited<ReturnType<typeof getApiV3Localization>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Localization>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3LocalizationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Localization>>
  > = ({ signal }) => getApiV3Localization(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Localization>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3LocalizationLanguage = (signal?: AbortSignal) => {
  return apiInstance<LocalizationLanguageResource>({
    url: `/api/v3/localization/language`,
    method: "get",
    signal,
  });
};

export const getGetApiV3LocalizationLanguageQueryKey = () => [
  `/api/v3/localization/language`,
];

export type GetApiV3LocalizationLanguageQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LocalizationLanguage>>
>;
export type GetApiV3LocalizationLanguageQueryError = ErrorType<unknown>;

export const useGetApiV3LocalizationLanguage = <
  TData = Awaited<ReturnType<typeof getApiV3LocalizationLanguage>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3LocalizationLanguage>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3LocalizationLanguageQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3LocalizationLanguage>>
  > = ({ signal }) => getApiV3LocalizationLanguage(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3LocalizationLanguage>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3LocalizationId = (id: number, signal?: AbortSignal) => {
  return apiInstance<LocalizationResource>({
    url: `/api/v3/localization/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3LocalizationIdQueryKey = (id: number) => [
  `/api/v3/localization/${id}`,
];

export type GetApiV3LocalizationIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LocalizationId>>
>;
export type GetApiV3LocalizationIdQueryError = ErrorType<unknown>;

export const useGetApiV3LocalizationId = <
  TData = Awaited<ReturnType<typeof getApiV3LocalizationId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3LocalizationId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3LocalizationIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3LocalizationId>>
  > = ({ signal }) => getApiV3LocalizationId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3LocalizationId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Log = (signal?: AbortSignal) => {
  return apiInstance<LogResourcePagingResource>({
    url: `/api/v3/log`,
    method: "get",
    signal,
  });
};

export const getGetApiV3LogQueryKey = () => [`/api/v3/log`];

export type GetApiV3LogQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Log>>
>;
export type GetApiV3LogQueryError = ErrorType<unknown>;

export const useGetApiV3Log = <
  TData = Awaited<ReturnType<typeof getApiV3Log>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Log>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3LogQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Log>>> = ({
    signal,
  }) => getApiV3Log(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Log>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3LogFile = (signal?: AbortSignal) => {
  return apiInstance<LogFileResource[]>({
    url: `/api/v3/log/file`,
    method: "get",
    signal,
  });
};

export const getGetApiV3LogFileQueryKey = () => [`/api/v3/log/file`];

export type GetApiV3LogFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LogFile>>
>;
export type GetApiV3LogFileQueryError = ErrorType<unknown>;

export const useGetApiV3LogFile = <
  TData = Awaited<ReturnType<typeof getApiV3LogFile>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3LogFile>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3LogFileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3LogFile>>> = ({
    signal,
  }) => getApiV3LogFile(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3LogFile>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3LogFileFilename = (
  filename: string,
  signal?: AbortSignal,
) => {
  return apiInstance<void>({
    url: `/api/v3/log/file/${filename}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3LogFileFilenameQueryKey = (filename: string) => [
  `/api/v3/log/file/${filename}`,
];

export type GetApiV3LogFileFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LogFileFilename>>
>;
export type GetApiV3LogFileFilenameQueryError = ErrorType<unknown>;

export const useGetApiV3LogFileFilename = <
  TData = Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
  TError = ErrorType<unknown>,
>(
  filename: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3LogFileFilenameQueryKey(filename);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3LogFileFilename>>
  > = ({ signal }) => getApiV3LogFileFilename(filename, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3LogFileFilename>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!filename,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Manualimport = (
  params?: GetApiV3ManualimportParams,
  signal?: AbortSignal,
) => {
  return apiInstance<ManualImportResource[]>({
    url: `/api/v3/manualimport`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3ManualimportQueryKey = (
  params?: GetApiV3ManualimportParams,
) => [`/api/v3/manualimport`, ...(params ? [params] : [])];

export type GetApiV3ManualimportQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Manualimport>>
>;
export type GetApiV3ManualimportQueryError = ErrorType<unknown>;

export const useGetApiV3Manualimport = <
  TData = Awaited<ReturnType<typeof getApiV3Manualimport>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3ManualimportParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Manualimport>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ManualimportQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Manualimport>>
  > = ({ signal }) => getApiV3Manualimport(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Manualimport>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Manualimport = (
  manualImportReprocessResource: ManualImportReprocessResource[],
) => {
  return apiInstance<void>({
    url: `/api/v3/manualimport`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: manualImportReprocessResource,
  });
};

export type PostApiV3ManualimportMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Manualimport>>
>;
export type PostApiV3ManualimportMutationBody = ManualImportReprocessResource[];
export type PostApiV3ManualimportMutationError = ErrorType<unknown>;

export const usePostApiV3Manualimport = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Manualimport>>,
    TError,
    { data: ManualImportReprocessResource[] },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Manualimport>>,
    { data: ManualImportReprocessResource[] }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Manualimport(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Manualimport>>,
    TError,
    { data: ManualImportReprocessResource[] },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3MediacoverSeriesIdFilename = (
  seriesId: number,
  filename: string,
  signal?: AbortSignal,
) => {
  return apiInstance<void>({
    url: `/api/v3/mediacover/${seriesId}/${filename}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3MediacoverSeriesIdFilenameQueryKey = (
  seriesId: number,
  filename: string,
) => [`/api/v3/mediacover/${seriesId}/${filename}`];

export type GetApiV3MediacoverSeriesIdFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3MediacoverSeriesIdFilename>>
>;
export type GetApiV3MediacoverSeriesIdFilenameQueryError = ErrorType<unknown>;

export const useGetApiV3MediacoverSeriesIdFilename = <
  TData = Awaited<ReturnType<typeof getApiV3MediacoverSeriesIdFilename>>,
  TError = ErrorType<unknown>,
>(
  seriesId: number,
  filename: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3MediacoverSeriesIdFilename>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV3MediacoverSeriesIdFilenameQueryKey(seriesId, filename);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3MediacoverSeriesIdFilename>>
  > = ({ signal }) =>
    getApiV3MediacoverSeriesIdFilename(seriesId, filename, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3MediacoverSeriesIdFilename>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(seriesId && filename),
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3ConfigMediamanagement = (signal?: AbortSignal) => {
  return apiInstance<MediaManagementConfigResource>({
    url: `/api/v3/config/mediamanagement`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ConfigMediamanagementQueryKey = () => [
  `/api/v3/config/mediamanagement`,
];

export type GetApiV3ConfigMediamanagementQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>
>;
export type GetApiV3ConfigMediamanagementQueryError = ErrorType<unknown>;

export const useGetApiV3ConfigMediamanagement = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigMediamanagementQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>
  > = ({ signal }) => getApiV3ConfigMediamanagement(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ConfigMediamanagement>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3ConfigMediamanagementId = (
  id: string,
  mediaManagementConfigResource: MediaManagementConfigResource,
) => {
  return apiInstance<MediaManagementConfigResource>({
    url: `/api/v3/config/mediamanagement/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: mediaManagementConfigResource,
  });
};

export type PutApiV3ConfigMediamanagementIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigMediamanagementId>>
>;
export type PutApiV3ConfigMediamanagementIdMutationBody =
  MediaManagementConfigResource;
export type PutApiV3ConfigMediamanagementIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigMediamanagementId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigMediamanagementId>>,
    TError,
    { id: string; data: MediaManagementConfigResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigMediamanagementId>>,
    { id: string; data: MediaManagementConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigMediamanagementId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3ConfigMediamanagementId>>,
    TError,
    { id: string; data: MediaManagementConfigResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3ConfigMediamanagementId = (
  id: number,
  signal?: AbortSignal,
) => {
  return apiInstance<MediaManagementConfigResource>({
    url: `/api/v3/config/mediamanagement/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ConfigMediamanagementIdQueryKey = (id: number) => [
  `/api/v3/config/mediamanagement/${id}`,
];

export type GetApiV3ConfigMediamanagementIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>
>;
export type GetApiV3ConfigMediamanagementIdQueryError = ErrorType<unknown>;

export const useGetApiV3ConfigMediamanagementId = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigMediamanagementIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>
  > = ({ signal }) => getApiV3ConfigMediamanagementId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ConfigMediamanagementId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Metadata = (signal?: AbortSignal) => {
  return apiInstance<MetadataResource[]>({
    url: `/api/v3/metadata`,
    method: "get",
    signal,
  });
};

export const getGetApiV3MetadataQueryKey = () => [`/api/v3/metadata`];

export type GetApiV3MetadataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Metadata>>
>;
export type GetApiV3MetadataQueryError = ErrorType<unknown>;

export const useGetApiV3Metadata = <
  TData = Awaited<ReturnType<typeof getApiV3Metadata>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Metadata>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3MetadataQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Metadata>>
  > = ({ signal }) => getApiV3Metadata(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Metadata>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Metadata = (
  metadataResource: MetadataResource,
  params?: PostApiV3MetadataParams,
) => {
  return apiInstance<MetadataResource>({
    url: `/api/v3/metadata`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: metadataResource,
    params,
  });
};

export type PostApiV3MetadataMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Metadata>>
>;
export type PostApiV3MetadataMutationBody = MetadataResource;
export type PostApiV3MetadataMutationError = ErrorType<unknown>;

export const usePostApiV3Metadata = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Metadata>>,
    TError,
    { data: MetadataResource; params?: PostApiV3MetadataParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Metadata>>,
    { data: MetadataResource; params?: PostApiV3MetadataParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV3Metadata(data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Metadata>>,
    TError,
    { data: MetadataResource; params?: PostApiV3MetadataParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3MetadataId = (
  id: string,
  metadataResource: MetadataResource,
  params?: PutApiV3MetadataIdParams,
) => {
  return apiInstance<MetadataResource>({
    url: `/api/v3/metadata/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: metadataResource,
    params,
  });
};

export type PutApiV3MetadataIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3MetadataId>>
>;
export type PutApiV3MetadataIdMutationBody = MetadataResource;
export type PutApiV3MetadataIdMutationError = ErrorType<unknown>;

export const usePutApiV3MetadataId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3MetadataId>>,
    TError,
    { id: string; data: MetadataResource; params?: PutApiV3MetadataIdParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3MetadataId>>,
    { id: string; data: MetadataResource; params?: PutApiV3MetadataIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV3MetadataId(id, data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3MetadataId>>,
    TError,
    { id: string; data: MetadataResource; params?: PutApiV3MetadataIdParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3MetadataId = (id: number) => {
  return apiInstance<void>({ url: `/api/v3/metadata/${id}`, method: "delete" });
};

export type DeleteApiV3MetadataIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3MetadataId>>
>;

export type DeleteApiV3MetadataIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3MetadataId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3MetadataId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3MetadataId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3MetadataId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3MetadataId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3MetadataId = (id: number, signal?: AbortSignal) => {
  return apiInstance<MetadataResource>({
    url: `/api/v3/metadata/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3MetadataIdQueryKey = (id: number) => [
  `/api/v3/metadata/${id}`,
];

export type GetApiV3MetadataIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3MetadataId>>
>;
export type GetApiV3MetadataIdQueryError = ErrorType<unknown>;

export const useGetApiV3MetadataId = <
  TData = Awaited<ReturnType<typeof getApiV3MetadataId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3MetadataId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3MetadataIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3MetadataId>>
  > = ({ signal }) => getApiV3MetadataId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3MetadataId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3MetadataBulk = (
  metadataBulkResource: MetadataBulkResource,
) => {
  return apiInstance<MetadataResource>({
    url: `/api/v3/metadata/bulk`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: metadataBulkResource,
  });
};

export type PutApiV3MetadataBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3MetadataBulk>>
>;
export type PutApiV3MetadataBulkMutationBody = MetadataBulkResource;
export type PutApiV3MetadataBulkMutationError = ErrorType<unknown>;

export const usePutApiV3MetadataBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3MetadataBulk>>,
    TError,
    { data: MetadataBulkResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3MetadataBulk>>,
    { data: MetadataBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3MetadataBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3MetadataBulk>>,
    TError,
    { data: MetadataBulkResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3MetadataBulk = (
  metadataBulkResource: MetadataBulkResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/metadata/bulk`,
    method: "delete",
    headers: { "Content-Type": "application/json" },
    data: metadataBulkResource,
  });
};

export type DeleteApiV3MetadataBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3MetadataBulk>>
>;
export type DeleteApiV3MetadataBulkMutationBody = MetadataBulkResource;
export type DeleteApiV3MetadataBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3MetadataBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3MetadataBulk>>,
    TError,
    { data: MetadataBulkResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3MetadataBulk>>,
    { data: MetadataBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3MetadataBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3MetadataBulk>>,
    TError,
    { data: MetadataBulkResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3MetadataSchema = (signal?: AbortSignal) => {
  return apiInstance<MetadataResource[]>({
    url: `/api/v3/metadata/schema`,
    method: "get",
    signal,
  });
};

export const getGetApiV3MetadataSchemaQueryKey = () => [
  `/api/v3/metadata/schema`,
];

export type GetApiV3MetadataSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3MetadataSchema>>
>;
export type GetApiV3MetadataSchemaQueryError = ErrorType<unknown>;

export const useGetApiV3MetadataSchema = <
  TData = Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3MetadataSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3MetadataSchema>>
  > = ({ signal }) => getApiV3MetadataSchema(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3MetadataSchema>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3MetadataTest = (metadataResource: MetadataResource) => {
  return apiInstance<void>({
    url: `/api/v3/metadata/test`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: metadataResource,
  });
};

export type PostApiV3MetadataTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3MetadataTest>>
>;
export type PostApiV3MetadataTestMutationBody = MetadataResource;
export type PostApiV3MetadataTestMutationError = ErrorType<unknown>;

export const usePostApiV3MetadataTest = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3MetadataTest>>,
    TError,
    { data: MetadataResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3MetadataTest>>,
    { data: MetadataResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3MetadataTest(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3MetadataTest>>,
    TError,
    { data: MetadataResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3MetadataTestall = () => {
  return apiInstance<void>({ url: `/api/v3/metadata/testall`, method: "post" });
};

export type PostApiV3MetadataTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3MetadataTestall>>
>;

export type PostApiV3MetadataTestallMutationError = ErrorType<unknown>;

export const usePostApiV3MetadataTestall = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3MetadataTestall>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3MetadataTestall>>,
    TVariables
  > = () => {
    return postApiV3MetadataTestall();
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3MetadataTestall>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3MetadataActionName = (
  name: string,
  metadataResource: MetadataResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/metadata/action/${name}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: metadataResource,
  });
};

export type PostApiV3MetadataActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3MetadataActionName>>
>;
export type PostApiV3MetadataActionNameMutationBody = MetadataResource;
export type PostApiV3MetadataActionNameMutationError = ErrorType<unknown>;

export const usePostApiV3MetadataActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3MetadataActionName>>,
    TError,
    { name: string; data: MetadataResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3MetadataActionName>>,
    { name: string; data: MetadataResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV3MetadataActionName(name, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3MetadataActionName>>,
    TError,
    { name: string; data: MetadataResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3WantedMissing = (
  params?: GetApiV3WantedMissingParams,
  signal?: AbortSignal,
) => {
  return apiInstance<EpisodeResourcePagingResource>({
    url: `/api/v3/wanted/missing`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3WantedMissingQueryKey = (
  params?: GetApiV3WantedMissingParams,
) => [`/api/v3/wanted/missing`, ...(params ? [params] : [])];

export type GetApiV3WantedMissingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3WantedMissing>>
>;
export type GetApiV3WantedMissingQueryError = ErrorType<unknown>;

export const useGetApiV3WantedMissing = <
  TData = Awaited<ReturnType<typeof getApiV3WantedMissing>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3WantedMissingParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3WantedMissing>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3WantedMissingQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3WantedMissing>>
  > = ({ signal }) => getApiV3WantedMissing(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3WantedMissing>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3WantedMissingId = (id: number, signal?: AbortSignal) => {
  return apiInstance<EpisodeResource>({
    url: `/api/v3/wanted/missing/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3WantedMissingIdQueryKey = (id: number) => [
  `/api/v3/wanted/missing/${id}`,
];

export type GetApiV3WantedMissingIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3WantedMissingId>>
>;
export type GetApiV3WantedMissingIdQueryError = ErrorType<unknown>;

export const useGetApiV3WantedMissingId = <
  TData = Awaited<ReturnType<typeof getApiV3WantedMissingId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3WantedMissingId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3WantedMissingIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3WantedMissingId>>
  > = ({ signal }) => getApiV3WantedMissingId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3WantedMissingId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3ConfigNaming = (signal?: AbortSignal) => {
  return apiInstance<NamingConfigResource>({
    url: `/api/v3/config/naming`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ConfigNamingQueryKey = () => [`/api/v3/config/naming`];

export type GetApiV3ConfigNamingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigNaming>>
>;
export type GetApiV3ConfigNamingQueryError = ErrorType<unknown>;

export const useGetApiV3ConfigNaming = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ConfigNamingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigNaming>>
  > = ({ signal }) => getApiV3ConfigNaming(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ConfigNaming>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3ConfigNamingId = (
  id: string,
  namingConfigResource: NamingConfigResource,
) => {
  return apiInstance<NamingConfigResource>({
    url: `/api/v3/config/naming/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: namingConfigResource,
  });
};

export type PutApiV3ConfigNamingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigNamingId>>
>;
export type PutApiV3ConfigNamingIdMutationBody = NamingConfigResource;
export type PutApiV3ConfigNamingIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigNamingId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigNamingId>>,
    TError,
    { id: string; data: NamingConfigResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigNamingId>>,
    { id: string; data: NamingConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigNamingId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3ConfigNamingId>>,
    TError,
    { id: string; data: NamingConfigResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3ConfigNamingId = (id: number, signal?: AbortSignal) => {
  return apiInstance<NamingConfigResource>({
    url: `/api/v3/config/naming/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ConfigNamingIdQueryKey = (id: number) => [
  `/api/v3/config/naming/${id}`,
];

export type GetApiV3ConfigNamingIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigNamingId>>
>;
export type GetApiV3ConfigNamingIdQueryError = ErrorType<unknown>;

export const useGetApiV3ConfigNamingId = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigNamingIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigNamingId>>
  > = ({ signal }) => getApiV3ConfigNamingId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ConfigNamingId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3ConfigNamingExamples = (
  params?: GetApiV3ConfigNamingExamplesParams,
  signal?: AbortSignal,
) => {
  return apiInstance<void>({
    url: `/api/v3/config/naming/examples`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3ConfigNamingExamplesQueryKey = (
  params?: GetApiV3ConfigNamingExamplesParams,
) => [`/api/v3/config/naming/examples`, ...(params ? [params] : [])];

export type GetApiV3ConfigNamingExamplesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>
>;
export type GetApiV3ConfigNamingExamplesQueryError = ErrorType<unknown>;

export const useGetApiV3ConfigNamingExamples = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3ConfigNamingExamplesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ConfigNamingExamplesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>
  > = ({ signal }) => getApiV3ConfigNamingExamples(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ConfigNamingExamples>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Notification = (signal?: AbortSignal) => {
  return apiInstance<NotificationResource[]>({
    url: `/api/v3/notification`,
    method: "get",
    signal,
  });
};

export const getGetApiV3NotificationQueryKey = () => [`/api/v3/notification`];

export type GetApiV3NotificationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Notification>>
>;
export type GetApiV3NotificationQueryError = ErrorType<unknown>;

export const useGetApiV3Notification = <
  TData = Awaited<ReturnType<typeof getApiV3Notification>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Notification>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3NotificationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Notification>>
  > = ({ signal }) => getApiV3Notification(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Notification>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Notification = (
  notificationResource: NotificationResource,
  params?: PostApiV3NotificationParams,
) => {
  return apiInstance<NotificationResource>({
    url: `/api/v3/notification`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: notificationResource,
    params,
  });
};

export type PostApiV3NotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Notification>>
>;
export type PostApiV3NotificationMutationBody = NotificationResource;
export type PostApiV3NotificationMutationError = ErrorType<unknown>;

export const usePostApiV3Notification = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Notification>>,
    TError,
    { data: NotificationResource; params?: PostApiV3NotificationParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Notification>>,
    { data: NotificationResource; params?: PostApiV3NotificationParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV3Notification(data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Notification>>,
    TError,
    { data: NotificationResource; params?: PostApiV3NotificationParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3NotificationId = (
  id: string,
  notificationResource: NotificationResource,
  params?: PutApiV3NotificationIdParams,
) => {
  return apiInstance<NotificationResource>({
    url: `/api/v3/notification/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: notificationResource,
    params,
  });
};

export type PutApiV3NotificationIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3NotificationId>>
>;
export type PutApiV3NotificationIdMutationBody = NotificationResource;
export type PutApiV3NotificationIdMutationError = ErrorType<unknown>;

export const usePutApiV3NotificationId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3NotificationId>>,
    TError,
    {
      id: string;
      data: NotificationResource;
      params?: PutApiV3NotificationIdParams;
    },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3NotificationId>>,
    {
      id: string;
      data: NotificationResource;
      params?: PutApiV3NotificationIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV3NotificationId(id, data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3NotificationId>>,
    TError,
    {
      id: string;
      data: NotificationResource;
      params?: PutApiV3NotificationIdParams;
    },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3NotificationId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/notification/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3NotificationIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3NotificationId>>
>;

export type DeleteApiV3NotificationIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3NotificationId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3NotificationId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3NotificationId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3NotificationId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3NotificationId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3NotificationId = (id: number, signal?: AbortSignal) => {
  return apiInstance<NotificationResource>({
    url: `/api/v3/notification/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3NotificationIdQueryKey = (id: number) => [
  `/api/v3/notification/${id}`,
];

export type GetApiV3NotificationIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3NotificationId>>
>;
export type GetApiV3NotificationIdQueryError = ErrorType<unknown>;

export const useGetApiV3NotificationId = <
  TData = Awaited<ReturnType<typeof getApiV3NotificationId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3NotificationId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3NotificationIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3NotificationId>>
  > = ({ signal }) => getApiV3NotificationId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3NotificationId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3NotificationBulk = (
  notificationBulkResource: NotificationBulkResource,
) => {
  return apiInstance<NotificationResource>({
    url: `/api/v3/notification/bulk`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: notificationBulkResource,
  });
};

export type PutApiV3NotificationBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3NotificationBulk>>
>;
export type PutApiV3NotificationBulkMutationBody = NotificationBulkResource;
export type PutApiV3NotificationBulkMutationError = ErrorType<unknown>;

export const usePutApiV3NotificationBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3NotificationBulk>>,
    TError,
    { data: NotificationBulkResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3NotificationBulk>>,
    { data: NotificationBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3NotificationBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3NotificationBulk>>,
    TError,
    { data: NotificationBulkResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3NotificationBulk = (
  notificationBulkResource: NotificationBulkResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/notification/bulk`,
    method: "delete",
    headers: { "Content-Type": "application/json" },
    data: notificationBulkResource,
  });
};

export type DeleteApiV3NotificationBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3NotificationBulk>>
>;
export type DeleteApiV3NotificationBulkMutationBody = NotificationBulkResource;
export type DeleteApiV3NotificationBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3NotificationBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3NotificationBulk>>,
    TError,
    { data: NotificationBulkResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3NotificationBulk>>,
    { data: NotificationBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3NotificationBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3NotificationBulk>>,
    TError,
    { data: NotificationBulkResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3NotificationSchema = (signal?: AbortSignal) => {
  return apiInstance<NotificationResource[]>({
    url: `/api/v3/notification/schema`,
    method: "get",
    signal,
  });
};

export const getGetApiV3NotificationSchemaQueryKey = () => [
  `/api/v3/notification/schema`,
];

export type GetApiV3NotificationSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3NotificationSchema>>
>;
export type GetApiV3NotificationSchemaQueryError = ErrorType<unknown>;

export const useGetApiV3NotificationSchema = <
  TData = Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3NotificationSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3NotificationSchema>>
  > = ({ signal }) => getApiV3NotificationSchema(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3NotificationSchema>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3NotificationTest = (
  notificationResource: NotificationResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/notification/test`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: notificationResource,
  });
};

export type PostApiV3NotificationTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3NotificationTest>>
>;
export type PostApiV3NotificationTestMutationBody = NotificationResource;
export type PostApiV3NotificationTestMutationError = ErrorType<unknown>;

export const usePostApiV3NotificationTest = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3NotificationTest>>,
    TError,
    { data: NotificationResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3NotificationTest>>,
    { data: NotificationResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3NotificationTest(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3NotificationTest>>,
    TError,
    { data: NotificationResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3NotificationTestall = () => {
  return apiInstance<void>({
    url: `/api/v3/notification/testall`,
    method: "post",
  });
};

export type PostApiV3NotificationTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3NotificationTestall>>
>;

export type PostApiV3NotificationTestallMutationError = ErrorType<unknown>;

export const usePostApiV3NotificationTestall = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3NotificationTestall>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3NotificationTestall>>,
    TVariables
  > = () => {
    return postApiV3NotificationTestall();
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3NotificationTestall>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3NotificationActionName = (
  name: string,
  notificationResource: NotificationResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/notification/action/${name}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: notificationResource,
  });
};

export type PostApiV3NotificationActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3NotificationActionName>>
>;
export type PostApiV3NotificationActionNameMutationBody = NotificationResource;
export type PostApiV3NotificationActionNameMutationError = ErrorType<unknown>;

export const usePostApiV3NotificationActionName = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3NotificationActionName>>,
    TError,
    { name: string; data: NotificationResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3NotificationActionName>>,
    { name: string; data: NotificationResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV3NotificationActionName(name, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3NotificationActionName>>,
    TError,
    { name: string; data: NotificationResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Parse = (
  params?: GetApiV3ParseParams,
  signal?: AbortSignal,
) => {
  return apiInstance<ParseResource>({
    url: `/api/v3/parse`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3ParseQueryKey = (params?: GetApiV3ParseParams) => [
  `/api/v3/parse`,
  ...(params ? [params] : []),
];

export type GetApiV3ParseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Parse>>
>;
export type GetApiV3ParseQueryError = ErrorType<unknown>;

export const useGetApiV3Parse = <
  TData = Awaited<ReturnType<typeof getApiV3Parse>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3ParseParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Parse>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ParseQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Parse>>> = ({
    signal,
  }) => getApiV3Parse(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Parse>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getPing = (signal?: AbortSignal) => {
  return apiInstance<PingResource>({ url: `/ping`, method: "get", signal });
};

export const getGetPingQueryKey = () => [`/ping`];

export type GetPingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPing>>
>;
export type GetPingQueryError = ErrorType<unknown>;

export const useGetPing = <
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPingQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPing>>> = ({
    signal,
  }) => getPing(signal);

  const query = useQuery<Awaited<ReturnType<typeof getPing>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3QualitydefinitionId = (
  id: string,
  qualityDefinitionResource: QualityDefinitionResource,
) => {
  return apiInstance<QualityDefinitionResource>({
    url: `/api/v3/qualitydefinition/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: qualityDefinitionResource,
  });
};

export type PutApiV3QualitydefinitionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3QualitydefinitionId>>
>;
export type PutApiV3QualitydefinitionIdMutationBody = QualityDefinitionResource;
export type PutApiV3QualitydefinitionIdMutationError = ErrorType<unknown>;

export const usePutApiV3QualitydefinitionId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3QualitydefinitionId>>,
    TError,
    { id: string; data: QualityDefinitionResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3QualitydefinitionId>>,
    { id: string; data: QualityDefinitionResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3QualitydefinitionId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3QualitydefinitionId>>,
    TError,
    { id: string; data: QualityDefinitionResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3QualitydefinitionId = (
  id: number,
  signal?: AbortSignal,
) => {
  return apiInstance<QualityDefinitionResource>({
    url: `/api/v3/qualitydefinition/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3QualitydefinitionIdQueryKey = (id: number) => [
  `/api/v3/qualitydefinition/${id}`,
];

export type GetApiV3QualitydefinitionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>
>;
export type GetApiV3QualitydefinitionIdQueryError = ErrorType<unknown>;

export const useGetApiV3QualitydefinitionId = <
  TData = Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QualitydefinitionIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>
  > = ({ signal }) => getApiV3QualitydefinitionId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3QualitydefinitionId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Qualitydefinition = (signal?: AbortSignal) => {
  return apiInstance<QualityDefinitionResource[]>({
    url: `/api/v3/qualitydefinition`,
    method: "get",
    signal,
  });
};

export const getGetApiV3QualitydefinitionQueryKey = () => [
  `/api/v3/qualitydefinition`,
];

export type GetApiV3QualitydefinitionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Qualitydefinition>>
>;
export type GetApiV3QualitydefinitionQueryError = ErrorType<unknown>;

export const useGetApiV3Qualitydefinition = <
  TData = Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QualitydefinitionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Qualitydefinition>>
  > = ({ signal }) => getApiV3Qualitydefinition(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Qualitydefinition>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3QualitydefinitionUpdate = (
  qualityDefinitionResource: QualityDefinitionResource[],
) => {
  return apiInstance<void>({
    url: `/api/v3/qualitydefinition/update`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: qualityDefinitionResource,
  });
};

export type PutApiV3QualitydefinitionUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3QualitydefinitionUpdate>>
>;
export type PutApiV3QualitydefinitionUpdateMutationBody =
  QualityDefinitionResource[];
export type PutApiV3QualitydefinitionUpdateMutationError = ErrorType<unknown>;

export const usePutApiV3QualitydefinitionUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3QualitydefinitionUpdate>>,
    TError,
    { data: QualityDefinitionResource[] },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3QualitydefinitionUpdate>>,
    { data: QualityDefinitionResource[] }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3QualitydefinitionUpdate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3QualitydefinitionUpdate>>,
    TError,
    { data: QualityDefinitionResource[] },
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3Qualityprofile = (
  qualityProfileResource: QualityProfileResource,
) => {
  return apiInstance<QualityProfileResource>({
    url: `/api/v3/qualityprofile`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: qualityProfileResource,
  });
};

export type PostApiV3QualityprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Qualityprofile>>
>;
export type PostApiV3QualityprofileMutationBody = QualityProfileResource;
export type PostApiV3QualityprofileMutationError = ErrorType<unknown>;

export const usePostApiV3Qualityprofile = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Qualityprofile>>,
    TError,
    { data: QualityProfileResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Qualityprofile>>,
    { data: QualityProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Qualityprofile(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Qualityprofile>>,
    TError,
    { data: QualityProfileResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Qualityprofile = (signal?: AbortSignal) => {
  return apiInstance<QualityProfileResource[]>({
    url: `/api/v3/qualityprofile`,
    method: "get",
    signal,
  });
};

export const getGetApiV3QualityprofileQueryKey = () => [
  `/api/v3/qualityprofile`,
];

export type GetApiV3QualityprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Qualityprofile>>
>;
export type GetApiV3QualityprofileQueryError = ErrorType<unknown>;

export const useGetApiV3Qualityprofile = <
  TData = Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QualityprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Qualityprofile>>
  > = ({ signal }) => getApiV3Qualityprofile(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Qualityprofile>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const deleteApiV3QualityprofileId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/qualityprofile/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3QualityprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3QualityprofileId>>
>;

export type DeleteApiV3QualityprofileIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3QualityprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3QualityprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3QualityprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3QualityprofileId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3QualityprofileId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3QualityprofileId = (
  id: string,
  qualityProfileResource: QualityProfileResource,
) => {
  return apiInstance<QualityProfileResource>({
    url: `/api/v3/qualityprofile/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: qualityProfileResource,
  });
};

export type PutApiV3QualityprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3QualityprofileId>>
>;
export type PutApiV3QualityprofileIdMutationBody = QualityProfileResource;
export type PutApiV3QualityprofileIdMutationError = ErrorType<unknown>;

export const usePutApiV3QualityprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3QualityprofileId>>,
    TError,
    { id: string; data: QualityProfileResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3QualityprofileId>>,
    { id: string; data: QualityProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3QualityprofileId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3QualityprofileId>>,
    TError,
    { id: string; data: QualityProfileResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3QualityprofileId = (id: number, signal?: AbortSignal) => {
  return apiInstance<QualityProfileResource>({
    url: `/api/v3/qualityprofile/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3QualityprofileIdQueryKey = (id: number) => [
  `/api/v3/qualityprofile/${id}`,
];

export type GetApiV3QualityprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3QualityprofileId>>
>;
export type GetApiV3QualityprofileIdQueryError = ErrorType<unknown>;

export const useGetApiV3QualityprofileId = <
  TData = Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QualityprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3QualityprofileId>>
  > = ({ signal }) => getApiV3QualityprofileId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3QualityprofileId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3QualityprofileSchema = (signal?: AbortSignal) => {
  return apiInstance<QualityProfileResource>({
    url: `/api/v3/qualityprofile/schema`,
    method: "get",
    signal,
  });
};

export const getGetApiV3QualityprofileSchemaQueryKey = () => [
  `/api/v3/qualityprofile/schema`,
];

export type GetApiV3QualityprofileSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>
>;
export type GetApiV3QualityprofileSchemaQueryError = ErrorType<unknown>;

export const useGetApiV3QualityprofileSchema = <
  TData = Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QualityprofileSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>
  > = ({ signal }) => getApiV3QualityprofileSchema(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3QualityprofileSchema>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const deleteApiV3QueueId = (
  id: number,
  params?: DeleteApiV3QueueIdParams,
) => {
  return apiInstance<void>({
    url: `/api/v3/queue/${id}`,
    method: "delete",
    params,
  });
};

export type DeleteApiV3QueueIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3QueueId>>
>;

export type DeleteApiV3QueueIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3QueueId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3QueueId>>,
    TError,
    { id: number; params?: DeleteApiV3QueueIdParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3QueueId>>,
    { id: number; params?: DeleteApiV3QueueIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteApiV3QueueId(id, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3QueueId>>,
    TError,
    { id: number; params?: DeleteApiV3QueueIdParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3QueueBulk = (
  queueBulkResource: QueueBulkResource,
  params?: DeleteApiV3QueueBulkParams,
) => {
  return apiInstance<void>({
    url: `/api/v3/queue/bulk`,
    method: "delete",
    headers: { "Content-Type": "application/json" },
    data: queueBulkResource,
    params,
  });
};

export type DeleteApiV3QueueBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3QueueBulk>>
>;
export type DeleteApiV3QueueBulkMutationBody = QueueBulkResource;
export type DeleteApiV3QueueBulkMutationError = ErrorType<unknown>;

export const useDeleteApiV3QueueBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3QueueBulk>>,
    TError,
    { data: QueueBulkResource; params?: DeleteApiV3QueueBulkParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3QueueBulk>>,
    { data: QueueBulkResource; params?: DeleteApiV3QueueBulkParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return deleteApiV3QueueBulk(data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3QueueBulk>>,
    TError,
    { data: QueueBulkResource; params?: DeleteApiV3QueueBulkParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Queue = (
  params?: GetApiV3QueueParams,
  signal?: AbortSignal,
) => {
  return apiInstance<QueueResourcePagingResource>({
    url: `/api/v3/queue`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3QueueQueryKey = (params?: GetApiV3QueueParams) => [
  `/api/v3/queue`,
  ...(params ? [params] : []),
];

export type GetApiV3QueueQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Queue>>
>;
export type GetApiV3QueueQueryError = ErrorType<unknown>;

export const useGetApiV3Queue = <
  TData = Awaited<ReturnType<typeof getApiV3Queue>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3QueueParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Queue>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3QueueQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Queue>>> = ({
    signal,
  }) => getApiV3Queue(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Queue>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3QueueGrabId = (id: number) => {
  return apiInstance<void>({ url: `/api/v3/queue/grab/${id}`, method: "post" });
};

export type PostApiV3QueueGrabIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3QueueGrabId>>
>;

export type PostApiV3QueueGrabIdMutationError = ErrorType<unknown>;

export const usePostApiV3QueueGrabId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3QueueGrabId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3QueueGrabId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postApiV3QueueGrabId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3QueueGrabId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3QueueGrabBulk = (
  queueBulkResource: QueueBulkResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/queue/grab/bulk`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: queueBulkResource,
  });
};

export type PostApiV3QueueGrabBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3QueueGrabBulk>>
>;
export type PostApiV3QueueGrabBulkMutationBody = QueueBulkResource;
export type PostApiV3QueueGrabBulkMutationError = ErrorType<unknown>;

export const usePostApiV3QueueGrabBulk = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3QueueGrabBulk>>,
    TError,
    { data: QueueBulkResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3QueueGrabBulk>>,
    { data: QueueBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3QueueGrabBulk(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3QueueGrabBulk>>,
    TError,
    { data: QueueBulkResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3QueueDetails = (
  params?: GetApiV3QueueDetailsParams,
  signal?: AbortSignal,
) => {
  return apiInstance<QueueResource[]>({
    url: `/api/v3/queue/details`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3QueueDetailsQueryKey = (
  params?: GetApiV3QueueDetailsParams,
) => [`/api/v3/queue/details`, ...(params ? [params] : [])];

export type GetApiV3QueueDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3QueueDetails>>
>;
export type GetApiV3QueueDetailsQueryError = ErrorType<unknown>;

export const useGetApiV3QueueDetails = <
  TData = Awaited<ReturnType<typeof getApiV3QueueDetails>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3QueueDetailsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3QueueDetails>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3QueueDetailsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3QueueDetails>>
  > = ({ signal }) => getApiV3QueueDetails(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3QueueDetails>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3QueueStatus = (signal?: AbortSignal) => {
  return apiInstance<QueueStatusResource>({
    url: `/api/v3/queue/status`,
    method: "get",
    signal,
  });
};

export const getGetApiV3QueueStatusQueryKey = () => [`/api/v3/queue/status`];

export type GetApiV3QueueStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3QueueStatus>>
>;
export type GetApiV3QueueStatusQueryError = ErrorType<unknown>;

export const useGetApiV3QueueStatus = <
  TData = Awaited<ReturnType<typeof getApiV3QueueStatus>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3QueueStatus>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3QueueStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3QueueStatus>>
  > = ({ signal }) => getApiV3QueueStatus(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3QueueStatus>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Release = (releaseResource: ReleaseResource) => {
  return apiInstance<void>({
    url: `/api/v3/release`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: releaseResource,
  });
};

export type PostApiV3ReleaseMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Release>>
>;
export type PostApiV3ReleaseMutationBody = ReleaseResource;
export type PostApiV3ReleaseMutationError = ErrorType<unknown>;

export const usePostApiV3Release = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Release>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Release>>,
    { data: ReleaseResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Release(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Release>>,
    TError,
    { data: ReleaseResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Release = (
  params?: GetApiV3ReleaseParams,
  signal?: AbortSignal,
) => {
  return apiInstance<ReleaseResource[]>({
    url: `/api/v3/release`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3ReleaseQueryKey = (params?: GetApiV3ReleaseParams) => [
  `/api/v3/release`,
  ...(params ? [params] : []),
];

export type GetApiV3ReleaseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Release>>
>;
export type GetApiV3ReleaseQueryError = ErrorType<unknown>;

export const useGetApiV3Release = <
  TData = Awaited<ReturnType<typeof getApiV3Release>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3ReleaseParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Release>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ReleaseQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Release>>> = ({
    signal,
  }) => getApiV3Release(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Release>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Releaseprofile = (
  releaseProfileResource: ReleaseProfileResource,
) => {
  return apiInstance<ReleaseProfileResource>({
    url: `/api/v3/releaseprofile`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: releaseProfileResource,
  });
};

export type PostApiV3ReleaseprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Releaseprofile>>
>;
export type PostApiV3ReleaseprofileMutationBody = ReleaseProfileResource;
export type PostApiV3ReleaseprofileMutationError = ErrorType<unknown>;

export const usePostApiV3Releaseprofile = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Releaseprofile>>,
    TError,
    { data: ReleaseProfileResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Releaseprofile>>,
    { data: ReleaseProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Releaseprofile(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Releaseprofile>>,
    TError,
    { data: ReleaseProfileResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Releaseprofile = (signal?: AbortSignal) => {
  return apiInstance<ReleaseProfileResource[]>({
    url: `/api/v3/releaseprofile`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ReleaseprofileQueryKey = () => [
  `/api/v3/releaseprofile`,
];

export type GetApiV3ReleaseprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Releaseprofile>>
>;
export type GetApiV3ReleaseprofileQueryError = ErrorType<unknown>;

export const useGetApiV3Releaseprofile = <
  TData = Awaited<ReturnType<typeof getApiV3Releaseprofile>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Releaseprofile>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ReleaseprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Releaseprofile>>
  > = ({ signal }) => getApiV3Releaseprofile(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Releaseprofile>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const deleteApiV3ReleaseprofileId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/releaseprofile/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3ReleaseprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3ReleaseprofileId>>
>;

export type DeleteApiV3ReleaseprofileIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3ReleaseprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3ReleaseprofileId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3ReleaseprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3ReleaseprofileId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3ReleaseprofileId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3ReleaseprofileId = (
  id: string,
  releaseProfileResource: ReleaseProfileResource,
) => {
  return apiInstance<ReleaseProfileResource>({
    url: `/api/v3/releaseprofile/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: releaseProfileResource,
  });
};

export type PutApiV3ReleaseprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ReleaseprofileId>>
>;
export type PutApiV3ReleaseprofileIdMutationBody = ReleaseProfileResource;
export type PutApiV3ReleaseprofileIdMutationError = ErrorType<unknown>;

export const usePutApiV3ReleaseprofileId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ReleaseprofileId>>,
    TError,
    { id: string; data: ReleaseProfileResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ReleaseprofileId>>,
    { id: string; data: ReleaseProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ReleaseprofileId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3ReleaseprofileId>>,
    TError,
    { id: string; data: ReleaseProfileResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3ReleaseprofileId = (id: number, signal?: AbortSignal) => {
  return apiInstance<ReleaseProfileResource>({
    url: `/api/v3/releaseprofile/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ReleaseprofileIdQueryKey = (id: number) => [
  `/api/v3/releaseprofile/${id}`,
];

export type GetApiV3ReleaseprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ReleaseprofileId>>
>;
export type GetApiV3ReleaseprofileIdQueryError = ErrorType<unknown>;

export const useGetApiV3ReleaseprofileId = <
  TData = Awaited<ReturnType<typeof getApiV3ReleaseprofileId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ReleaseprofileId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3ReleaseprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ReleaseprofileId>>
  > = ({ signal }) => getApiV3ReleaseprofileId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ReleaseprofileId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3ReleasePush = (releaseResource: ReleaseResource) => {
  return apiInstance<ReleaseResource[]>({
    url: `/api/v3/release/push`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: releaseResource,
  });
};

export type PostApiV3ReleasePushMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3ReleasePush>>
>;
export type PostApiV3ReleasePushMutationBody = ReleaseResource;
export type PostApiV3ReleasePushMutationError = ErrorType<unknown>;

export const usePostApiV3ReleasePush = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3ReleasePush>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3ReleasePush>>,
    { data: ReleaseResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3ReleasePush(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3ReleasePush>>,
    TError,
    { data: ReleaseResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3Remotepathmapping = (
  remotePathMappingResource: RemotePathMappingResource,
) => {
  return apiInstance<RemotePathMappingResource>({
    url: `/api/v3/remotepathmapping`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: remotePathMappingResource,
  });
};

export type PostApiV3RemotepathmappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Remotepathmapping>>
>;
export type PostApiV3RemotepathmappingMutationBody = RemotePathMappingResource;
export type PostApiV3RemotepathmappingMutationError = ErrorType<unknown>;

export const usePostApiV3Remotepathmapping = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Remotepathmapping>>,
    TError,
    { data: RemotePathMappingResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Remotepathmapping>>,
    { data: RemotePathMappingResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Remotepathmapping(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Remotepathmapping>>,
    TError,
    { data: RemotePathMappingResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Remotepathmapping = (signal?: AbortSignal) => {
  return apiInstance<RemotePathMappingResource[]>({
    url: `/api/v3/remotepathmapping`,
    method: "get",
    signal,
  });
};

export const getGetApiV3RemotepathmappingQueryKey = () => [
  `/api/v3/remotepathmapping`,
];

export type GetApiV3RemotepathmappingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Remotepathmapping>>
>;
export type GetApiV3RemotepathmappingQueryError = ErrorType<unknown>;

export const useGetApiV3Remotepathmapping = <
  TData = Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3RemotepathmappingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Remotepathmapping>>
  > = ({ signal }) => getApiV3Remotepathmapping(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Remotepathmapping>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const deleteApiV3RemotepathmappingId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/remotepathmapping/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3RemotepathmappingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3RemotepathmappingId>>
>;

export type DeleteApiV3RemotepathmappingIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3RemotepathmappingId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3RemotepathmappingId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3RemotepathmappingId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3RemotepathmappingId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3RemotepathmappingId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3RemotepathmappingId = (
  id: string,
  remotePathMappingResource: RemotePathMappingResource,
) => {
  return apiInstance<RemotePathMappingResource>({
    url: `/api/v3/remotepathmapping/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: remotePathMappingResource,
  });
};

export type PutApiV3RemotepathmappingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3RemotepathmappingId>>
>;
export type PutApiV3RemotepathmappingIdMutationBody = RemotePathMappingResource;
export type PutApiV3RemotepathmappingIdMutationError = ErrorType<unknown>;

export const usePutApiV3RemotepathmappingId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3RemotepathmappingId>>,
    TError,
    { id: string; data: RemotePathMappingResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3RemotepathmappingId>>,
    { id: string; data: RemotePathMappingResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3RemotepathmappingId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3RemotepathmappingId>>,
    TError,
    { id: string; data: RemotePathMappingResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3RemotepathmappingId = (
  id: number,
  signal?: AbortSignal,
) => {
  return apiInstance<RemotePathMappingResource>({
    url: `/api/v3/remotepathmapping/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3RemotepathmappingIdQueryKey = (id: number) => [
  `/api/v3/remotepathmapping/${id}`,
];

export type GetApiV3RemotepathmappingIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>
>;
export type GetApiV3RemotepathmappingIdQueryError = ErrorType<unknown>;

export const useGetApiV3RemotepathmappingId = <
  TData = Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3RemotepathmappingIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>
  > = ({ signal }) => getApiV3RemotepathmappingId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3RemotepathmappingId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Rename = (
  params?: GetApiV3RenameParams,
  signal?: AbortSignal,
) => {
  return apiInstance<RenameEpisodeResource[]>({
    url: `/api/v3/rename`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3RenameQueryKey = (params?: GetApiV3RenameParams) => [
  `/api/v3/rename`,
  ...(params ? [params] : []),
];

export type GetApiV3RenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Rename>>
>;
export type GetApiV3RenameQueryError = ErrorType<unknown>;

export const useGetApiV3Rename = <
  TData = Awaited<ReturnType<typeof getApiV3Rename>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3RenameParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Rename>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3RenameQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Rename>>> = ({
    signal,
  }) => getApiV3Rename(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Rename>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Rootfolder = (rootFolderResource: RootFolderResource) => {
  return apiInstance<RootFolderResource>({
    url: `/api/v3/rootfolder`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: rootFolderResource,
  });
};

export type PostApiV3RootfolderMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Rootfolder>>
>;
export type PostApiV3RootfolderMutationBody = RootFolderResource;
export type PostApiV3RootfolderMutationError = ErrorType<unknown>;

export const usePostApiV3Rootfolder = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Rootfolder>>,
    TError,
    { data: RootFolderResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Rootfolder>>,
    { data: RootFolderResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Rootfolder(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Rootfolder>>,
    TError,
    { data: RootFolderResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Rootfolder = (signal?: AbortSignal) => {
  return apiInstance<RootFolderResource[]>({
    url: `/api/v3/rootfolder`,
    method: "get",
    signal,
  });
};

export const getGetApiV3RootfolderQueryKey = () => [`/api/v3/rootfolder`];

export type GetApiV3RootfolderQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Rootfolder>>
>;
export type GetApiV3RootfolderQueryError = ErrorType<unknown>;

export const useGetApiV3Rootfolder = <
  TData = Awaited<ReturnType<typeof getApiV3Rootfolder>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Rootfolder>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3RootfolderQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3Rootfolder>>
  > = ({ signal }) => getApiV3Rootfolder(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Rootfolder>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const deleteApiV3RootfolderId = (id: number) => {
  return apiInstance<void>({
    url: `/api/v3/rootfolder/${id}`,
    method: "delete",
  });
};

export type DeleteApiV3RootfolderIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3RootfolderId>>
>;

export type DeleteApiV3RootfolderIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3RootfolderId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3RootfolderId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3RootfolderId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3RootfolderId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3RootfolderId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3RootfolderId = (id: number, signal?: AbortSignal) => {
  return apiInstance<RootFolderResource>({
    url: `/api/v3/rootfolder/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3RootfolderIdQueryKey = (id: number) => [
  `/api/v3/rootfolder/${id}`,
];

export type GetApiV3RootfolderIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3RootfolderId>>
>;
export type GetApiV3RootfolderIdQueryError = ErrorType<unknown>;

export const useGetApiV3RootfolderId = <
  TData = Awaited<ReturnType<typeof getApiV3RootfolderId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3RootfolderId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3RootfolderIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3RootfolderId>>
  > = ({ signal }) => getApiV3RootfolderId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3RootfolderId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Seasonpass = (seasonPassResource: SeasonPassResource) => {
  return apiInstance<void>({
    url: `/api/v3/seasonpass`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: seasonPassResource,
  });
};

export type PostApiV3SeasonpassMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Seasonpass>>
>;
export type PostApiV3SeasonpassMutationBody = SeasonPassResource;
export type PostApiV3SeasonpassMutationError = ErrorType<unknown>;

export const usePostApiV3Seasonpass = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Seasonpass>>,
    TError,
    { data: SeasonPassResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Seasonpass>>,
    { data: SeasonPassResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Seasonpass(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Seasonpass>>,
    TError,
    { data: SeasonPassResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Series = (
  params?: GetApiV3SeriesParams,
  signal?: AbortSignal,
) => {
  return apiInstance<SeriesResource[]>({
    url: `/api/v3/series`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3SeriesQueryKey = (params?: GetApiV3SeriesParams) => [
  `/api/v3/series`,
  ...(params ? [params] : []),
];

export type GetApiV3SeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Series>>
>;
export type GetApiV3SeriesQueryError = ErrorType<unknown>;

export const useGetApiV3Series = <
  TData = Awaited<ReturnType<typeof getApiV3Series>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3SeriesParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3Series>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3SeriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Series>>> = ({
    signal,
  }) => getApiV3Series(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Series>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Series = (seriesResource: SeriesResource) => {
  return apiInstance<SeriesResource>({
    url: `/api/v3/series`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: seriesResource,
  });
};

export type PostApiV3SeriesMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Series>>
>;
export type PostApiV3SeriesMutationBody = SeriesResource;
export type PostApiV3SeriesMutationError = ErrorType<unknown>;

export const usePostApiV3Series = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Series>>,
    TError,
    { data: SeriesResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Series>>,
    { data: SeriesResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Series(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Series>>,
    TError,
    { data: SeriesResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3SeriesId = (
  id: string,
  seriesResource: SeriesResource,
  params?: PutApiV3SeriesIdParams,
) => {
  return apiInstance<SeriesResource>({
    url: `/api/v3/series/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: seriesResource,
    params,
  });
};

export type PutApiV3SeriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3SeriesId>>
>;
export type PutApiV3SeriesIdMutationBody = SeriesResource;
export type PutApiV3SeriesIdMutationError = ErrorType<unknown>;

export const usePutApiV3SeriesId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3SeriesId>>,
    TError,
    { id: string; data: SeriesResource; params?: PutApiV3SeriesIdParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3SeriesId>>,
    { id: string; data: SeriesResource; params?: PutApiV3SeriesIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV3SeriesId(id, data, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3SeriesId>>,
    TError,
    { id: string; data: SeriesResource; params?: PutApiV3SeriesIdParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3SeriesId = (
  id: number,
  params?: DeleteApiV3SeriesIdParams,
) => {
  return apiInstance<void>({
    url: `/api/v3/series/${id}`,
    method: "delete",
    params,
  });
};

export type DeleteApiV3SeriesIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3SeriesId>>
>;

export type DeleteApiV3SeriesIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3SeriesId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3SeriesId>>,
    TError,
    { id: number; params?: DeleteApiV3SeriesIdParams },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3SeriesId>>,
    { id: number; params?: DeleteApiV3SeriesIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteApiV3SeriesId(id, params);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3SeriesId>>,
    TError,
    { id: number; params?: DeleteApiV3SeriesIdParams },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3SeriesId = (id: number, signal?: AbortSignal) => {
  return apiInstance<SeriesResource>({
    url: `/api/v3/series/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3SeriesIdQueryKey = (id: number) => [
  `/api/v3/series/${id}`,
];

export type GetApiV3SeriesIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SeriesId>>
>;
export type GetApiV3SeriesIdQueryError = ErrorType<unknown>;

export const useGetApiV3SeriesId = <
  TData = Awaited<ReturnType<typeof getApiV3SeriesId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SeriesId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3SeriesIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SeriesId>>
  > = ({ signal }) => getApiV3SeriesId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3SeriesId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3SeriesEditor = (
  seriesEditorResource: SeriesEditorResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/series/editor`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: seriesEditorResource,
  });
};

export type PutApiV3SeriesEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3SeriesEditor>>
>;
export type PutApiV3SeriesEditorMutationBody = SeriesEditorResource;
export type PutApiV3SeriesEditorMutationError = ErrorType<unknown>;

export const usePutApiV3SeriesEditor = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3SeriesEditor>>,
    TError,
    { data: SeriesEditorResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3SeriesEditor>>,
    { data: SeriesEditorResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV3SeriesEditor(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3SeriesEditor>>,
    TError,
    { data: SeriesEditorResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3SeriesEditor = (
  seriesEditorResource: SeriesEditorResource,
) => {
  return apiInstance<void>({
    url: `/api/v3/series/editor`,
    method: "delete",
    headers: { "Content-Type": "application/json" },
    data: seriesEditorResource,
  });
};

export type DeleteApiV3SeriesEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3SeriesEditor>>
>;
export type DeleteApiV3SeriesEditorMutationBody = SeriesEditorResource;
export type DeleteApiV3SeriesEditorMutationError = ErrorType<unknown>;

export const useDeleteApiV3SeriesEditor = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3SeriesEditor>>,
    TError,
    { data: SeriesEditorResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3SeriesEditor>>,
    { data: SeriesEditorResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV3SeriesEditor(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3SeriesEditor>>,
    TError,
    { data: SeriesEditorResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3SeriesImport = (seriesResource: SeriesResource[]) => {
  return apiInstance<void>({
    url: `/api/v3/series/import`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: seriesResource,
  });
};

export type PostApiV3SeriesImportMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3SeriesImport>>
>;
export type PostApiV3SeriesImportMutationBody = SeriesResource[];
export type PostApiV3SeriesImportMutationError = ErrorType<unknown>;

export const usePostApiV3SeriesImport = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3SeriesImport>>,
    TError,
    { data: SeriesResource[] },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3SeriesImport>>,
    { data: SeriesResource[] }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3SeriesImport(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3SeriesImport>>,
    TError,
    { data: SeriesResource[] },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3SeriesLookup = (
  params?: GetApiV3SeriesLookupParams,
  signal?: AbortSignal,
) => {
  return apiInstance<void>({
    url: `/api/v3/series/lookup`,
    method: "get",
    params,
    signal,
  });
};

export const getGetApiV3SeriesLookupQueryKey = (
  params?: GetApiV3SeriesLookupParams,
) => [`/api/v3/series/lookup`, ...(params ? [params] : [])];

export type GetApiV3SeriesLookupQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SeriesLookup>>
>;
export type GetApiV3SeriesLookupQueryError = ErrorType<unknown>;

export const useGetApiV3SeriesLookup = <
  TData = Awaited<ReturnType<typeof getApiV3SeriesLookup>>,
  TError = ErrorType<unknown>,
>(
  params?: GetApiV3SeriesLookupParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SeriesLookup>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3SeriesLookupQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SeriesLookup>>
  > = ({ signal }) => getApiV3SeriesLookup(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3SeriesLookup>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getContentPath = (path: string, signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/content/${path}`, method: "get", signal });
};

export const getGetContentPathQueryKey = (path: string) => [`/content/${path}`];

export type GetContentPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContentPath>>
>;
export type GetContentPathQueryError = ErrorType<unknown>;

export const useGetContentPath = <
  TData = Awaited<ReturnType<typeof getContentPath>>,
  TError = ErrorType<unknown>,
>(
  path: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getContentPath>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetContentPathQueryKey(path);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentPath>>> = ({
    signal,
  }) => getContentPath(path, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getContentPath>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!path, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const get = (signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/`, method: "get", signal });
};

export const getGetQueryKey = () => [`/`];

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>;
export type GetQueryError = ErrorType<unknown>;

export const useGet = <
  TData = Awaited<ReturnType<typeof get>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({
    signal,
  }) => get(signal);

  const query = useQuery<Awaited<ReturnType<typeof get>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getPath = (path: string, signal?: AbortSignal) => {
  return apiInstance<void>({ url: `/${path}`, method: "get", signal });
};

export const getGetPathQueryKey = (path: string) => [`/${path}`];

export type GetPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPath>>
>;
export type GetPathQueryError = ErrorType<unknown>;

export const useGetPath = <
  TData = Awaited<ReturnType<typeof getPath>>,
  TError = ErrorType<unknown>,
>(
  path: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetPathQueryKey(path);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPath>>> = ({
    signal,
  }) => getPath(path, signal);

  const query = useQuery<Awaited<ReturnType<typeof getPath>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!path, ...queryOptions },
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3SystemStatus = (signal?: AbortSignal) => {
  return apiInstance<SystemResource>({
    url: `/api/v3/system/status`,
    method: "get",
    signal,
  });
};

export const getGetApiV3SystemStatusQueryKey = () => [`/api/v3/system/status`];

export type GetApiV3SystemStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SystemStatus>>
>;
export type GetApiV3SystemStatusQueryError = ErrorType<unknown>;

export const useGetApiV3SystemStatus = <
  TData = Awaited<ReturnType<typeof getApiV3SystemStatus>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3SystemStatus>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3SystemStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SystemStatus>>
  > = ({ signal }) => getApiV3SystemStatus(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3SystemStatus>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3SystemRoutes = (signal?: AbortSignal) => {
  return apiInstance<void>({
    url: `/api/v3/system/routes`,
    method: "get",
    signal,
  });
};

export const getGetApiV3SystemRoutesQueryKey = () => [`/api/v3/system/routes`];

export type GetApiV3SystemRoutesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SystemRoutes>>
>;
export type GetApiV3SystemRoutesQueryError = ErrorType<unknown>;

export const useGetApiV3SystemRoutes = <
  TData = Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3SystemRoutesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SystemRoutes>>
  > = ({ signal }) => getApiV3SystemRoutes(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3SystemRoutes>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3SystemRoutesDuplicate = (signal?: AbortSignal) => {
  return apiInstance<void>({
    url: `/api/v3/system/routes/duplicate`,
    method: "get",
    signal,
  });
};

export const getGetApiV3SystemRoutesDuplicateQueryKey = () => [
  `/api/v3/system/routes/duplicate`,
];

export type GetApiV3SystemRoutesDuplicateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>
>;
export type GetApiV3SystemRoutesDuplicateQueryError = ErrorType<unknown>;

export const useGetApiV3SystemRoutesDuplicate = <
  TData = Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3SystemRoutesDuplicateQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>
  > = ({ signal }) => getApiV3SystemRoutesDuplicate(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3SystemRoutesDuplicate>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3SystemShutdown = () => {
  return apiInstance<void>({ url: `/api/v3/system/shutdown`, method: "post" });
};

export type PostApiV3SystemShutdownMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3SystemShutdown>>
>;

export type PostApiV3SystemShutdownMutationError = ErrorType<unknown>;

export const usePostApiV3SystemShutdown = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3SystemShutdown>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3SystemShutdown>>,
    TVariables
  > = () => {
    return postApiV3SystemShutdown();
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3SystemShutdown>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};

export const postApiV3SystemRestart = () => {
  return apiInstance<void>({ url: `/api/v3/system/restart`, method: "post" });
};

export type PostApiV3SystemRestartMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3SystemRestart>>
>;

export type PostApiV3SystemRestartMutationError = ErrorType<unknown>;

export const usePostApiV3SystemRestart = <
  TError = ErrorType<unknown>,
  TVariables = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3SystemRestart>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3SystemRestart>>,
    TVariables
  > = () => {
    return postApiV3SystemRestart();
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3SystemRestart>>,
    TError,
    TVariables,
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3Tag = (signal?: AbortSignal) => {
  return apiInstance<TagResource[]>({
    url: `/api/v3/tag`,
    method: "get",
    signal,
  });
};

export const getGetApiV3TagQueryKey = () => [`/api/v3/tag`];

export type GetApiV3TagQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Tag>>
>;
export type GetApiV3TagQueryError = ErrorType<unknown>;

export const useGetApiV3Tag = <
  TData = Awaited<ReturnType<typeof getApiV3Tag>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Tag>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3TagQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Tag>>> = ({
    signal,
  }) => getApiV3Tag(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Tag>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const postApiV3Tag = (tagResource: TagResource) => {
  return apiInstance<TagResource>({
    url: `/api/v3/tag`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: tagResource,
  });
};

export type PostApiV3TagMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV3Tag>>
>;
export type PostApiV3TagMutationBody = TagResource;
export type PostApiV3TagMutationError = ErrorType<unknown>;

export const usePostApiV3Tag = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV3Tag>>,
    TError,
    { data: TagResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV3Tag>>,
    { data: TagResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV3Tag(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof postApiV3Tag>>,
    TError,
    { data: TagResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const putApiV3TagId = (id: string, tagResource: TagResource) => {
  return apiInstance<TagResource>({
    url: `/api/v3/tag/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: tagResource,
  });
};

export type PutApiV3TagIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3TagId>>
>;
export type PutApiV3TagIdMutationBody = TagResource;
export type PutApiV3TagIdMutationError = ErrorType<unknown>;

export const usePutApiV3TagId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3TagId>>,
    TError,
    { id: string; data: TagResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3TagId>>,
    { id: string; data: TagResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3TagId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3TagId>>,
    TError,
    { id: string; data: TagResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteApiV3TagId = (id: number) => {
  return apiInstance<void>({ url: `/api/v3/tag/${id}`, method: "delete" });
};

export type DeleteApiV3TagIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV3TagId>>
>;

export type DeleteApiV3TagIdMutationError = ErrorType<unknown>;

export const useDeleteApiV3TagId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV3TagId>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV3TagId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV3TagId(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteApiV3TagId>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3TagId = (id: number, signal?: AbortSignal) => {
  return apiInstance<TagResource>({
    url: `/api/v3/tag/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3TagIdQueryKey = (id: number) => [`/api/v3/tag/${id}`];

export type GetApiV3TagIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3TagId>>
>;
export type GetApiV3TagIdQueryError = ErrorType<unknown>;

export const useGetApiV3TagId = <
  TData = Awaited<ReturnType<typeof getApiV3TagId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3TagId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3TagIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3TagId>>> = ({
    signal,
  }) => getApiV3TagId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3TagId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3TagDetail = (signal?: AbortSignal) => {
  return apiInstance<TagDetailsResource[]>({
    url: `/api/v3/tag/detail`,
    method: "get",
    signal,
  });
};

export const getGetApiV3TagDetailQueryKey = () => [`/api/v3/tag/detail`];

export type GetApiV3TagDetailQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3TagDetail>>
>;
export type GetApiV3TagDetailQueryError = ErrorType<unknown>;

export const useGetApiV3TagDetail = <
  TData = Awaited<ReturnType<typeof getApiV3TagDetail>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3TagDetail>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3TagDetailQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3TagDetail>>
  > = ({ signal }) => getApiV3TagDetail(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3TagDetail>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3TagDetailId = (id: number, signal?: AbortSignal) => {
  return apiInstance<TagDetailsResource>({
    url: `/api/v3/tag/detail/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3TagDetailIdQueryKey = (id: number) => [
  `/api/v3/tag/detail/${id}`,
];

export type GetApiV3TagDetailIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3TagDetailId>>
>;
export type GetApiV3TagDetailIdQueryError = ErrorType<unknown>;

export const useGetApiV3TagDetailId = <
  TData = Awaited<ReturnType<typeof getApiV3TagDetailId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3TagDetailId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3TagDetailIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3TagDetailId>>
  > = ({ signal }) => getApiV3TagDetailId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3TagDetailId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3SystemTask = (signal?: AbortSignal) => {
  return apiInstance<TaskResource[]>({
    url: `/api/v3/system/task`,
    method: "get",
    signal,
  });
};

export const getGetApiV3SystemTaskQueryKey = () => [`/api/v3/system/task`];

export type GetApiV3SystemTaskQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SystemTask>>
>;
export type GetApiV3SystemTaskQueryError = ErrorType<unknown>;

export const useGetApiV3SystemTask = <
  TData = Awaited<ReturnType<typeof getApiV3SystemTask>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3SystemTask>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3SystemTaskQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SystemTask>>
  > = ({ signal }) => getApiV3SystemTask(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3SystemTask>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3SystemTaskId = (id: number, signal?: AbortSignal) => {
  return apiInstance<TaskResource>({
    url: `/api/v3/system/task/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3SystemTaskIdQueryKey = (id: number) => [
  `/api/v3/system/task/${id}`,
];

export type GetApiV3SystemTaskIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3SystemTaskId>>
>;
export type GetApiV3SystemTaskIdQueryError = ErrorType<unknown>;

export const useGetApiV3SystemTaskId = <
  TData = Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetApiV3SystemTaskIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3SystemTaskId>>
  > = ({ signal }) => getApiV3SystemTaskId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3SystemTaskId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const putApiV3ConfigUiId = (
  id: string,
  uiConfigResource: UiConfigResource,
) => {
  return apiInstance<UiConfigResource>({
    url: `/api/v3/config/ui/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: uiConfigResource,
  });
};

export type PutApiV3ConfigUiIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV3ConfigUiId>>
>;
export type PutApiV3ConfigUiIdMutationBody = UiConfigResource;
export type PutApiV3ConfigUiIdMutationError = ErrorType<unknown>;

export const usePutApiV3ConfigUiId = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV3ConfigUiId>>,
    TError,
    { id: string; data: UiConfigResource },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV3ConfigUiId>>,
    { id: string; data: UiConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV3ConfigUiId(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof putApiV3ConfigUiId>>,
    TError,
    { id: string; data: UiConfigResource },
    TContext
  >(mutationFn, mutationOptions);
};

export const getApiV3ConfigUiId = (id: number, signal?: AbortSignal) => {
  return apiInstance<UiConfigResource>({
    url: `/api/v3/config/ui/${id}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ConfigUiIdQueryKey = (id: number) => [
  `/api/v3/config/ui/${id}`,
];

export type GetApiV3ConfigUiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigUiId>>
>;
export type GetApiV3ConfigUiIdQueryError = ErrorType<unknown>;

export const useGetApiV3ConfigUiId = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
  TError = ErrorType<unknown>,
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ConfigUiIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigUiId>>
  > = ({ signal }) => getApiV3ConfigUiId(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ConfigUiId>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3ConfigUi = (signal?: AbortSignal) => {
  return apiInstance<UiConfigResource>({
    url: `/api/v3/config/ui`,
    method: "get",
    signal,
  });
};

export const getGetApiV3ConfigUiQueryKey = () => [`/api/v3/config/ui`];

export type GetApiV3ConfigUiQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3ConfigUi>>
>;
export type GetApiV3ConfigUiQueryError = ErrorType<unknown>;

export const useGetApiV3ConfigUi = <
  TData = Awaited<ReturnType<typeof getApiV3ConfigUi>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3ConfigUi>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3ConfigUiQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3ConfigUi>>
  > = ({ signal }) => getApiV3ConfigUi(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3ConfigUi>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3Update = (signal?: AbortSignal) => {
  return apiInstance<UpdateResource[]>({
    url: `/api/v3/update`,
    method: "get",
    signal,
  });
};

export const getGetApiV3UpdateQueryKey = () => [`/api/v3/update`];

export type GetApiV3UpdateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3Update>>
>;
export type GetApiV3UpdateQueryError = ErrorType<unknown>;

export const useGetApiV3Update = <
  TData = Awaited<ReturnType<typeof getApiV3Update>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3Update>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3UpdateQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV3Update>>> = ({
    signal,
  }) => getApiV3Update(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3Update>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3LogFileUpdate = (signal?: AbortSignal) => {
  return apiInstance<LogFileResource[]>({
    url: `/api/v3/log/file/update`,
    method: "get",
    signal,
  });
};

export const getGetApiV3LogFileUpdateQueryKey = () => [
  `/api/v3/log/file/update`,
];

export type GetApiV3LogFileUpdateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LogFileUpdate>>
>;
export type GetApiV3LogFileUpdateQueryError = ErrorType<unknown>;

export const useGetApiV3LogFileUpdate = <
  TData = Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetApiV3LogFileUpdateQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3LogFileUpdate>>
  > = ({ signal }) => getApiV3LogFileUpdate(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3LogFileUpdate>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getApiV3LogFileUpdateFilename = (
  filename: string,
  signal?: AbortSignal,
) => {
  return apiInstance<void>({
    url: `/api/v3/log/file/update/${filename}`,
    method: "get",
    signal,
  });
};

export const getGetApiV3LogFileUpdateFilenameQueryKey = (filename: string) => [
  `/api/v3/log/file/update/${filename}`,
];

export type GetApiV3LogFileUpdateFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>
>;
export type GetApiV3LogFileUpdateFilenameQueryError = ErrorType<unknown>;

export const useGetApiV3LogFileUpdateFilename = <
  TData = Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
  TError = ErrorType<unknown>,
>(
  filename: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetApiV3LogFileUpdateFilenameQueryKey(filename);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>
  > = ({ signal }) => getApiV3LogFileUpdateFilename(filename, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getApiV3LogFileUpdateFilename>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!filename,
    ...queryOptions,
  }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
